// <auto-generated />
using System;
using JobList.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JobList.DataAccess.Migrations
{
    [DbContext(typeof(JobListDbContext))]
    [Migration("20180930124938_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JobList.DataAccess.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_CITIES_NAME");

                    b.ToTable("CITIES");

                    b.HasData(
                        new { Id = 1, Name = "Lviv" },
                        new { Id = 2, Name = "Kyiv" },
                        new { Id = 3, Name = "Dnipro" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("ADDRESS")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("BossName")
                        .IsRequired()
                        .HasColumnName("BOSS_NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnName("FULL_DESCRIPTION")
                        .IsUnicode(false);

                    b.Property<byte[]>("LogoData")
                        .HasColumnName("LOGO_DATA");

                    b.Property<string>("LogoMimetype")
                        .HasColumnName("LOGO_MIMETYPE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.Property<string>("ShortDescription")
                        .HasColumnName("SHORT_DESCRIPTION")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Site")
                        .HasColumnName("SITE")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_ADDRESS");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_EMAIL");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_NAME");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_PHONE");

                    b.HasIndex("RoleId");

                    b.ToTable("COMPANIES");

                    b.HasData(
                        new { Id = 1, Address = "39832 Medhurst Crossroad, Darrylland, Saint Pierre and Miquelon", BossName = "Coy", Email = "Malinda65@gmail.com", FullDescription = "Exercitationem quo sit possimus non cumque ut.", Name = "Company № 743", Password = "RcUm54SwLf", Phone = "073 5531", RoleId = 2, ShortDescription = "veritatis", Site = "https://alexys.com" },
                        new { Id = 2, Address = "1004 Graciela Knoll, Cruickshankstad, Benin", BossName = "Katharina", Email = "Leopoldo42@yahoo.com", FullDescription = "Accusamus reiciendis dignissimos provident veniam laboriosam.", Name = "Company № 293", Password = "unYjU9RsCH", Phone = "073 7104", RoleId = 2, ShortDescription = "consequuntur", Site = "https://wyatt.com" },
                        new { Id = 3, Address = "487 Cordelia Locks, Lavernland, Bulgaria", BossName = "Aimee", Email = "Neva.Murazik5@gmail.com", FullDescription = "Ullam rerum magni.", Name = "Company № 235", Password = "5tLXBNi4Co", Phone = "073 7459", RoleId = 2, ShortDescription = "iusto", Site = "https://dino.info" },
                        new { Id = 4, Address = "47882 Jo Rue, Fosterland, Finland", BossName = "Lisette", Email = "Louie.Considine@hotmail.com", FullDescription = "Sequi iusto illo aliquam exercitationem aut nam voluptatum.", Name = "Company № 352", Password = "wSU45ohr9M", Phone = "073 5990", RoleId = 2, ShortDescription = "facere", Site = "http://julio.biz" },
                        new { Id = 5, Address = "051 Jailyn Spring, Ratkechester, Somalia", BossName = "Jazmyne", Email = "Everardo27@hotmail.com", FullDescription = "Sed nisi voluptatem qui blanditiis dolorum recusandae.", Name = "Company № 113", Password = "UmiVQHTLeh", Phone = "073 96", RoleId = 1, ShortDescription = "atque", Site = "http://eldridge.name" },
                        new { Id = 6, Address = "6728 Wolff Route, East Dasia, French Southern Territories", BossName = "Bennett", Email = "Carrie.Flatley51@yahoo.com", FullDescription = "Est veniam accusantium in.", Name = "Company № 722", Password = "0V5ZEh7b30", Phone = "073 8009", RoleId = 2, ShortDescription = "aut", Site = "http://ada.net" },
                        new { Id = 7, Address = "52892 Marjorie Place, Lake Carlos, Holy See (Vatican City State)", BossName = "Renee", Email = "Leilani_Schoen40@gmail.com", FullDescription = "Ut exercitationem sunt a.", Name = "Company № 788", Password = "tIy4eOdawn", Phone = "073 1066", RoleId = 1, ShortDescription = "esse", Site = "http://margarett.org" },
                        new { Id = 8, Address = "98533 Micah Turnpike, Abdullahfurt, Mozambique", BossName = "Pattie", Email = "Oda61@hotmail.com", FullDescription = "Nihil porro eaque qui fuga quidem aut vel.", Name = "Company № 903", Password = "86A0aIJkQW", Phone = "073 1973", RoleId = 1, ShortDescription = "eligendi", Site = "https://deja.com" },
                        new { Id = 9, Address = "64628 Kilback Ford, Windlerton, Equatorial Guinea", BossName = "Olen", Email = "Isaiah.Collier29@gmail.com", FullDescription = "Quo sunt aut.", Name = "Company № 197", Password = "TGLP0R7wYe", Phone = "073 6621", RoleId = 1, ShortDescription = "reprehenderit", Site = "http://johan.biz" },
                        new { Id = 10, Address = "61628 Medhurst Garden, Lake Lourdesborough, Puerto Rico", BossName = "Broderick", Email = "Jimmy39@gmail.com", FullDescription = "Velit et dolorum quam recusandae delectus nesciunt nobis.", Name = "Company № 784", Password = "UZN_npe3IW", Phone = "073 1423", RoleId = 2, ShortDescription = "sit", Site = "http://jeromy.net" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.EducationPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FacultyId")
                        .HasColumnName("FACULTY_ID");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnName("FINISH_DATE")
                        .HasColumnType("date");

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.Property<int>("SchoolId")
                        .HasColumnName("SCHOOL_ID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("START_DATE")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("ResumeId");

                    b.HasIndex("SchoolId");

                    b.ToTable("EDUCATION_PERIODS");

                    b.HasData(
                        new { Id = 63, FacultyId = 13, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 49, SchoolId = 1, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 64, FacultyId = 13, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 49, SchoolId = 2, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 65, FacultyId = 16, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 50, SchoolId = 2, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 66, FacultyId = 15, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 50, SchoolId = 2, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 67, FacultyId = 20, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 50, SchoolId = 2, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 68, FacultyId = 12, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 50, SchoolId = 2, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 69, FacultyId = 16, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 49, SchoolId = 3, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 70, FacultyId = 14, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 49, SchoolId = 3, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 71, FacultyId = 14, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 49, SchoolId = 1, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 72, FacultyId = 20, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 50, SchoolId = 2, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnName("COMPANY_NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnName("FINISH_DATE")
                        .HasColumnType("date");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnName("POSITION")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("START_DATE")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("EXPERIENCES");

                    b.HasData(
                        new { Id = 53, CompanyName = "Felicita Rogahn", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Dolores voluptates rerum soluta.", ResumeId = 49, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 54, CompanyName = "Beryl Hoppe", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Perferendis mollitia ut in.", ResumeId = 50, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 55, CompanyName = "Jewel Botsford", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Minima dolorem sed et molestiae deserunt et.", ResumeId = 49, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 56, CompanyName = "Jesse Kertzmann", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Omnis exercitationem reprehenderit perspiciatis maxime.", ResumeId = 50, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 57, CompanyName = "Maudie Shanahan", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Praesentium aperiam eveniet nemo.", ResumeId = 50, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 58, CompanyName = "Zion Spinka", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "In fugiat iusto ut quas corrupti.", ResumeId = 49, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 59, CompanyName = "Roberta Schultz", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Est perspiciatis voluptatum quos sit.", ResumeId = 50, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 60, CompanyName = "Quincy Simonis", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Dolorum ab corrupti mollitia aut cum repudiandae sed dolore ut.", ResumeId = 49, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 61, CompanyName = "Olaf Keeling", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Alias illo nam repellat suscipit ab aut recusandae.", ResumeId = 50, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 62, CompanyName = "Tomasa O'Reilly", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Minima cumque ut at et et fugiat vitae modi vel.", ResumeId = 50, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("FACULTIES");

                    b.HasData(
                        new { Id = 11, Name = "Software Engineering" },
                        new { Id = 12, Name = "Computer Science" },
                        new { Id = 13, Name = "Applied Mathematics" },
                        new { Id = 14, Name = "Applied Mathematics" },
                        new { Id = 15, Name = "Software Engineering" },
                        new { Id = 16, Name = "Computer Science" },
                        new { Id = 17, Name = "Applied Mathematics" },
                        new { Id = 18, Name = "Computer Science" },
                        new { Id = 19, Name = "Computer Science" },
                        new { Id = 20, Name = "Software Engineering" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.FavoriteVacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId")
                        .HasColumnName("USER_ID");

                    b.Property<int>("VacancyId")
                        .HasColumnName("VACANCY_ID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VacancyId");

                    b.ToTable("FAVORITE_VACANCIES");

                    b.HasData(
                        new { Id = 83, UserId = 50, VacancyId = 31 },
                        new { Id = 84, UserId = 41, VacancyId = 36 },
                        new { Id = 85, UserId = 44, VacancyId = 34 },
                        new { Id = 86, UserId = 49, VacancyId = 32 },
                        new { Id = 87, UserId = 43, VacancyId = 34 },
                        new { Id = 88, UserId = 43, VacancyId = 39 },
                        new { Id = 89, UserId = 47, VacancyId = 39 },
                        new { Id = 90, UserId = 43, VacancyId = 40 },
                        new { Id = 91, UserId = 43, VacancyId = 39 },
                        new { Id = 92, UserId = 44, VacancyId = 31 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_LANGUAGES_NAME");

                    b.ToTable("LANGUAGES");

                    b.HasData(
                        new { Id = 1, Name = "English" },
                        new { Id = 2, Name = "Ukrainian" },
                        new { Id = 3, Name = "Russian" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Recruiter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnName("COMPANY_ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FIRST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LAST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte[]>("LogoData")
                        .HasColumnName("LOGO_DATA");

                    b.Property<string>("LogoMimetype")
                        .HasColumnName("LOGO_MIMETYPE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_RECRUITERS_EMAIL");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_RECRUITERS_PHONE");

                    b.HasIndex("RoleId");

                    b.ToTable("RECRUITERS");

                    b.HasData(
                        new { Id = 21, CompanyId = 1, Email = "Lorena.Doyle46@hotmail.com", FirstName = "Malachi", LastName = "Wunsch", Password = "SgsykQzvBG", Phone = "073 2764", RoleId = 1 },
                        new { Id = 22, CompanyId = 8, Email = "Roosevelt.Mann@yahoo.com", FirstName = "Orpha", LastName = "Stokes", Password = "lC6khD9Yqj", Phone = "073 2088", RoleId = 2 },
                        new { Id = 23, CompanyId = 8, Email = "Bartholome28@gmail.com", FirstName = "Marshall", LastName = "Parisian", Password = "npavD6dEgW", Phone = "073 5421", RoleId = 1 },
                        new { Id = 24, CompanyId = 9, Email = "Alaina.Morissette@gmail.com", FirstName = "Wilfrid", LastName = "Mann", Password = "T8vnwSGj8w", Phone = "073 784", RoleId = 2 },
                        new { Id = 25, CompanyId = 3, Email = "Aaliyah_Green31@yahoo.com", FirstName = "Clare", LastName = "Corkery", Password = "2gmEVMuLKb", Phone = "073 9805", RoleId = 1 },
                        new { Id = 26, CompanyId = 8, Email = "Lemuel8@gmail.com", FirstName = "Jaime", LastName = "Schinner", Password = "XlsRqtMQxh", Phone = "073 5251", RoleId = 2 },
                        new { Id = 27, CompanyId = 9, Email = "Anabelle66@gmail.com", FirstName = "Janet", LastName = "Cummerata", Password = "27CIqYFonx", Phone = "073 7890", RoleId = 2 },
                        new { Id = 28, CompanyId = 7, Email = "Kianna_Pouros@hotmail.com", FirstName = "Daniela", LastName = "Smith", Password = "lTlmxriZQp", Phone = "073 1303", RoleId = 2 },
                        new { Id = 29, CompanyId = 1, Email = "Mario.Littel@hotmail.com", FirstName = "Naomi", LastName = "Parker", Password = "qw0OrGbMYq", Phone = "073 2737", RoleId = 2 },
                        new { Id = 30, CompanyId = 8, Email = "Xzavier.Langworth89@hotmail.com", FirstName = "Gabriella", LastName = "Beer", Password = "GI8LZkbtEh", Phone = "073 621", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Resume", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Courses")
                        .HasColumnName("COURSES")
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Facebook")
                        .HasColumnName("FACEBOOK")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FamilyState")
                        .HasColumnName("FAMILY_STATE")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Github")
                        .HasColumnName("GITHUB")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Instagram")
                        .HasColumnName("INSTAGRAM")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("KeySkills")
                        .IsRequired()
                        .HasColumnName("KEY_SKILLS")
                        .IsUnicode(false);

                    b.Property<string>("Linkedin")
                        .HasColumnName("LINKEDIN")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Skype")
                        .HasColumnName("SKYPE")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("SoftSkills")
                        .IsRequired()
                        .HasColumnName("SOFT_SKILLS")
                        .IsUnicode(false);

                    b.Property<int>("WorkAreaId")
                        .HasColumnName("WORK_AREA_ID");

                    b.HasKey("Id");

                    b.HasIndex("Facebook")
                        .IsUnique()
                        .HasName("UQ_RESUMES_FACEBOOK")
                        .HasFilter("[FACEBOOK] IS NOT NULL");

                    b.HasIndex("Instagram")
                        .IsUnique()
                        .HasName("UQ_RESUMES_INSTAGRAM")
                        .HasFilter("[INSTAGRAM] IS NOT NULL");

                    b.HasIndex("Linkedin")
                        .IsUnique()
                        .HasName("UQ_RESUMES_LINKEDIN")
                        .HasFilter("[LINKEDIN] IS NOT NULL");

                    b.HasIndex("Skype")
                        .IsUnique()
                        .HasName("UQ_RESUMES_SKYPE")
                        .HasFilter("[SKYPE] IS NOT NULL");

                    b.HasIndex("WorkAreaId");

                    b.ToTable("RESUMES");

                    b.HasData(
                        new { Id = 49, Courses = "Similique qui qui sit nemo eligendi laudantium.", CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Facebook = "http://elisha.info", FamilyState = "Porro.", Github = "https://karina.info", Instagram = "https://cathy.org", KeySkills = "Officia dicta saepe.", Linkedin = "http://gretchen.org", ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Skype = "http://kitty.net", SoftSkills = "Recusandae omnis illo minus deleniti corporis tempora fugiat qui quis.", WorkAreaId = 1 },
                        new { Id = 50, Courses = "Rem mollitia et id.", CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Facebook = "http://audra.org", FamilyState = "Aspernatur.", Github = "http://lonzo.info", Instagram = "http://brant.name", KeySkills = "Vero accusantium quidem voluptate.", Linkedin = "https://jaunita.org", ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Skype = "https://oswald.com", SoftSkills = "Saepe sapiente sunt voluptate quo enim quam quae.", WorkAreaId = 1 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.ResumeLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId")
                        .HasColumnName("LANGUAGE_ID");

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ResumeId");

                    b.ToTable("RESUME_LANGUAGES");

                    b.HasData(
                        new { Id = 73, LanguageId = 2, ResumeId = 49 },
                        new { Id = 74, LanguageId = 1, ResumeId = 50 },
                        new { Id = 75, LanguageId = 3, ResumeId = 49 },
                        new { Id = 76, LanguageId = 2, ResumeId = 49 },
                        new { Id = 77, LanguageId = 3, ResumeId = 49 },
                        new { Id = 78, LanguageId = 2, ResumeId = 49 },
                        new { Id = 79, LanguageId = 2, ResumeId = 49 },
                        new { Id = 80, LanguageId = 1, ResumeId = 49 },
                        new { Id = 81, LanguageId = 2, ResumeId = 50 },
                        new { Id = 82, LanguageId = 1, ResumeId = 50 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_ROLES_NAME");

                    b.ToTable("ROLES");

                    b.HasData(
                        new { Id = 1, Name = "admin" },
                        new { Id = 2, Name = "user" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.School", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_SCHOOLS_NAME");

                    b.ToTable("SCHOOLS");

                    b.HasData(
                        new { Id = 1, Name = "NU LP" },
                        new { Id = 2, Name = "LNU" },
                        new { Id = 3, Name = "KPI" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime>("BirthData")
                        .HasColumnName("BIRTH_DATA")
                        .HasColumnType("date");

                    b.Property<int>("CityId")
                        .HasColumnName("CITY_ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FIRST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LAST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<byte[]>("PhotoData")
                        .HasColumnName("PHOTO_DATA");

                    b.Property<string>("PhotoMimeType")
                        .HasColumnName("PHOTO_MIME_TYPE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.Property<string>("Sex")
                        .HasColumnName("SEX")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_USERS_EMAIL");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_USERS_PHONE")
                        .HasFilter("[PHONE] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("USERS");

                    b.HasData(
                        new { Id = 41, Address = "Dante Inlet", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 3, Email = "Kaley62@yahoo.com", FirstName = "Rosalinda", LastName = "Bruen", Password = "EtQjS1Maif", Phone = "073 8386", RoleId = 2, Sex = "f" },
                        new { Id = 42, Address = "Haley Points", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 2, Email = "Norberto.Mertz@gmail.com", FirstName = "Freeda", LastName = "Bogan", Password = "7YE28eaQcN", Phone = "073 1096", RoleId = 1, Sex = "f" },
                        new { Id = 43, Address = "William Greens", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 2, Email = "Lawson_Erdman@yahoo.com", FirstName = "Hermann", LastName = "Reynolds", Password = "73yayIcVNR", Phone = "073 9238", RoleId = 2, Sex = "f" },
                        new { Id = 44, Address = "Kraig Street", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 2, Email = "Orlo74@yahoo.com", FirstName = "Griffin", LastName = "Cassin", Password = "1kfNPhXRxA", Phone = "073 4640", RoleId = 1, Sex = "m" },
                        new { Id = 45, Address = "Jarrell Shore", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 2, Email = "Tyson.Batz@hotmail.com", FirstName = "Jay", LastName = "Rippin", Password = "v7buwXq4J1", Phone = "073 8424", RoleId = 1, Sex = "f" },
                        new { Id = 46, Address = "Kulas Crossroad", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 1, Email = "Sandy15@gmail.com", FirstName = "Justyn", LastName = "Watsica", Password = "5lkrJY6JgQ", Phone = "073 4970", RoleId = 1, Sex = "f" },
                        new { Id = 47, Address = "Dare Center", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 2, Email = "Charity_Strosin@hotmail.com", FirstName = "Marlin", LastName = "Howell", Password = "afYCGFd2pt", Phone = "073 9436", RoleId = 2, Sex = "m" },
                        new { Id = 48, Address = "Halvorson Spring", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 1, Email = "Guillermo_Krajcik80@yahoo.com", FirstName = "Jamarcus", LastName = "Rippin", Password = "9mutScNDVl", Phone = "073 5187", RoleId = 2, Sex = "m" },
                        new { Id = 49, Address = "Wilderman Ports", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 2, Email = "Sylvester_Torphy@yahoo.com", FirstName = "Augustus", LastName = "Cummerata", Password = "6VKSPwhbAy", Phone = "073 4454", RoleId = 1, Sex = "f" },
                        new { Id = 50, Address = "Zora Corners", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 2, Email = "Marquise_Moore@gmail.com", FirstName = "Alejandrin", LastName = "Hermann", Password = "e8GIs9FJYd", Phone = "073 5732", RoleId = 2, Sex = "m" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BePlus")
                        .HasColumnName("BE_PLUS")
                        .IsUnicode(false);

                    b.Property<int>("CityId")
                        .HasColumnName("CITY_ID");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("DESCRIPTION")
                        .IsUnicode(false);

                    b.Property<string>("FullPartTime")
                        .HasColumnName("FULL_PART_TIME")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<bool?>("IsChecked")
                        .HasColumnName("IS_CHECKED");

                    b.Property<DateTime?>("ModDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Offering")
                        .IsRequired()
                        .HasColumnName("OFFERING")
                        .IsUnicode(false);

                    b.Property<int>("RecruiterId")
                        .HasColumnName("RECRUITER_ID");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnName("REQUIREMENTS")
                        .IsUnicode(false);

                    b.Property<decimal?>("Salary")
                        .HasColumnName("SALARY")
                        .HasColumnType("money");

                    b.Property<int>("WorkAreaId")
                        .HasColumnName("WORK_AREA_ID");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("RecruiterId");

                    b.HasIndex("WorkAreaId");

                    b.ToTable("VACANCIES");

                    b.HasData(
                        new { Id = 31, BePlus = "Enim beatae voluptatem dolor velit est.", CityId = 1, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Chief", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Legacy Security Planner", Offering = "Morton Hagenes", RecruiterId = 25, Requirements = "Eos qui esse itaque.", Salary = 1000m, WorkAreaId = 3 },
                        new { Id = 32, BePlus = "Nihil mollitia porro aut dolores alias et.", CityId = 2, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Customer", FullPartTime = "Full-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Senior Quality Representative", Offering = "Phoebe Haag", RecruiterId = 26, Requirements = "Fugit error est veniam.", Salary = 1000m, WorkAreaId = 2 },
                        new { Id = 33, BePlus = "Dolorem cumque sed voluptatum est unde possimus illum aut.", CityId = 2, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Legacy", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Central Applications Technician", Offering = "Rafael Dickens", RecruiterId = 30, Requirements = "Dolor enim rerum facere dolorem sint numquam.", Salary = 1000m, WorkAreaId = 2 },
                        new { Id = 34, BePlus = "Vel cum ea praesentium molestiae quae dolorem repellat.", CityId = 3, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Lead", FullPartTime = "Part-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Principal Directives Director", Offering = "Clyde Schinner", RecruiterId = 28, Requirements = "Quidem saepe accusamus impedit dolorum asperiores expedita tempore est.", Salary = 1000m, WorkAreaId = 1 },
                        new { Id = 35, BePlus = "Dolor saepe dicta ipsa consequatur numquam voluptatem enim quaerat.", CityId = 2, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Internal", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Regional Paradigm Executive", Offering = "Rigoberto Kunde", RecruiterId = 22, Requirements = "Rerum voluptas quam consectetur ad.", Salary = 1000m, WorkAreaId = 1 },
                        new { Id = 36, BePlus = "Et consectetur quae aut et dolorum at molestias.", CityId = 3, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Corporate", FullPartTime = "Full-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Senior Usability Manager", Offering = "Jazmyne Bogan", RecruiterId = 21, Requirements = "Cupiditate et nisi similique repudiandae nulla voluptates et reprehenderit.", Salary = 1000m, WorkAreaId = 3 },
                        new { Id = 37, BePlus = "Magni delectus nemo aspernatur debitis est consectetur.", CityId = 3, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "National", FullPartTime = "Part-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Future Markets Producer", Offering = "Casper Lubowitz", RecruiterId = 25, Requirements = "Quae est est suscipit.", Salary = 1000m, WorkAreaId = 2 },
                        new { Id = 38, BePlus = "Dolor at debitis omnis aspernatur quos rerum sed maxime hic.", CityId = 1, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Principal", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "National Identity Orchestrator", Offering = "Dolores Bauch", RecruiterId = 23, Requirements = "Dolores nemo distinctio sunt laborum cupiditate velit ipsa.", Salary = 1000m, WorkAreaId = 3 },
                        new { Id = 39, BePlus = "Aliquid repellendus ut.", CityId = 3, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Dynamic", FullPartTime = "Full-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Forward Interactions Facilitator", Offering = "Dedric Stehr", RecruiterId = 27, Requirements = "Et quidem libero.", Salary = 1000m, WorkAreaId = 1 },
                        new { Id = 40, BePlus = "Nihil ratione in autem aut magni eius.", CityId = 2, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Internal", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Customer Markets Director", Offering = "Savanah Hagenes", RecruiterId = 25, Requirements = "Et aliquam placeat voluptatem praesentium ipsam.", Salary = 1000m, WorkAreaId = 2 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.WorkArea", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<byte[]>("PhotoData")
                        .HasColumnName("PHOTO_DATA");

                    b.Property<string>("PhotoMimetype")
                        .HasColumnName("PHOTO_MIMETYPE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_WORK_AREAS_NAME");

                    b.ToTable("WORK_AREAS");

                    b.HasData(
                        new { Id = 1, Name = "IT" },
                        new { Id = 2, Name = "Sales" },
                        new { Id = 3, Name = "Medicine" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Company", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Companies")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_COMPANIES_TO_ROLES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.EducationPeriod", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Faculty", "Faculty")
                        .WithMany("EducationPeriods")
                        .HasForeignKey("FacultyId")
                        .HasConstraintName("FK_PK_EDUCATION_PERIODS_TO_FACULTIES");

                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("EducationPeriods")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_PK_EDUCATION_PERIODS_TO_RESUMES");

                    b.HasOne("JobList.DataAccess.Entities.School", "School")
                        .WithMany("EducationPeriods")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_PK_EDUCATION_PERIODS_TO_SCHOOLS");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Experience", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("Experiences")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_EXPERIENCES_TO_RESUMES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.FavoriteVacancy", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.User", "User")
                        .WithMany("FavoriteVacancies")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_FAVORITE_VACANCIES_TO_USERS");

                    b.HasOne("JobList.DataAccess.Entities.Vacancy", "Vacancy")
                        .WithMany("FavoriteVacancies")
                        .HasForeignKey("VacancyId")
                        .HasConstraintName("FK_FAVORITE_VACANCIES_TO_VACANCIES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Recruiter", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Company", "Company")
                        .WithMany("Recruiters")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_RECRUITERS_TO_COMPANIES");

                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Recruiters")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RECRUITERS_TO_ROLES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Resume", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.User", "User")
                        .WithOne("Resumes")
                        .HasForeignKey("JobList.DataAccess.Entities.Resume", "Id")
                        .HasConstraintName("FK_RESUMES_TO_USERS");

                    b.HasOne("JobList.DataAccess.Entities.WorkArea", "WorkArea")
                        .WithMany("Resumes")
                        .HasForeignKey("WorkAreaId")
                        .HasConstraintName("FK_RESUMES_TO_WORKAREA");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.ResumeLanguage", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Language", "Language")
                        .WithMany("ResumeLanguages")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_PK_RESUME_LANGUAGES_TO_LANGUAGES");

                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("ResumeLanguages")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_PK_RESUME_LANGUAGES_TO_RESUMES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.User", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_USERS_TO_CITIES");

                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_USERS_TO_ROLES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Vacancy", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.City", "City")
                        .WithMany("Vacancies")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_VACANCIES_TO_CITIES");

                    b.HasOne("JobList.DataAccess.Entities.Recruiter", "Recruiter")
                        .WithMany("Vacancies")
                        .HasForeignKey("RecruiterId")
                        .HasConstraintName("FK_VACANCIES_TO_RECRUITERS");

                    b.HasOne("JobList.DataAccess.Entities.WorkArea", "WorkArea")
                        .WithMany("Vacancies")
                        .HasForeignKey("WorkAreaId")
                        .HasConstraintName("FK_VACANCIES_TO_WORK_AREAS");
                });
#pragma warning restore 612, 618
        }
    }
}
