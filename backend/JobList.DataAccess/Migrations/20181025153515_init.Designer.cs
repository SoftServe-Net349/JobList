// <auto-generated />
using System;
using JobList.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JobList.DataAccess.Migrations
{
    [DbContext(typeof(JobListDbContext))]
    [Migration("20181025153515_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JobList.DataAccess.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_CITIES_NAME");

                    b.ToTable("CITIES");

                    b.HasData(
                        new { Id = 1, Name = "New York" },
                        new { Id = 2, Name = "Jersey" },
                        new { Id = 3, Name = "Atlanta" },
                        new { Id = 4, Name = "Los Angeles" },
                        new { Id = 5, Name = "Boston" },
                        new { Id = 6, Name = "Philadelphia" },
                        new { Id = 7, Name = "Seattle" },
                        new { Id = 8, Name = "Washington DC" },
                        new { Id = 9, Name = "Las Vegas" },
                        new { Id = 10, Name = "Phoneix" },
                        new { Id = 11, Name = "San Francisco" },
                        new { Id = 12, Name = "Chicago" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("ADDRESS")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("BossName")
                        .IsRequired()
                        .HasColumnName("BOSS_NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(254)
                        .IsUnicode(false);

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnName("FULL_DESCRIPTION")
                        .IsUnicode(false);

                    b.Property<byte[]>("LogoData")
                        .HasColumnName("LOGO_DATA");

                    b.Property<string>("LogoMimetype")
                        .HasColumnName("LOGO_MIMETYPE")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("RefreshToken")
                        .HasColumnName("REFRESH_TOKEN")
                        .HasMaxLength(70)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnName("SHORT_DESCRIPTION")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Site")
                        .HasColumnName("SITE")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_EMAIL");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_NAME");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_PHONE")
                        .HasFilter("[PHONE] IS NOT NULL");

                    b.HasIndex("RefreshToken")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_REFRESH_TOKEN")
                        .HasFilter("[REFRESH_TOKEN] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("COMPANIES");

                    b.HasData(
                        new { Id = 1, Address = "87564 Destini Pines, West Oda, Namibia", BossName = "Frederique", Email = "Cordell16@hotmail.com", FullDescription = "In vero accusantium.", Name = "Company 88", Password = "BqSyzllqdI", Phone = "(744) 415 624", RoleId = 3, ShortDescription = "illo", Site = "https://leslie.net" },
                        new { Id = 2, Address = "9437 Haag Shoals, Robertsshire, Italy", BossName = "Vada", Email = "Rae34@hotmail.com", FullDescription = "Porro necessitatibus recusandae.", Name = "Company 480", Password = "dOosNoACyc", Phone = "(497) 656 6488", RoleId = 3, ShortDescription = "et", Site = "https://ismael.info" },
                        new { Id = 3, Address = "8288 Parisian Views, New Rodrigo, Namibia", BossName = "Susana", Email = "Floyd.Turner@hotmail.com", FullDescription = "Aut perspiciatis qui.", Name = "Company 185", Password = "TzLnwIlPes", Phone = "(455) 590 9597", RoleId = 3, ShortDescription = "quasi", Site = "http://dustin.name" },
                        new { Id = 4, Address = "2528 Lehner Hill, Dimitriside, Cuba", BossName = "Alice", Email = "Vita.Abbott87@gmail.com", FullDescription = "Iste enim et.", Name = "Company 496", Password = "VBssphPpR4", Phone = "(645) 683 1266", RoleId = 3, ShortDescription = "alias", Site = "http://selena.net" },
                        new { Id = 5, Address = "14896 Kozey Land, Port Collin, Kenya", BossName = "Kattie", Email = "Sheridan8@yahoo.com", FullDescription = "Ab eos ut.", Name = "Company 695", Password = "1sOw6gBtVc", Phone = "(680) 501 9168", RoleId = 3, ShortDescription = "sunt", Site = "https://eleazar.com" },
                        new { Id = 6, Address = "12513 Lottie Drive, Cleveborough, Albania", BossName = "Stephen", Email = "Fabiola30@gmail.com", FullDescription = "Quia aut vero.", Name = "Company 536", Password = "hLhGgFPrg6", Phone = "(252) 2 4496", RoleId = 3, ShortDescription = "sit", Site = "http://nikita.info" },
                        new { Id = 7, Address = "8661 Rozella Corners, Ryannville, Latvia", BossName = "Luigi", Email = "Jennie.McGlynn76@gmail.com", FullDescription = "Eligendi ut cumque.", Name = "Company 218", Password = "3sBVMA4rfO", Phone = "(465) 674 5884", RoleId = 3, ShortDescription = "veniam", Site = "https://kristofer.name" },
                        new { Id = 8, Address = "15845 O'Keefe Corners, New Ozella, French Polynesia", BossName = "Sincere", Email = "Fermin_Koepp58@gmail.com", FullDescription = "Consequatur et omnis.", Name = "Company 365", Password = "L9HOHG2Sv1", Phone = "(569) 270 7863", RoleId = 3, ShortDescription = "perspiciatis", Site = "http://harold.name" },
                        new { Id = 9, Address = "926 Mitchel Locks, South Friedrich, Bosnia and Herzegovina", BossName = "Peyton", Email = "Mozell.Swaniawski@hotmail.com", FullDescription = "Maiores odit itaque.", Name = "Company 957", Password = "cMRuERiJli", Phone = "(67) 255 4503", RoleId = 3, ShortDescription = "corrupti", Site = "http://rosie.info" },
                        new { Id = 10, Address = "717 Lakin Trace, Lake Jeffery, Heard Island and McDonald Islands", BossName = "Tyrique", Email = "Gudrun18@gmail.com", FullDescription = "Libero sequi et.", Name = "Company 969", Password = "Qstedti1UY", Phone = "(843) 11 9737", RoleId = 3, ShortDescription = "perspiciatis", Site = "http://crystal.com" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.EducationPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FacultyId")
                        .HasColumnName("FACULTY_ID");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnName("FINISH_DATE")
                        .HasColumnType("date");

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.Property<int>("SchoolId")
                        .HasColumnName("SCHOOL_ID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("START_DATE")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("ResumeId");

                    b.HasIndex("SchoolId");

                    b.ToTable("EDUCATION_PERIODS");

                    b.HasData(
                        new { Id = 55, FacultyId = 2, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 33, SchoolId = 3, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 56, FacultyId = 1, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 33, SchoolId = 5, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 57, FacultyId = 1, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 33, SchoolId = 5, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 58, FacultyId = 10, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 33, SchoolId = 6, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 59, FacultyId = 4, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 33, SchoolId = 5, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 60, FacultyId = 1, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 33, SchoolId = 4, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 61, FacultyId = 3, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 33, SchoolId = 7, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 62, FacultyId = 7, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 33, SchoolId = 8, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 63, FacultyId = 9, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 33, SchoolId = 1, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 64, FacultyId = 9, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 33, SchoolId = 4, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 111, FacultyId = 4, FinishDate = new DateTime(2005, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 46, SchoolId = 8, StartDate = new DateTime(2002, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 112, FacultyId = 2, FinishDate = new DateTime(2007, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 46, SchoolId = 5, StartDate = new DateTime(2004, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("BIRTH_DATE")
                        .HasColumnType("date");

                    b.Property<int>("CityId")
                        .HasColumnName("CITY_ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(254)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FIRST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LAST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<byte[]>("PhotoData")
                        .HasColumnName("PHOTO_DATA");

                    b.Property<string>("PhotoMimeType")
                        .HasColumnName("PHOTO_MIME_TYPE")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("RefreshToken")
                        .HasColumnName("REFRESH_TOKEN")
                        .HasMaxLength(70)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.Property<string>("Sex")
                        .HasColumnName("SEX")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_EMPLOYEES_EMAIL");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_EMPLOYEES_PHONE")
                        .HasFilter("[PHONE] IS NOT NULL");

                    b.HasIndex("RefreshToken")
                        .IsUnique()
                        .HasName("UQ_EMPLOYEES_REFRESH_TOKEN")
                        .HasFilter("[REFRESH_TOKEN] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("EMPLOYEES");

                    b.HasData(
                        new { Id = 31, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 5, Email = "Eloisa_Armstrong@hotmail.com", FirstName = "Osborne", LastName = "Brakus", Password = "McdDRgZA7C", Phone = "(521) 648 438", RoleId = 2, Sex = "f" },
                        new { Id = 32, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 12, Email = "Athena40@gmail.com", FirstName = "Chasity", LastName = "Romaguera", Password = "nk392KsdY2", Phone = "(145) 872 9540", RoleId = 2, Sex = "m" },
                        new { Id = 33, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 6, Email = "Carolyn.Conroy31@hotmail.com", FirstName = "Catharine", LastName = "Yost", Password = "LtLczGpvNh", Phone = "(168) 397 6706", RoleId = 2, Sex = "f" },
                        new { Id = 34, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 11, Email = "Myrtis12@hotmail.com", FirstName = "Dominique", LastName = "Nitzsche", Password = "F8Y6lghJ5f", Phone = "(394) 357 8433", RoleId = 2, Sex = "f" },
                        new { Id = 35, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 4, Email = "Jadon37@gmail.com", FirstName = "Alice", LastName = "Murray", Password = "dBti0TOPht", Phone = "(961) 627 9041", RoleId = 2, Sex = "f" },
                        new { Id = 36, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 7, Email = "Giuseppe_Considine@yahoo.com", FirstName = "Demond", LastName = "Morissette", Password = "DGjJAVU5MG", Phone = "(536) 179 7813", RoleId = 2, Sex = "f" },
                        new { Id = 37, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 1, Email = "Jaqueline_Rolfson@gmail.com", FirstName = "Tremayne", LastName = "Rice", Password = "kR7tjbTdFf", Phone = "(106) 254 2935", RoleId = 2, Sex = "m" },
                        new { Id = 38, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 11, Email = "Roxane.Leffler@gmail.com", FirstName = "Letitia", LastName = "Berge", Password = "yEbEjmoD8U", Phone = "(766) 241 1973", RoleId = 2, Sex = "f" },
                        new { Id = 39, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 3, Email = "Ada13@yahoo.com", FirstName = "Eryn", LastName = "Klein", Password = "0DZazXLRcP", Phone = "(135) 290 8252", RoleId = 2, Sex = "f" },
                        new { Id = 40, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 8, Email = "Octavia_Yost@hotmail.com", FirstName = "Britney", LastName = "Jakubowski", Password = "lVraJJh_TG", Phone = "(817) 120 4817", RoleId = 2, Sex = "f" },
                        new { Id = 46, BirthDate = new DateTime(1995, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 8, Email = "andr@gmail.com", FirstName = "Andrew", LastName = "Felton", Password = "qwerty", Phone = "0502758765", RoleId = 2, Sex = "M" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnName("COMPANY_NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnName("FINISH_DATE")
                        .HasColumnType("date");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnName("POSITION")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("START_DATE")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("EXPERIENCES");

                    b.HasData(
                        new { Id = 44, CompanyName = "Austin Ankunding", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Maiores iste atque repellat corrupti illo possimus.", ResumeId = 33, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 45, CompanyName = "Jensen King", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Et totam blanditiis nobis et.", ResumeId = 33, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 46, CompanyName = "Katlynn Hirthe", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Modi qui aut voluptatem natus saepe repellat.", ResumeId = 33, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 47, CompanyName = "Tessie DuBuque", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Unde necessitatibus at exercitationem saepe.", ResumeId = 33, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 48, CompanyName = "Damian Reynolds", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Nam magni officia dolorem non deleniti sit.", ResumeId = 33, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 49, CompanyName = "Marjory Dibbert", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Amet quisquam qui ut sed dignissimos.", ResumeId = 33, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 50, CompanyName = "Ian Metz", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Earum repellendus quis.", ResumeId = 33, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 51, CompanyName = "Rachelle Volkman", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Nesciunt autem voluptas illum qui eos tenetur.", ResumeId = 33, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 52, CompanyName = "Ryley Grant", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Vitae error laborum magni minus facere sed eum.", ResumeId = 33, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 53, CompanyName = "Jimmy Rosenbaum", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Aut repellendus dolores blanditiis quisquam ut.", ResumeId = 33, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 65, CompanyName = "Triomed", FinishDate = new DateTime(2018, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Surgeon", ResumeId = 46, StartDate = new DateTime(2008, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_FACULTIES_NAME");

                    b.ToTable("FACULTIES");

                    b.HasData(
                        new { Id = 1, Name = "Computer Science" },
                        new { Id = 2, Name = "Software Engineering" },
                        new { Id = 3, Name = "Applied Mathematics" },
                        new { Id = 4, Name = "Foreign Languages" },
                        new { Id = 5, Name = "International Relationships" },
                        new { Id = 6, Name = "Economics" },
                        new { Id = 7, Name = "Design" },
                        new { Id = 8, Name = "Faculty of Law" },
                        new { Id = 9, Name = "Marketing" },
                        new { Id = 10, Name = "Journalism" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.FavoriteVacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnName("EMPLOYEE_ID");

                    b.Property<int>("VacancyId")
                        .HasColumnName("VACANCY_ID");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("VacancyId");

                    b.ToTable("FAVORITE_VACANCIES");

                    b.HasData(
                        new { Id = 80, EmployeeId = 32, VacancyId = 26 },
                        new { Id = 81, EmployeeId = 34, VacancyId = 25 },
                        new { Id = 82, EmployeeId = 35, VacancyId = 21 },
                        new { Id = 83, EmployeeId = 34, VacancyId = 29 },
                        new { Id = 84, EmployeeId = 31, VacancyId = 21 },
                        new { Id = 85, EmployeeId = 37, VacancyId = 27 },
                        new { Id = 86, EmployeeId = 34, VacancyId = 24 },
                        new { Id = 87, EmployeeId = 39, VacancyId = 25 },
                        new { Id = 88, EmployeeId = 33, VacancyId = 30 },
                        new { Id = 89, EmployeeId = 33, VacancyId = 24 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Invitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnName("EMPLOYEE_ID");

                    b.Property<int>("VacancyId")
                        .HasColumnName("VACANCY_ID");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("VacancyId");

                    b.ToTable("INVITATIONS");

                    b.HasData(
                        new { Id = 90, EmployeeId = 38, VacancyId = 26 },
                        new { Id = 91, EmployeeId = 36, VacancyId = 25 },
                        new { Id = 92, EmployeeId = 36, VacancyId = 21 },
                        new { Id = 93, EmployeeId = 39, VacancyId = 29 },
                        new { Id = 94, EmployeeId = 39, VacancyId = 30 },
                        new { Id = 95, EmployeeId = 37, VacancyId = 30 },
                        new { Id = 96, EmployeeId = 46, VacancyId = 30 },
                        new { Id = 97, EmployeeId = 32, VacancyId = 24 },
                        new { Id = 98, EmployeeId = 35, VacancyId = 24 },
                        new { Id = 99, EmployeeId = 39, VacancyId = 28 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_LANGUAGES_NAME");

                    b.ToTable("LANGUAGES");

                    b.HasData(
                        new { Id = 1, Name = "English" },
                        new { Id = 2, Name = "Ukrainian" },
                        new { Id = 3, Name = "Russian" },
                        new { Id = 4, Name = "Polish" },
                        new { Id = 5, Name = "Greek" },
                        new { Id = 6, Name = "Japanese" },
                        new { Id = 7, Name = "Spanish" },
                        new { Id = 8, Name = "Chinese" },
                        new { Id = 9, Name = "German" },
                        new { Id = 10, Name = "Roman" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Recruiter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnName("COMPANY_ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(254)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FIRST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LAST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<byte[]>("PhotoData")
                        .HasColumnName("PHOTO_DATA");

                    b.Property<string>("PhotoMimetype")
                        .HasColumnName("PHOTO_MIMETYPE")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("RefreshToken")
                        .HasColumnName("REFRESH_TOKEN")
                        .HasMaxLength(70)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_RECRUITERS_EMAIL");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_RECRUITERS_PHONE")
                        .HasFilter("[PHONE] IS NOT NULL");

                    b.HasIndex("RefreshToken")
                        .IsUnique()
                        .HasName("UQ_RECRUITERS_REFRESH_TOKEN")
                        .HasFilter("[REFRESH_TOKEN] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("RECRUITERS");

                    b.HasData(
                        new { Id = 11, CompanyId = 7, Email = "Kirstin_Bernhard99@gmail.com", FirstName = "Giovanni", LastName = "Legros", Password = "XKHzfPI8pQ", Phone = "(599) 209 2277", RoleId = 4 },
                        new { Id = 12, CompanyId = 7, Email = "Marshall.Koch30@hotmail.com", FirstName = "Ole", LastName = "Kulas", Password = "9ZxTQtmYZK", Phone = "(71) 832 4092", RoleId = 4 },
                        new { Id = 13, CompanyId = 10, Email = "Gayle80@hotmail.com", FirstName = "Damaris", LastName = "Weimann", Password = "VuxW9hJAVk", Phone = "(865) 885 1841", RoleId = 4 },
                        new { Id = 14, CompanyId = 6, Email = "Leone.Koss50@yahoo.com", FirstName = "Gaetano", LastName = "Barton", Password = "kSylAXSOo_", Phone = "(381) 85 1508", RoleId = 4 },
                        new { Id = 15, CompanyId = 1, Email = "Garnett_Flatley@yahoo.com", FirstName = "Kyra", LastName = "Ritchie", Password = "KV9GF4Ns70", Phone = "(313) 394 2486", RoleId = 4 },
                        new { Id = 16, CompanyId = 2, Email = "Isabel70@gmail.com", FirstName = "Ora", LastName = "Bayer", Password = "l3914xVXOK", Phone = "(880) 197 7568", RoleId = 4 },
                        new { Id = 17, CompanyId = 6, Email = "Zion_Kuhic@yahoo.com", FirstName = "Helena", LastName = "Boyer", Password = "6mcycFwtz_", Phone = "(263) 925 5077", RoleId = 4 },
                        new { Id = 18, CompanyId = 7, Email = "Bonnie_Wehner@hotmail.com", FirstName = "Haven", LastName = "Gottlieb", Password = "b_9RyHjPL8", Phone = "(590) 702 7765", RoleId = 4 },
                        new { Id = 19, CompanyId = 5, Email = "Blake_Jacobs35@hotmail.com", FirstName = "Eugenia", LastName = "Strosin", Password = "08OEz2p71k", Phone = "(614) 581 5330", RoleId = 4 },
                        new { Id = 20, CompanyId = 8, Email = "Agnes_Corkery@gmail.com", FirstName = "Arianna", LastName = "Feeney", Password = "Fd0W_7LgTy", Phone = "(522) 972 5075", RoleId = 4 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Resume", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Courses")
                        .HasColumnName("COURSES")
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Facebook")
                        .HasColumnName("FACEBOOK")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FamilyState")
                        .HasColumnName("FAMILY_STATE")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Github")
                        .HasColumnName("GITHUB")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Instagram")
                        .HasColumnName("INSTAGRAM")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnName("INTRODUCTION")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<string>("KeySkills")
                        .IsRequired()
                        .HasColumnName("KEY_SKILLS")
                        .IsUnicode(false);

                    b.Property<string>("Linkedin")
                        .HasColumnName("LINKEDIN")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Position")
                        .HasColumnName("POSITION")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Skype")
                        .HasColumnName("SKYPE")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("SoftSkills")
                        .IsRequired()
                        .HasColumnName("SOFT_SKILLS")
                        .IsUnicode(false);

                    b.Property<int>("WorkAreaId")
                        .HasColumnName("WORK_AREA_ID");

                    b.HasKey("Id");

                    b.HasIndex("Facebook")
                        .IsUnique()
                        .HasName("UQ_RESUMES_FACEBOOK")
                        .HasFilter("[FACEBOOK] IS NOT NULL");

                    b.HasIndex("Instagram")
                        .IsUnique()
                        .HasName("UQ_RESUMES_INSTAGRAM")
                        .HasFilter("[INSTAGRAM] IS NOT NULL");

                    b.HasIndex("Linkedin")
                        .IsUnique()
                        .HasName("UQ_RESUMES_LINKEDIN")
                        .HasFilter("[LINKEDIN] IS NOT NULL");

                    b.HasIndex("Skype")
                        .IsUnique()
                        .HasName("UQ_RESUMES_SKYPE")
                        .HasFilter("[SKYPE] IS NOT NULL");

                    b.HasIndex("WorkAreaId");

                    b.ToTable("RESUMES");

                    b.HasData(
                        new { Id = 33, Courses = "Earum labore amet quos alias nihil necessitatibus id dolores sit.", CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Facebook = "https://shany.org", FamilyState = "Ipsa.", Github = "http://ara.biz", Instagram = "https://neil.name", Introduction = "Earum harum.", KeySkills = "Quo dolor.", Linkedin = "http://gregorio.info", ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Occaecati.", Skype = "https://koby.info", SoftSkills = "Ab et.", WorkAreaId = 4 },
                        new { Id = 46, Courses = "Certification training", CreateDate = new DateTime(2018, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), Facebook = "www.facebook.com", FamilyState = "not married", Introduction = "Hello!", KeySkills = "hardworking, persuasive", SoftSkills = "plastic surgery", WorkAreaId = 3 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.ResumeLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId")
                        .HasColumnName("LANGUAGE_ID");

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ResumeId");

                    b.ToTable("RESUME_LANGUAGES");

                    b.HasData(
                        new { Id = 67, LanguageId = 4, ResumeId = 33 },
                        new { Id = 68, LanguageId = 1, ResumeId = 33 },
                        new { Id = 69, LanguageId = 10, ResumeId = 33 },
                        new { Id = 70, LanguageId = 8, ResumeId = 33 },
                        new { Id = 71, LanguageId = 8, ResumeId = 33 },
                        new { Id = 72, LanguageId = 7, ResumeId = 33 },
                        new { Id = 73, LanguageId = 6, ResumeId = 33 },
                        new { Id = 74, LanguageId = 7, ResumeId = 33 },
                        new { Id = 75, LanguageId = 5, ResumeId = 33 },
                        new { Id = 76, LanguageId = 6, ResumeId = 33 },
                        new { Id = 111, LanguageId = 10, ResumeId = 46 },
                        new { Id = 112, LanguageId = 5, ResumeId = 46 },
                        new { Id = 113, LanguageId = 7, ResumeId = 46 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_ROLES_NAME");

                    b.ToTable("ROLES");

                    b.HasData(
                        new { Id = 1, Name = "admin" },
                        new { Id = 2, Name = "employee" },
                        new { Id = 3, Name = "company" },
                        new { Id = 4, Name = "recruiter" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.School", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_SCHOOLS_NAME");

                    b.ToTable("SCHOOLS");

                    b.HasData(
                        new { Id = 1, Name = "Chicago State University" },
                        new { Id = 2, Name = "Harvard University" },
                        new { Id = 3, Name = "Prinston University" },
                        new { Id = 4, Name = "Berklee College Of Arts" },
                        new { Id = 5, Name = "Stanford University" },
                        new { Id = 6, Name = "Massachusetts Institute of Technology" },
                        new { Id = 7, Name = "Columbia University" },
                        new { Id = 8, Name = "New York University" },
                        new { Id = 9, Name = "University of Arizona" },
                        new { Id = 10, Name = "Yale University" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BePlus")
                        .HasColumnName("BE_PLUS")
                        .IsUnicode(false);

                    b.Property<int>("CityId")
                        .HasColumnName("CITY_ID");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("DESCRIPTION")
                        .IsUnicode(false);

                    b.Property<string>("FullPartTime")
                        .HasColumnName("FULL_PART_TIME")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<bool?>("IsChecked")
                        .HasColumnName("IS_CHECKED");

                    b.Property<DateTime?>("ModDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Offering")
                        .IsRequired()
                        .HasColumnName("OFFERING")
                        .IsUnicode(false);

                    b.Property<int>("RecruiterId")
                        .HasColumnName("RECRUITER_ID");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnName("REQUIREMENTS")
                        .IsUnicode(false);

                    b.Property<decimal?>("Salary")
                        .HasColumnName("SALARY")
                        .HasColumnType("money");

                    b.Property<int>("WorkAreaId")
                        .HasColumnName("WORK_AREA_ID");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("RecruiterId");

                    b.HasIndex("WorkAreaId");

                    b.ToTable("VACANCIES");

                    b.HasData(
                        new { Id = 21, BePlus = "Temporibus doloribus enim est ut rem rerum consequuntur.", CityId = 10, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Senior", FullPartTime = "Part-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Dynamic Markets Developer", Offering = "Bailey Buckridge", RecruiterId = 19, Requirements = "Voluptas et laborum corporis quo sit et et quo.", Salary = 1000m, WorkAreaId = 10 },
                        new { Id = 22, BePlus = "Officiis similique dolores voluptas delectus.", CityId = 11, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Dynamic", FullPartTime = "Full-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "District Intranet Architect", Offering = "Oren Haley", RecruiterId = 12, Requirements = "Praesentium quis rerum dolorem modi est aut rerum.", Salary = 1000m, WorkAreaId = 10 },
                        new { Id = 23, BePlus = "Vitae molestiae officia.", CityId = 4, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Senior", FullPartTime = "Part-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Principal Mobility Executive", Offering = "Roma Cruickshank", RecruiterId = 14, Requirements = "Sed et possimus incidunt totam illo rem expedita nisi.", Salary = 1000m, WorkAreaId = 9 },
                        new { Id = 24, BePlus = "Qui sit vitae repellendus qui aspernatur deleniti.", CityId = 12, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Human", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Chief Data Facilitator", Offering = "Cali Turner", RecruiterId = 17, Requirements = "Non porro expedita quia velit nihil.", Salary = 1000m, WorkAreaId = 9 },
                        new { Id = 25, BePlus = "Blanditiis eveniet dolor vero assumenda sunt qui voluptatibus.", CityId = 9, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Principal", FullPartTime = "Full-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "National Quality Liaison", Offering = "Abagail Auer", RecruiterId = 15, Requirements = "Vel sunt laborum voluptatem saepe suscipit ipsa cupiditate facere.", Salary = 1000m, WorkAreaId = 6 },
                        new { Id = 26, BePlus = "Deleniti atque earum quisquam voluptas voluptas.", CityId = 4, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Regional", FullPartTime = "Full-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Product Applications Assistant", Offering = "Eleanora Heathcote", RecruiterId = 20, Requirements = "Quia eius sint suscipit vel a iste quia placeat maxime.", Salary = 1000m, WorkAreaId = 8 },
                        new { Id = 27, BePlus = "Sed error consequatur ut non delectus.", CityId = 9, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "District", FullPartTime = "Full-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Human Directives Planner", Offering = "Alfredo Spencer", RecruiterId = 19, Requirements = "Natus eligendi commodi.", Salary = 1000m, WorkAreaId = 12 },
                        new { Id = 28, BePlus = "Voluptatibus odio rerum veritatis ea nesciunt qui.", CityId = 10, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "International", FullPartTime = "Part-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Dynamic Operations Designer", Offering = "Mathew Denesik", RecruiterId = 15, Requirements = "Fugiat commodi possimus eius facilis est itaque assumenda aut optio.", Salary = 1000m, WorkAreaId = 1 },
                        new { Id = 29, BePlus = "Nostrum illo et quo exercitationem.", CityId = 4, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Regional", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Internal Marketing Engineer", Offering = "Brett Feil", RecruiterId = 14, Requirements = "Et voluptas cumque non tempore vitae sed saepe debitis et.", Salary = 1000m, WorkAreaId = 1 },
                        new { Id = 30, BePlus = "Iste vero molestias veniam delectus aut aut ea ratione.", CityId = 12, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Central", FullPartTime = "Part-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Central Mobility Director", Offering = "Stan Kling", RecruiterId = 19, Requirements = "Eos quibusdam cupiditate qui autem consectetur nisi.", Salary = 1000m, WorkAreaId = 4 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.WorkArea", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_WORK_AREAS_NAME");

                    b.ToTable("WORK_AREAS");

                    b.HasData(
                        new { Id = 1, Name = "IT" },
                        new { Id = 2, Name = "Sales" },
                        new { Id = 3, Name = "Medicine" },
                        new { Id = 4, Name = "Marketing and Advertising" },
                        new { Id = 5, Name = "Law and Politics" },
                        new { Id = 6, Name = "Science" },
                        new { Id = 7, Name = "Tourism" },
                        new { Id = 8, Name = "Arts" },
                        new { Id = 9, Name = "Insurance" },
                        new { Id = 10, Name = "Real Estate" },
                        new { Id = 11, Name = "Finances" },
                        new { Id = 12, Name = "Media" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Company", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Companies")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_COMPANIES_TO_ROLES")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.EducationPeriod", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Faculty", "Faculty")
                        .WithMany("EducationPeriods")
                        .HasForeignKey("FacultyId")
                        .HasConstraintName("FK_PK_EDUCATION_PERIODS_TO_FACULTIES")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("EducationPeriods")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_PK_EDUCATION_PERIODS_TO_RESUMES")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.School", "School")
                        .WithMany("EducationPeriods")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_PK_EDUCATION_PERIODS_TO_SCHOOLS")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Employee", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.City", "City")
                        .WithMany("Employees")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_EMPLOYEES_TO_CITIES")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_EMPLOYEES_TO_ROLES")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Experience", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("Experiences")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_EXPERIENCES_TO_RESUMES")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.FavoriteVacancy", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Employee", "Employee")
                        .WithMany("FavoriteVacancies")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_FAVORITE_VACANCIES_TO_EMPLOYEES")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.Vacancy", "Vacancy")
                        .WithMany("FavoriteVacancies")
                        .HasForeignKey("VacancyId")
                        .HasConstraintName("FK_FAVORITE_VACANCIES_TO_VACANCIES")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Invitation", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Employee", "Employee")
                        .WithMany("Invitations")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_INVITATIONS_TO_EMPLOYEES")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.Vacancy", "Vacancy")
                        .WithMany("Invitations")
                        .HasForeignKey("VacancyId")
                        .HasConstraintName("FK_INVITATIONS_TO_VACANCIES")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Recruiter", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Company", "Company")
                        .WithMany("Recruiters")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_RECRUITERS_TO_COMPANIES")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Recruiters")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RECRUITERS_TO_ROLES")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Resume", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Employee", "Employee")
                        .WithOne("Resumes")
                        .HasForeignKey("JobList.DataAccess.Entities.Resume", "Id")
                        .HasConstraintName("FK_RESUMES_TO_EMPLOYEES")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.WorkArea", "WorkArea")
                        .WithMany("Resumes")
                        .HasForeignKey("WorkAreaId")
                        .HasConstraintName("FK_RESUMES_TO_WORKAREA")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.ResumeLanguage", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Language", "Language")
                        .WithMany("ResumeLanguages")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_PK_RESUME_LANGUAGES_TO_LANGUAGES")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("ResumeLanguages")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_PK_RESUME_LANGUAGES_TO_RESUMES")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Vacancy", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.City", "City")
                        .WithMany("Vacancies")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_VACANCIES_TO_CITIES")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("JobList.DataAccess.Entities.Recruiter", "Recruiter")
                        .WithMany("Vacancies")
                        .HasForeignKey("RecruiterId")
                        .HasConstraintName("FK_VACANCIES_TO_RECRUITERS")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.WorkArea", "WorkArea")
                        .WithMany("Vacancies")
                        .HasForeignKey("WorkAreaId")
                        .HasConstraintName("FK_VACANCIES_TO_WORK_AREAS")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
