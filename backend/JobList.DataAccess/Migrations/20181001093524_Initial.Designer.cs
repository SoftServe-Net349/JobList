// <auto-generated />
using System;
using JobList.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JobList.DataAccess.Migrations
{
    [DbContext(typeof(JobListDbContext))]
    [Migration("20181001093524_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JobList.DataAccess.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_CITIES_NAME");

                    b.ToTable("CITIES");

                    b.HasData(
                        new { Id = 1, Name = "Lviv" },
                        new { Id = 2, Name = "Kyiv" },
                        new { Id = 3, Name = "Dnipro" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("ADDRESS")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("BossName")
                        .IsRequired()
                        .HasColumnName("BOSS_NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnName("FULL_DESCRIPTION")
                        .IsUnicode(false);

                    b.Property<byte[]>("LogoData")
                        .HasColumnName("LOGO_DATA");

                    b.Property<string>("LogoMimetype")
                        .HasColumnName("LOGO_MIMETYPE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.Property<string>("ShortDescription")
                        .HasColumnName("SHORT_DESCRIPTION")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Site")
                        .HasColumnName("SITE")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_ADDRESS");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_EMAIL");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_NAME");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_PHONE");

                    b.HasIndex("RoleId");

                    b.ToTable("COMPANIES");

                    b.HasData(
                        new { Id = 1, Address = "25846 Dietrich Fall, Tatumfurt, Taiwan", BossName = "Albin", Email = "Randall.Goodwin8@yahoo.com", FullDescription = "Assumenda quis itaque id vel.", Name = "Company № 112", Password = "loSLhfjjSl", Phone = "073 4882", RoleId = 2, ShortDescription = "autem", Site = "http://marisa.name" },
                        new { Id = 2, Address = "11328 Lakin Lock, West Brendanberg, Cambodia", BossName = "Dannie", Email = "Pamela.Parker43@yahoo.com", FullDescription = "Velit laboriosam sequi vel delectus nisi.", Name = "Company № 987", Password = "tLnrsX6IgV", Phone = "073 17", RoleId = 1, ShortDescription = "aliquam", Site = "https://adrianna.info" },
                        new { Id = 3, Address = "100 Jeramy Run, Port Gunnershire, British Indian Ocean Territory (Chagos Archipelago)", BossName = "Ava", Email = "Freddie78@hotmail.com", FullDescription = "Illo laboriosam accusantium aut.", Name = "Company № 986", Password = "4Soypolhwj", Phone = "073 7780", RoleId = 2, ShortDescription = "hic", Site = "https://kaylah.org" },
                        new { Id = 4, Address = "441 Gaylord Fort, Libbyfort, Uganda", BossName = "Florencio", Email = "Geovany.Schneider@gmail.com", FullDescription = "Sit dolorum numquam illum.", Name = "Company № 961", Password = "39KShcoB9W", Phone = "073 1427", RoleId = 1, ShortDescription = "dolorem", Site = "https://carrie.name" },
                        new { Id = 5, Address = "9669 Ankunding Park, North Sid, Guyana", BossName = "Adrian", Email = "Tillman_Tremblay@yahoo.com", FullDescription = "Aut rerum illum voluptatem blanditiis.", Name = "Company № 692", Password = "x1tkCzNCWl", Phone = "073 7087", RoleId = 1, ShortDescription = "ut", Site = "https://vernie.com" },
                        new { Id = 6, Address = "775 Heller Crossing, New Vladimir, Afghanistan", BossName = "Abdul", Email = "Nathanial_Hackett@yahoo.com", FullDescription = "Qui error non architecto dicta omnis temporibus ut.", Name = "Company № 305", Password = "NzHfUdT4qU", Phone = "073 6018", RoleId = 2, ShortDescription = "harum", Site = "https://elta.info" },
                        new { Id = 7, Address = "509 Jerde Camp, New Grover, Puerto Rico", BossName = "Caden", Email = "Ubaldo.Rogahn@hotmail.com", FullDescription = "Consequatur quisquam ut et aperiam soluta consequuntur.", Name = "Company № 923", Password = "Dc31vva9Dz", Phone = "073 9956", RoleId = 2, ShortDescription = "aliquid", Site = "https://amelia.com" },
                        new { Id = 8, Address = "382 Max Terrace, Grimeston, Antarctica (the territory South of 60 deg S)", BossName = "Jade", Email = "Syble_Hoeger48@yahoo.com", FullDescription = "Fuga ad minima aliquid molestiae similique est vero sint.", Name = "Company № 134", Password = "ujBiZRybRw", Phone = "073 5799", RoleId = 2, ShortDescription = "facere", Site = "http://hector.name" },
                        new { Id = 9, Address = "602 Friesen Manors, Hunterberg, Saint Pierre and Miquelon", BossName = "Olaf", Email = "Teresa60@yahoo.com", FullDescription = "Enim neque possimus deserunt optio dolorum numquam consequatur sapiente amet.", Name = "Company № 794", Password = "9INhJIe6NE", Phone = "073 439", RoleId = 2, ShortDescription = "tenetur", Site = "https://verla.name" },
                        new { Id = 10, Address = "65495 Sawayn Junctions, Valentinborough, Bahrain", BossName = "Makenzie", Email = "Tiana.Kassulke82@gmail.com", FullDescription = "Molestias ipsa qui dolorum molestiae pariatur molestiae.", Name = "Company № 551", Password = "S8ZyMQ7VAk", Phone = "073 8940", RoleId = 2, ShortDescription = "molestiae", Site = "http://garrison.name" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.EducationPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FacultyId")
                        .HasColumnName("FACULTY_ID");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnName("FINISH_DATE")
                        .HasColumnType("date");

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.Property<int>("SchoolId")
                        .HasColumnName("SCHOOL_ID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("START_DATE")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("ResumeId");

                    b.HasIndex("SchoolId");

                    b.ToTable("EDUCATION_PERIODS");

                    b.HasData(
                        new { Id = 52, FacultyId = 3, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 31, SchoolId = 1, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 53, FacultyId = 2, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 31, SchoolId = 1, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 54, FacultyId = 3, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 31, SchoolId = 3, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 55, FacultyId = 1, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 31, SchoolId = 1, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 56, FacultyId = 1, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 31, SchoolId = 3, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 57, FacultyId = 2, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 31, SchoolId = 3, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 58, FacultyId = 1, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 31, SchoolId = 2, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 59, FacultyId = 1, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 31, SchoolId = 2, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 60, FacultyId = 1, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 31, SchoolId = 1, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 61, FacultyId = 2, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 31, SchoolId = 2, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnName("COMPANY_NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnName("FINISH_DATE")
                        .HasColumnType("date");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnName("POSITION")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("START_DATE")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("EXPERIENCES");

                    b.HasData(
                        new { Id = 42, CompanyName = "Vernice Rowe", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Qui quo voluptates ut quaerat.", ResumeId = 31, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 43, CompanyName = "Miles Beatty", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Blanditiis dicta sit maxime vel illo sapiente.", ResumeId = 31, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 44, CompanyName = "Art Little", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Occaecati incidunt unde unde sed.", ResumeId = 31, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 45, CompanyName = "Gardner Weber", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Eveniet velit molestiae itaque impedit magnam ipsa provident.", ResumeId = 31, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 46, CompanyName = "Ida Russel", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Natus omnis enim voluptas itaque iusto tempore voluptate voluptatem.", ResumeId = 31, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 47, CompanyName = "Rudolph Jerde", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Quo dolorem nostrum ea minus voluptas.", ResumeId = 31, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 48, CompanyName = "Otis Huel", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Quae distinctio reprehenderit eaque natus aut molestiae.", ResumeId = 31, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 49, CompanyName = "Luisa Rutherford", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "A rem ad dolor mollitia inventore cumque.", ResumeId = 31, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 50, CompanyName = "Godfrey Watsica", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Perferendis cupiditate accusamus dicta facere quia et.", ResumeId = 31, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 51, CompanyName = "Madeline Baumbach", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Eos tempora odit unde.", ResumeId = 31, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_FACULTIES_NAME");

                    b.ToTable("FACULTIES");

                    b.HasData(
                        new { Id = 1, Name = "Computer Science" },
                        new { Id = 2, Name = "Software Engineering" },
                        new { Id = 3, Name = "Applied Mathematics" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.FavoriteVacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId")
                        .HasColumnName("USER_ID");

                    b.Property<int>("VacancyId")
                        .HasColumnName("VACANCY_ID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VacancyId");

                    b.ToTable("FAVORITE_VACANCIES");

                    b.HasData(
                        new { Id = 72, UserId = 38, VacancyId = 25 },
                        new { Id = 73, UserId = 37, VacancyId = 25 },
                        new { Id = 74, UserId = 37, VacancyId = 23 },
                        new { Id = 75, UserId = 36, VacancyId = 22 },
                        new { Id = 76, UserId = 33, VacancyId = 27 },
                        new { Id = 77, UserId = 35, VacancyId = 26 },
                        new { Id = 78, UserId = 34, VacancyId = 21 },
                        new { Id = 79, UserId = 39, VacancyId = 30 },
                        new { Id = 80, UserId = 31, VacancyId = 21 },
                        new { Id = 81, UserId = 32, VacancyId = 29 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_LANGUAGES_NAME");

                    b.ToTable("LANGUAGES");

                    b.HasData(
                        new { Id = 1, Name = "English" },
                        new { Id = 2, Name = "Ukrainian" },
                        new { Id = 3, Name = "Russian" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Recruiter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnName("COMPANY_ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FIRST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LAST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte[]>("LogoData")
                        .HasColumnName("LOGO_DATA");

                    b.Property<string>("LogoMimetype")
                        .HasColumnName("LOGO_MIMETYPE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_RECRUITERS_EMAIL");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_RECRUITERS_PHONE");

                    b.HasIndex("RoleId");

                    b.ToTable("RECRUITERS");

                    b.HasData(
                        new { Id = 11, CompanyId = 1, Email = "Oceane_Williamson@hotmail.com", FirstName = "Joyce", LastName = "Sporer", Password = "IXT5wypGML", Phone = "073 8126", RoleId = 1 },
                        new { Id = 12, CompanyId = 2, Email = "Jewel_Lemke95@gmail.com", FirstName = "Garett", LastName = "Wisozk", Password = "wQ8mKYsvAB", Phone = "073 9783", RoleId = 1 },
                        new { Id = 13, CompanyId = 6, Email = "Jermain.Gulgowski34@yahoo.com", FirstName = "Quinton", LastName = "Maggio", Password = "KO9GGpWXQr", Phone = "073 9981", RoleId = 1 },
                        new { Id = 14, CompanyId = 3, Email = "Joelle.Wehner@yahoo.com", FirstName = "Gerry", LastName = "Bahringer", Password = "6KBizBGWjz", Phone = "073 6119", RoleId = 2 },
                        new { Id = 15, CompanyId = 4, Email = "Harold_Schowalter70@hotmail.com", FirstName = "Elsie", LastName = "Turcotte", Password = "knbEPNA9Xv", Phone = "073 268", RoleId = 1 },
                        new { Id = 16, CompanyId = 1, Email = "Ransom17@gmail.com", FirstName = "Arianna", LastName = "Murray", Password = "v5N8o6MK8c", Phone = "073 2330", RoleId = 1 },
                        new { Id = 17, CompanyId = 4, Email = "Zella63@hotmail.com", FirstName = "Lilla", LastName = "Koepp", Password = "jVrtcEfhEx", Phone = "073 9076", RoleId = 2 },
                        new { Id = 18, CompanyId = 5, Email = "Linnea.Hintz@yahoo.com", FirstName = "Abner", LastName = "Rowe", Password = "324WWvpWvD", Phone = "073 2508", RoleId = 2 },
                        new { Id = 19, CompanyId = 9, Email = "Devon.Paucek3@hotmail.com", FirstName = "Laisha", LastName = "Runte", Password = "WzfOFkbNUl", Phone = "073 3077", RoleId = 2 },
                        new { Id = 20, CompanyId = 6, Email = "Domenic_Kuhlman@yahoo.com", FirstName = "Kamille", LastName = "Heidenreich", Password = "PTmQPW00N4", Phone = "073 337", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Resume", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Courses")
                        .HasColumnName("COURSES")
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Facebook")
                        .HasColumnName("FACEBOOK")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FamilyState")
                        .HasColumnName("FAMILY_STATE")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Github")
                        .HasColumnName("GITHUB")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Instagram")
                        .HasColumnName("INSTAGRAM")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("KeySkills")
                        .IsRequired()
                        .HasColumnName("KEY_SKILLS")
                        .IsUnicode(false);

                    b.Property<string>("Linkedin")
                        .HasColumnName("LINKEDIN")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Skype")
                        .HasColumnName("SKYPE")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("SoftSkills")
                        .IsRequired()
                        .HasColumnName("SOFT_SKILLS")
                        .IsUnicode(false);

                    b.Property<int>("WorkAreaId")
                        .HasColumnName("WORK_AREA_ID");

                    b.HasKey("Id");

                    b.HasIndex("Facebook")
                        .IsUnique()
                        .HasName("UQ_RESUMES_FACEBOOK")
                        .HasFilter("[FACEBOOK] IS NOT NULL");

                    b.HasIndex("Instagram")
                        .IsUnique()
                        .HasName("UQ_RESUMES_INSTAGRAM")
                        .HasFilter("[INSTAGRAM] IS NOT NULL");

                    b.HasIndex("Linkedin")
                        .IsUnique()
                        .HasName("UQ_RESUMES_LINKEDIN")
                        .HasFilter("[LINKEDIN] IS NOT NULL");

                    b.HasIndex("Skype")
                        .IsUnique()
                        .HasName("UQ_RESUMES_SKYPE")
                        .HasFilter("[SKYPE] IS NOT NULL");

                    b.HasIndex("WorkAreaId");

                    b.ToTable("RESUMES");

                    b.HasData(
                        new { Id = 31, Courses = "Sit atque praesentium modi enim.", CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Facebook = "https://sigurd.com", FamilyState = "Qui.", Github = "http://zola.net", Instagram = "https://margie.org", KeySkills = "Perspiciatis laborum veniam qui at.", Linkedin = "https://jairo.org", ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Skype = "https://doris.info", SoftSkills = "Non ut eum cumque et est debitis odio et optio.", WorkAreaId = 3 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.ResumeLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId")
                        .HasColumnName("LANGUAGE_ID");

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ResumeId");

                    b.ToTable("RESUME_LANGUAGES");

                    b.HasData(
                        new { Id = 62, LanguageId = 3, ResumeId = 31 },
                        new { Id = 63, LanguageId = 2, ResumeId = 31 },
                        new { Id = 64, LanguageId = 1, ResumeId = 31 },
                        new { Id = 65, LanguageId = 3, ResumeId = 31 },
                        new { Id = 66, LanguageId = 2, ResumeId = 31 },
                        new { Id = 67, LanguageId = 3, ResumeId = 31 },
                        new { Id = 68, LanguageId = 3, ResumeId = 31 },
                        new { Id = 69, LanguageId = 2, ResumeId = 31 },
                        new { Id = 70, LanguageId = 1, ResumeId = 31 },
                        new { Id = 71, LanguageId = 1, ResumeId = 31 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_ROLES_NAME");

                    b.ToTable("ROLES");

                    b.HasData(
                        new { Id = 1, Name = "admin" },
                        new { Id = 2, Name = "user" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.School", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_SCHOOLS_NAME");

                    b.ToTable("SCHOOLS");

                    b.HasData(
                        new { Id = 1, Name = "NU LP" },
                        new { Id = 2, Name = "LNU" },
                        new { Id = 3, Name = "KPI" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime>("BirthData")
                        .HasColumnName("BIRTH_DATA")
                        .HasColumnType("date");

                    b.Property<int>("CityId")
                        .HasColumnName("CITY_ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FIRST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LAST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<byte[]>("PhotoData")
                        .HasColumnName("PHOTO_DATA");

                    b.Property<string>("PhotoMimeType")
                        .HasColumnName("PHOTO_MIME_TYPE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.Property<string>("Sex")
                        .HasColumnName("SEX")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_USERS_EMAIL");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_USERS_PHONE")
                        .HasFilter("[PHONE] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("USERS");

                    b.HasData(
                        new { Id = 31, Address = "Roel Via", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 3, Email = "Katheryn78@yahoo.com", FirstName = "Carlee", LastName = "Douglas", Password = "7eMCYCFi_G", Phone = "073 9716", RoleId = 1, Sex = "m" },
                        new { Id = 32, Address = "Houston Fort", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 3, Email = "Davon75@yahoo.com", FirstName = "Jacey", LastName = "Corkery", Password = "rkwGnqnazH", Phone = "073 527", RoleId = 1, Sex = "m" },
                        new { Id = 33, Address = "Hahn Neck", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 3, Email = "Eleonore_Effertz@hotmail.com", FirstName = "Bret", LastName = "Hintz", Password = "pfdlbOo5YZ", Phone = "073 4922", RoleId = 1, Sex = "f" },
                        new { Id = 34, Address = "Reilly Dam", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 1, Email = "Hiram_Crist@yahoo.com", FirstName = "Garret", LastName = "Gusikowski", Password = "z6jPz6A7mr", Phone = "073 3940", RoleId = 2, Sex = "m" },
                        new { Id = 35, Address = "Homenick Common", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 2, Email = "Issac20@yahoo.com", FirstName = "Salvador", LastName = "Rempel", Password = "9n67bWkY5q", Phone = "073 1873", RoleId = 1, Sex = "m" },
                        new { Id = 36, Address = "Leuschke Junction", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 2, Email = "Nathanael.Fisher97@yahoo.com", FirstName = "Jensen", LastName = "Simonis", Password = "rQ4Npp_VNr", Phone = "073 6858", RoleId = 2, Sex = "f" },
                        new { Id = 37, Address = "Emil Station", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 3, Email = "Breanna_Prosacco91@gmail.com", FirstName = "Wilford", LastName = "Collins", Password = "clxxnyj4_i", Phone = "073 7127", RoleId = 1, Sex = "f" },
                        new { Id = 38, Address = "Raynor Well", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 1, Email = "Paris75@hotmail.com", FirstName = "Bartholome", LastName = "Gottlieb", Password = "U9FyBi03Iw", Phone = "073 5555", RoleId = 1, Sex = "m" },
                        new { Id = 39, Address = "Morar Isle", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 2, Email = "Aiyana72@yahoo.com", FirstName = "Laverne", LastName = "Corkery", Password = "GFT_Qle_lk", Phone = "073 9044", RoleId = 2, Sex = "m" },
                        new { Id = 40, Address = "Rohan Route", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 2, Email = "Lelia.Olson@yahoo.com", FirstName = "Anthony", LastName = "Considine", Password = "RyEdhNvxxe", Phone = "073 3497", RoleId = 2, Sex = "f" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BePlus")
                        .HasColumnName("BE_PLUS")
                        .IsUnicode(false);

                    b.Property<int>("CityId")
                        .HasColumnName("CITY_ID");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("DESCRIPTION")
                        .IsUnicode(false);

                    b.Property<string>("FullPartTime")
                        .HasColumnName("FULL_PART_TIME")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<bool?>("IsChecked")
                        .HasColumnName("IS_CHECKED");

                    b.Property<DateTime?>("ModDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Offering")
                        .IsRequired()
                        .HasColumnName("OFFERING")
                        .IsUnicode(false);

                    b.Property<int>("RecruiterId")
                        .HasColumnName("RECRUITER_ID");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnName("REQUIREMENTS")
                        .IsUnicode(false);

                    b.Property<decimal?>("Salary")
                        .HasColumnName("SALARY")
                        .HasColumnType("money");

                    b.Property<int>("WorkAreaId")
                        .HasColumnName("WORK_AREA_ID");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("RecruiterId");

                    b.HasIndex("WorkAreaId");

                    b.ToTable("VACANCIES");

                    b.HasData(
                        new { Id = 21, BePlus = "Est aliquam earum omnis optio eveniet et ut id adipisci.", CityId = 2, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Senior", FullPartTime = "Part-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Internal Communications Coordinator", Offering = "Andres Bode", RecruiterId = 12, Requirements = "Veniam maxime ab ratione corrupti qui suscipit.", Salary = 1000m, WorkAreaId = 1 },
                        new { Id = 22, BePlus = "Voluptate suscipit eum ipsum non aspernatur.", CityId = 2, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Direct", FullPartTime = "Part-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "National Accounts Executive", Offering = "Lacy Marks", RecruiterId = 16, Requirements = "Et nihil recusandae.", Salary = 1000m, WorkAreaId = 3 },
                        new { Id = 23, BePlus = "Fugiat consequatur quia consequuntur iusto sunt quidem modi voluptatem.", CityId = 3, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Legacy", FullPartTime = "Part-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Lead Identity Orchestrator", Offering = "Willa West", RecruiterId = 13, Requirements = "Et ut consectetur accusamus quos sed qui error tenetur.", Salary = 1000m, WorkAreaId = 3 },
                        new { Id = 24, BePlus = "Est in fugit explicabo sequi vitae perspiciatis.", CityId = 3, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Legacy", FullPartTime = "Part-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Human Interactions Associate", Offering = "Ted Cole", RecruiterId = 13, Requirements = "Sequi iste est et vel deserunt.", Salary = 1000m, WorkAreaId = 2 },
                        new { Id = 25, BePlus = "Maxime nulla quia quas nam esse enim.", CityId = 1, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Dynamic", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Internal Markets Producer", Offering = "Doug Halvorson", RecruiterId = 17, Requirements = "Placeat totam a libero debitis labore natus et.", Salary = 1000m, WorkAreaId = 2 },
                        new { Id = 26, BePlus = "Debitis sed cupiditate aut tempora est aut placeat.", CityId = 1, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Regional", FullPartTime = "Part-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Corporate Applications Architect", Offering = "Leatha Weimann", RecruiterId = 15, Requirements = "Impedit nostrum eos impedit delectus dolorem nam.", Salary = 1000m, WorkAreaId = 2 },
                        new { Id = 27, BePlus = "Eaque aut aut quo veritatis voluptatum similique modi.", CityId = 3, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Product", FullPartTime = "Part-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Future Operations Executive", Offering = "Kenton Bailey", RecruiterId = 20, Requirements = "Provident reprehenderit voluptas neque consequatur.", Salary = 1000m, WorkAreaId = 1 },
                        new { Id = 28, BePlus = "Enim fugit quis occaecati labore sed.", CityId = 2, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Legacy", FullPartTime = "Part-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Legacy Markets Agent", Offering = "Giles Feeney", RecruiterId = 11, Requirements = "Dolorem sed praesentium molestiae vitae.", Salary = 1000m, WorkAreaId = 3 },
                        new { Id = 29, BePlus = "Molestiae ducimus fugiat et quaerat odit.", CityId = 3, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "National", FullPartTime = "Part-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Principal Infrastructure Administrator", Offering = "Jerome Mayert", RecruiterId = 18, Requirements = "Incidunt enim excepturi ea expedita vel quaerat magnam nostrum vero.", Salary = 1000m, WorkAreaId = 1 },
                        new { Id = 30, BePlus = "Et minus aut.", CityId = 2, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Principal", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Human Paradigm Engineer", Offering = "Ari Reichel", RecruiterId = 16, Requirements = "Est voluptas aut blanditiis pariatur.", Salary = 1000m, WorkAreaId = 2 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.WorkArea", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<byte[]>("PhotoData")
                        .HasColumnName("PHOTO_DATA");

                    b.Property<string>("PhotoMimetype")
                        .HasColumnName("PHOTO_MIMETYPE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_WORK_AREAS_NAME");

                    b.ToTable("WORK_AREAS");

                    b.HasData(
                        new { Id = 1, Name = "IT" },
                        new { Id = 2, Name = "Sales" },
                        new { Id = 3, Name = "Medicine" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Company", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Companies")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_COMPANIES_TO_ROLES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.EducationPeriod", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Faculty", "Faculty")
                        .WithMany("EducationPeriods")
                        .HasForeignKey("FacultyId")
                        .HasConstraintName("FK_PK_EDUCATION_PERIODS_TO_FACULTIES");

                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("EducationPeriods")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_PK_EDUCATION_PERIODS_TO_RESUMES");

                    b.HasOne("JobList.DataAccess.Entities.School", "School")
                        .WithMany("EducationPeriods")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_PK_EDUCATION_PERIODS_TO_SCHOOLS");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Experience", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("Experiences")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_EXPERIENCES_TO_RESUMES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.FavoriteVacancy", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.User", "User")
                        .WithMany("FavoriteVacancies")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_FAVORITE_VACANCIES_TO_USERS");

                    b.HasOne("JobList.DataAccess.Entities.Vacancy", "Vacancy")
                        .WithMany("FavoriteVacancies")
                        .HasForeignKey("VacancyId")
                        .HasConstraintName("FK_FAVORITE_VACANCIES_TO_VACANCIES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Recruiter", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Company", "Company")
                        .WithMany("Recruiters")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_RECRUITERS_TO_COMPANIES");

                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Recruiters")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RECRUITERS_TO_ROLES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Resume", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.User", "User")
                        .WithOne("Resumes")
                        .HasForeignKey("JobList.DataAccess.Entities.Resume", "Id")
                        .HasConstraintName("FK_RESUMES_TO_USERS");

                    b.HasOne("JobList.DataAccess.Entities.WorkArea", "WorkArea")
                        .WithMany("Resumes")
                        .HasForeignKey("WorkAreaId")
                        .HasConstraintName("FK_RESUMES_TO_WORKAREA");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.ResumeLanguage", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Language", "Language")
                        .WithMany("ResumeLanguages")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_PK_RESUME_LANGUAGES_TO_LANGUAGES");

                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("ResumeLanguages")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_PK_RESUME_LANGUAGES_TO_RESUMES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.User", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_USERS_TO_CITIES");

                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_USERS_TO_ROLES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Vacancy", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.City", "City")
                        .WithMany("Vacancies")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_VACANCIES_TO_CITIES");

                    b.HasOne("JobList.DataAccess.Entities.Recruiter", "Recruiter")
                        .WithMany("Vacancies")
                        .HasForeignKey("RecruiterId")
                        .HasConstraintName("FK_VACANCIES_TO_RECRUITERS");

                    b.HasOne("JobList.DataAccess.Entities.WorkArea", "WorkArea")
                        .WithMany("Vacancies")
                        .HasForeignKey("WorkAreaId")
                        .HasConstraintName("FK_VACANCIES_TO_WORK_AREAS");
                });
#pragma warning restore 612, 618
        }
    }
}
