// <auto-generated />
using System;
using JobList.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JobList.DataAccess.Migrations
{
    [DbContext(typeof(JobListDbContext))]
    [Migration("20181019155036_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JobList.DataAccess.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<byte[]>("PhotoData")
                        .HasColumnName("PHOTO_DATA");

                    b.Property<string>("PhotoMimetype")
                        .HasColumnName("PHOTO_MIMETYPE")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_CITIES_NAME");

                    b.ToTable("CITIES");

                    b.HasData(
                        new { Id = 1, Name = "New York" },
                        new { Id = 2, Name = "Jersey" },
                        new { Id = 3, Name = "Atlanta" },
                        new { Id = 4, Name = "Los Angeles" },
                        new { Id = 5, Name = "Boston" },
                        new { Id = 6, Name = "Philadephia" },
                        new { Id = 7, Name = "Seattle" },
                        new { Id = 8, Name = "Washington DC" },
                        new { Id = 9, Name = "Las Vegas" },
                        new { Id = 10, Name = "Phoneix" },
                        new { Id = 11, Name = "San Francisco" },
                        new { Id = 12, Name = "Chicago" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("ADDRESS")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("BossName")
                        .IsRequired()
                        .HasColumnName("BOSS_NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(254)
                        .IsUnicode(false);

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnName("FULL_DESCRIPTION")
                        .IsUnicode(false);

                    b.Property<byte[]>("LogoData")
                        .HasColumnName("LOGO_DATA");

                    b.Property<string>("LogoMimetype")
                        .HasColumnName("LOGO_MIMETYPE")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("RefreshToken")
                        .HasColumnName("REFRESH_TOKEN")
                        .HasMaxLength(70)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnName("SHORT_DESCRIPTION")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Site")
                        .HasColumnName("SITE")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_EMAIL");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_NAME");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_PHONE")
                        .HasFilter("[PHONE] IS NOT NULL");

                    b.HasIndex("RefreshToken")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_REFRESH_TOKEN")
                        .HasFilter("[REFRESH_TOKEN] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("COMPANIES");

                    b.HasData(
                        new { Id = 1, Address = "233 Eladio Expressway, Dibbertmouth, Virgin Islands, U.S.", BossName = "Barry", Email = "Antonette.Nolan@gmail.com", FullDescription = "Sapiente omnis hic.", Name = "Company 353", Password = "A5HdONDZmA", Phone = "(463) 196 8327", RoleId = 3, ShortDescription = "nihil", Site = "http://haylie.net" },
                        new { Id = 2, Address = "95873 Josie Village, Hartmannberg, Finland", BossName = "Zane", Email = "Arielle_McGlynn@yahoo.com", FullDescription = "Quam labore rerum.", Name = "Company 249", Password = "k0R5FdngtX", Phone = "(121) 882 2622", RoleId = 3, ShortDescription = "vel", Site = "http://janelle.com" },
                        new { Id = 3, Address = "7284 Brandyn Highway, Lake Ayden, Namibia", BossName = "Chandler", Email = "Lessie.Huel@yahoo.com", FullDescription = "Cumque omnis doloremque.", Name = "Company 283", Password = "d_pvCdmOe3", Phone = "(19) 381 1570", RoleId = 3, ShortDescription = "est", Site = "http://johnnie.net" },
                        new { Id = 4, Address = "4233 Hamill Squares, East Julien, Tokelau", BossName = "Kathlyn", Email = "Presley.Leannon@gmail.com", FullDescription = "Ullam non doloribus.", Name = "Company 489", Password = "srSI1zXOyM", Phone = "(604) 61 4335", RoleId = 3, ShortDescription = "autem", Site = "http://timmothy.com" },
                        new { Id = 5, Address = "977 Dare Pine, South Siennaview, Guinea-Bissau", BossName = "Bettie", Email = "Victoria_Kub@yahoo.com", FullDescription = "Possimus sed qui.", Name = "Company 715", Password = "UF_52LXE9X", Phone = "(228) 998 4617", RoleId = 3, ShortDescription = "animi", Site = "http://willa.info" },
                        new { Id = 6, Address = "261 Alta Lakes, South Delphia, Marshall Islands", BossName = "Alysa", Email = "Summer.Nicolas@gmail.com", FullDescription = "Totam cumque doloremque.", Name = "Company 697", Password = "xDhvXFZB7O", Phone = "(616) 394 4053", RoleId = 3, ShortDescription = "in", Site = "https://reece.name" },
                        new { Id = 7, Address = "76618 Luther Bypass, West Ricoside, Congo", BossName = "Valentine", Email = "Efren_Marks@gmail.com", FullDescription = "Accusantium officia est.", Name = "Company 285", Password = "ZPAH2LzQCZ", Phone = "(553) 431 5956", RoleId = 3, ShortDescription = "velit", Site = "http://arnoldo.net" },
                        new { Id = 8, Address = "4641 Kiana Motorway, Trystanland, Belarus", BossName = "Maximo", Email = "Lucienne3@hotmail.com", FullDescription = "Et et magnam.", Name = "Company 844", Password = "MDWM2RyecF", Phone = "(380) 981 533", RoleId = 3, ShortDescription = "voluptates", Site = "http://malinda.net" },
                        new { Id = 9, Address = "544 Cartwright Streets, Violachester, Cuba", BossName = "Sally", Email = "Tressa_Bayer49@yahoo.com", FullDescription = "Soluta mollitia doloremque.", Name = "Company 292", Password = "6if7kj8gSz", Phone = "(354) 67 4191", RoleId = 3, ShortDescription = "fugiat", Site = "https://juana.com" },
                        new { Id = 10, Address = "301 Heathcote Trafficway, New Stan, Jersey", BossName = "Greyson", Email = "Ceasar_West52@gmail.com", FullDescription = "Tempore ad sit.", Name = "Company 73", Password = "gycoh_rv4g", Phone = "(67) 970 6276", RoleId = 3, ShortDescription = "voluptatem", Site = "https://marquis.net" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.EducationPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FacultyId")
                        .HasColumnName("FACULTY_ID");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnName("FINISH_DATE")
                        .HasColumnType("date");

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.Property<int>("SchoolId")
                        .HasColumnName("SCHOOL_ID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("START_DATE")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("ResumeId");

                    b.HasIndex("SchoolId");

                    b.ToTable("EDUCATION_PERIODS");

                    b.HasData(
                        new { Id = 55, FacultyId = 9, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 39, SchoolId = 2, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 56, FacultyId = 2, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 39, SchoolId = 3, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 57, FacultyId = 9, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 39, SchoolId = 8, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 58, FacultyId = 6, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 39, SchoolId = 8, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 59, FacultyId = 2, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 39, SchoolId = 5, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 60, FacultyId = 1, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 39, SchoolId = 1, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 61, FacultyId = 4, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 39, SchoolId = 7, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 62, FacultyId = 3, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 39, SchoolId = 10, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 63, FacultyId = 4, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 39, SchoolId = 4, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 64, FacultyId = 4, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 39, SchoolId = 8, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 111, FacultyId = 4, FinishDate = new DateTime(2005, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 46, SchoolId = 8, StartDate = new DateTime(2002, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 112, FacultyId = 2, FinishDate = new DateTime(2007, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 46, SchoolId = 5, StartDate = new DateTime(2004, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("BIRTH_DATE")
                        .HasColumnType("date");

                    b.Property<int>("CityId")
                        .HasColumnName("CITY_ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(254)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FIRST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LAST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<byte[]>("PhotoData")
                        .HasColumnName("PHOTO_DATA");

                    b.Property<string>("PhotoMimeType")
                        .HasColumnName("PHOTO_MIME_TYPE")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("RefreshToken")
                        .HasColumnName("REFRESH_TOKEN")
                        .HasMaxLength(70)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.Property<string>("Sex")
                        .HasColumnName("SEX")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_EMPLOYEES_EMAIL");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_EMPLOYEES_PHONE")
                        .HasFilter("[PHONE] IS NOT NULL");

                    b.HasIndex("RefreshToken")
                        .IsUnique()
                        .HasName("UQ_EMPLOYEES_REFRESH_TOKEN")
                        .HasFilter("[REFRESH_TOKEN] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("EMPLOYEES");

                    b.HasData(
                        new { Id = 31, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 6, Email = "Skylar_Kilback68@yahoo.com", FirstName = "Anabelle", LastName = "Wyman", Password = "JSttYd8aNU", Phone = "(346) 880 7753", RoleId = 2, Sex = "m" },
                        new { Id = 32, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 4, Email = "Colleen.Luettgen@yahoo.com", FirstName = "Claud", LastName = "Turner", Password = "oPoGnnzPlk", Phone = "(899) 415 914", RoleId = 2, Sex = "m" },
                        new { Id = 33, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 2, Email = "Skylar80@yahoo.com", FirstName = "Charlie", LastName = "White", Password = "orvNuJtoqD", Phone = "(5) 563 8287", RoleId = 2, Sex = "m" },
                        new { Id = 34, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 5, Email = "Sage99@gmail.com", FirstName = "Nakia", LastName = "Hayes", Password = "d_Gwya53MR", Phone = "(225) 949 3862", RoleId = 2, Sex = "m" },
                        new { Id = 35, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 10, Email = "Athena_Herzog52@gmail.com", FirstName = "Naomi", LastName = "Fay", Password = "OS8v8izf0r", Phone = "(284) 107 1493", RoleId = 2, Sex = "f" },
                        new { Id = 36, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 4, Email = "Karelle_Bayer62@yahoo.com", FirstName = "Brian", LastName = "Rogahn", Password = "Ulazz19WBr", Phone = "(893) 859 2553", RoleId = 2, Sex = "m" },
                        new { Id = 37, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 12, Email = "Micah27@yahoo.com", FirstName = "Verla", LastName = "Moore", Password = "XW91n1UfXK", Phone = "(50) 73 2737", RoleId = 2, Sex = "m" },
                        new { Id = 38, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 6, Email = "Tyler_Borer20@hotmail.com", FirstName = "Delaney", LastName = "Daugherty", Password = "R6yHjKCjna", Phone = "(65) 708 1229", RoleId = 2, Sex = "m" },
                        new { Id = 39, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 7, Email = "Kailey.Daugherty@gmail.com", FirstName = "Odie", LastName = "Bechtelar", Password = "kzNGzZaY8_", Phone = "(306) 478 5979", RoleId = 2, Sex = "m" },
                        new { Id = 40, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 6, Email = "Lourdes36@hotmail.com", FirstName = "Schuyler", LastName = "Huel", Password = "eAbh_pnmAp", Phone = "(94) 876 4349", RoleId = 2, Sex = "f" },
                        new { Id = 46, BirthDate = new DateTime(1995, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 8, Email = "andr@gmail.com", FirstName = "Andrew", LastName = "Felton", Password = "qwerty", Phone = "0502758765", RoleId = 2, Sex = "M" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnName("COMPANY_NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnName("FINISH_DATE")
                        .HasColumnType("date");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnName("POSITION")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("START_DATE")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("EXPERIENCES");

                    b.HasData(
                        new { Id = 44, CompanyName = "Lexi Farrell", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Natus voluptatem molestias nulla aut eos facilis.", ResumeId = 39, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 45, CompanyName = "Randal Mueller", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Aut aut aut voluptas eos.", ResumeId = 39, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 46, CompanyName = "Mina Kunde", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Est qui magnam consequatur deserunt delectus maxime perspiciatis ea.", ResumeId = 39, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 47, CompanyName = "Therese Leffler", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Repudiandae ut dolorum consectetur voluptas voluptas corrupti labore.", ResumeId = 39, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 48, CompanyName = "Rhea Volkman", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Magni sed labore incidunt ex deleniti.", ResumeId = 39, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 49, CompanyName = "Bradford Hyatt", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Aut perferendis qui aliquam eos reprehenderit aspernatur sed et cumque.", ResumeId = 39, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 50, CompanyName = "Irving Wisoky", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Nihil libero vitae.", ResumeId = 39, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 51, CompanyName = "Abigale Medhurst", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Possimus suscipit delectus laudantium.", ResumeId = 39, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 52, CompanyName = "Joanie Haley", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Ut non in.", ResumeId = 39, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 53, CompanyName = "Ubaldo Walker", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Ab architecto et explicabo eos itaque qui.", ResumeId = 39, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 65, CompanyName = "Triomed", FinishDate = new DateTime(2018, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Surgeon", ResumeId = 46, StartDate = new DateTime(2008, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_FACULTIES_NAME");

                    b.ToTable("FACULTIES");

                    b.HasData(
                        new { Id = 1, Name = "Computer Science" },
                        new { Id = 2, Name = "Software Engineering" },
                        new { Id = 3, Name = "Applied Mathematics" },
                        new { Id = 4, Name = "Foreign Languages" },
                        new { Id = 5, Name = "International Relationships" },
                        new { Id = 6, Name = "Economics" },
                        new { Id = 7, Name = "Design" },
                        new { Id = 8, Name = "Faculty of Law" },
                        new { Id = 9, Name = "Marketing" },
                        new { Id = 10, Name = "Journalism" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.FavoriteVacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnName("EMPLOYEE_ID");

                    b.Property<int>("VacancyId")
                        .HasColumnName("VACANCY_ID");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("VacancyId");

                    b.ToTable("FAVORITE_VACANCIES");

                    b.HasData(
                        new { Id = 80, EmployeeId = 36, VacancyId = 29 },
                        new { Id = 81, EmployeeId = 33, VacancyId = 30 },
                        new { Id = 82, EmployeeId = 31, VacancyId = 21 },
                        new { Id = 83, EmployeeId = 38, VacancyId = 21 },
                        new { Id = 84, EmployeeId = 36, VacancyId = 30 },
                        new { Id = 85, EmployeeId = 39, VacancyId = 22 },
                        new { Id = 86, EmployeeId = 31, VacancyId = 28 },
                        new { Id = 87, EmployeeId = 32, VacancyId = 28 },
                        new { Id = 88, EmployeeId = 36, VacancyId = 28 },
                        new { Id = 89, EmployeeId = 31, VacancyId = 24 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_LANGUAGES_NAME");

                    b.ToTable("LANGUAGES");

                    b.HasData(
                        new { Id = 1, Name = "English" },
                        new { Id = 2, Name = "Ukrainian" },
                        new { Id = 3, Name = "Russian" },
                        new { Id = 4, Name = "Polish" },
                        new { Id = 5, Name = "Greek" },
                        new { Id = 6, Name = "Japanese" },
                        new { Id = 7, Name = "Spanish" },
                        new { Id = 8, Name = "Chinese" },
                        new { Id = 9, Name = "German" },
                        new { Id = 10, Name = "Roman" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Recruiter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnName("COMPANY_ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(254)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FIRST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LAST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<byte[]>("PhotoData")
                        .HasColumnName("PHOTO_DATA");

                    b.Property<string>("PhotoMimetype")
                        .HasColumnName("PHOTO_MIMETYPE")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("RefreshToken")
                        .HasColumnName("REFRESH_TOKEN")
                        .HasMaxLength(70)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_RECRUITERS_EMAIL");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_RECRUITERS_PHONE")
                        .HasFilter("[PHONE] IS NOT NULL");

                    b.HasIndex("RefreshToken")
                        .IsUnique()
                        .HasName("UQ_RECRUITERS_REFRESH_TOKEN")
                        .HasFilter("[REFRESH_TOKEN] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("RECRUITERS");

                    b.HasData(
                        new { Id = 11, CompanyId = 4, Email = "Kiara59@yahoo.com", FirstName = "Krystina", LastName = "Grady", Password = "JNUtpFjmEB", Phone = "(896) 404 1662", RoleId = 4 },
                        new { Id = 12, CompanyId = 5, Email = "Aileen.Murazik12@hotmail.com", FirstName = "Margarita", LastName = "Auer", Password = "RXDfH9g9mR", Phone = "(236) 581 1592", RoleId = 4 },
                        new { Id = 13, CompanyId = 5, Email = "Josephine56@yahoo.com", FirstName = "Oscar", LastName = "Anderson", Password = "r29ilFEzHV", Phone = "(803) 313 6781", RoleId = 4 },
                        new { Id = 14, CompanyId = 2, Email = "Casper31@yahoo.com", FirstName = "Estella", LastName = "Conroy", Password = "4vnuefbFNn", Phone = "(611) 101 9380", RoleId = 4 },
                        new { Id = 15, CompanyId = 3, Email = "Melba22@yahoo.com", FirstName = "Myron", LastName = "Adams", Password = "MvVb1KtV0N", Phone = "(558) 225 638", RoleId = 4 },
                        new { Id = 16, CompanyId = 7, Email = "Frank.Waters@yahoo.com", FirstName = "Mason", LastName = "Huels", Password = "1cZMYEJcqf", Phone = "(889) 997 8461", RoleId = 4 },
                        new { Id = 17, CompanyId = 4, Email = "Roxane.Gottlieb@gmail.com", FirstName = "Betty", LastName = "Yost", Password = "NBX8p7QOn7", Phone = "(47) 569 6037", RoleId = 4 },
                        new { Id = 18, CompanyId = 1, Email = "Garnett_Emard@hotmail.com", FirstName = "Ottilie", LastName = "Greenfelder", Password = "mB6NOHijXu", Phone = "(545) 461 6690", RoleId = 4 },
                        new { Id = 19, CompanyId = 10, Email = "Annamarie_Yost82@hotmail.com", FirstName = "Samantha", LastName = "Bahringer", Password = "7SvHJSteFU", Phone = "(522) 71 7744", RoleId = 4 },
                        new { Id = 20, CompanyId = 1, Email = "Matilda.Koelpin32@yahoo.com", FirstName = "Chesley", LastName = "Funk", Password = "UCFk1SqarA", Phone = "(870) 768 7096", RoleId = 4 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Resume", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Courses")
                        .HasColumnName("COURSES")
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Facebook")
                        .HasColumnName("FACEBOOK")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FamilyState")
                        .HasColumnName("FAMILY_STATE")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Github")
                        .HasColumnName("GITHUB")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Instagram")
                        .HasColumnName("INSTAGRAM")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnName("INTRODUCTION")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<string>("KeySkills")
                        .IsRequired()
                        .HasColumnName("KEY_SKILLS")
                        .IsUnicode(false);

                    b.Property<string>("Linkedin")
                        .HasColumnName("LINKEDIN")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Position")
                        .HasColumnName("POSITION")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Skype")
                        .HasColumnName("SKYPE")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("SoftSkills")
                        .IsRequired()
                        .HasColumnName("SOFT_SKILLS")
                        .IsUnicode(false);

                    b.Property<int>("WorkAreaId")
                        .HasColumnName("WORK_AREA_ID");

                    b.HasKey("Id");

                    b.HasIndex("Facebook")
                        .IsUnique()
                        .HasName("UQ_RESUMES_FACEBOOK")
                        .HasFilter("[FACEBOOK] IS NOT NULL");

                    b.HasIndex("Instagram")
                        .IsUnique()
                        .HasName("UQ_RESUMES_INSTAGRAM")
                        .HasFilter("[INSTAGRAM] IS NOT NULL");

                    b.HasIndex("Linkedin")
                        .IsUnique()
                        .HasName("UQ_RESUMES_LINKEDIN")
                        .HasFilter("[LINKEDIN] IS NOT NULL");

                    b.HasIndex("Skype")
                        .IsUnique()
                        .HasName("UQ_RESUMES_SKYPE")
                        .HasFilter("[SKYPE] IS NOT NULL");

                    b.HasIndex("WorkAreaId");

                    b.ToTable("RESUMES");

                    b.HasData(
                        new { Id = 39, Courses = "Rem beatae reiciendis quam consequatur autem rem numquam.", CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Facebook = "http://delphia.info", FamilyState = "Earum.", Github = "https://miles.name", Instagram = "http://alanna.net", Introduction = "Iste soluta.", KeySkills = "Sequi magni.", Linkedin = "http://nikko.name", ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Ab.", Skype = "https://oliver.net", SoftSkills = "Omnis repellendus.", WorkAreaId = 7 },
                        new { Id = 46, Courses = "Certification training", CreateDate = new DateTime(2018, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), Facebook = "www.facebook.com", FamilyState = "not married", Introduction = "Hello!", KeySkills = "hardworking, persuasive", SoftSkills = "plastic surgery", WorkAreaId = 3 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.ResumeLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId")
                        .HasColumnName("LANGUAGE_ID");

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ResumeId");

                    b.ToTable("RESUME_LANGUAGES");

                    b.HasData(
                        new { Id = 67, LanguageId = 8, ResumeId = 39 },
                        new { Id = 68, LanguageId = 9, ResumeId = 39 },
                        new { Id = 69, LanguageId = 3, ResumeId = 39 },
                        new { Id = 70, LanguageId = 4, ResumeId = 39 },
                        new { Id = 71, LanguageId = 9, ResumeId = 39 },
                        new { Id = 72, LanguageId = 3, ResumeId = 39 },
                        new { Id = 73, LanguageId = 3, ResumeId = 39 },
                        new { Id = 74, LanguageId = 5, ResumeId = 39 },
                        new { Id = 75, LanguageId = 4, ResumeId = 39 },
                        new { Id = 76, LanguageId = 3, ResumeId = 39 },
                        new { Id = 111, LanguageId = 10, ResumeId = 46 },
                        new { Id = 112, LanguageId = 5, ResumeId = 46 },
                        new { Id = 113, LanguageId = 7, ResumeId = 46 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_ROLES_NAME");

                    b.ToTable("ROLES");

                    b.HasData(
                        new { Id = 1, Name = "admin" },
                        new { Id = 2, Name = "employee" },
                        new { Id = 3, Name = "company" },
                        new { Id = 4, Name = "recruiter" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.School", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_SCHOOLS_NAME");

                    b.ToTable("SCHOOLS");

                    b.HasData(
                        new { Id = 1, Name = "Chicago State University" },
                        new { Id = 2, Name = "Harvard University" },
                        new { Id = 3, Name = "Prinston University" },
                        new { Id = 4, Name = "Berklee College Of Arts" },
                        new { Id = 5, Name = "Stanford University" },
                        new { Id = 6, Name = "Massachusetts Institute of Technology" },
                        new { Id = 7, Name = "Columbia University" },
                        new { Id = 8, Name = "New York University" },
                        new { Id = 9, Name = "University of Arizona" },
                        new { Id = 10, Name = "Yale University" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BePlus")
                        .HasColumnName("BE_PLUS")
                        .IsUnicode(false);

                    b.Property<int>("CityId")
                        .HasColumnName("CITY_ID");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("DESCRIPTION")
                        .IsUnicode(false);

                    b.Property<string>("FullPartTime")
                        .HasColumnName("FULL_PART_TIME")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<bool?>("IsChecked")
                        .HasColumnName("IS_CHECKED");

                    b.Property<DateTime?>("ModDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Offering")
                        .IsRequired()
                        .HasColumnName("OFFERING")
                        .IsUnicode(false);

                    b.Property<int>("RecruiterId")
                        .HasColumnName("RECRUITER_ID");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnName("REQUIREMENTS")
                        .IsUnicode(false);

                    b.Property<decimal?>("Salary")
                        .HasColumnName("SALARY")
                        .HasColumnType("money");

                    b.Property<int>("WorkAreaId")
                        .HasColumnName("WORK_AREA_ID");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("RecruiterId");

                    b.HasIndex("WorkAreaId");

                    b.ToTable("VACANCIES");

                    b.HasData(
                        new { Id = 21, BePlus = "Mollitia iste voluptate id et enim tempora.", CityId = 4, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Senior", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Principal Response Analyst", Offering = "Reyna Bednar", RecruiterId = 13, Requirements = "Dolores velit architecto aut in.", Salary = 1000m, WorkAreaId = 3 },
                        new { Id = 22, BePlus = "Voluptates atque sunt dolorem ut dolorum est hic.", CityId = 11, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Direct", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Investor Quality Specialist", Offering = "Geovanny Kemmer", RecruiterId = 13, Requirements = "Quisquam esse est ut veritatis velit.", Salary = 1000m, WorkAreaId = 2 },
                        new { Id = 23, BePlus = "Modi adipisci deserunt ipsam.", CityId = 9, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Future", FullPartTime = "Part-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Customer Applications Representative", Offering = "Linnea Kunze", RecruiterId = 13, Requirements = "Voluptatem necessitatibus impedit assumenda libero consectetur odit facilis nulla.", Salary = 1000m, WorkAreaId = 7 },
                        new { Id = 24, BePlus = "Veniam temporibus velit porro ut harum et.", CityId = 1, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "International", FullPartTime = "Full-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Dynamic Markets Supervisor", Offering = "Bartholome Weissnat", RecruiterId = 19, Requirements = "Nulla quis odit quas.", Salary = 1000m, WorkAreaId = 3 },
                        new { Id = 25, BePlus = "Ea id quia reprehenderit ut.", CityId = 3, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Investor", FullPartTime = "Part-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Lead Response Assistant", Offering = "Weldon Batz", RecruiterId = 12, Requirements = "Qui repellat et in incidunt enim quod.", Salary = 1000m, WorkAreaId = 1 },
                        new { Id = 26, BePlus = "Et rerum omnis nihil natus necessitatibus aut molestiae mollitia id.", CityId = 10, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Legacy", FullPartTime = "Full-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Human Markets Developer", Offering = "Jaqueline Kris", RecruiterId = 15, Requirements = "Officia tenetur deleniti aut natus.", Salary = 1000m, WorkAreaId = 8 },
                        new { Id = 27, BePlus = "Cumque rerum quaerat voluptatem quod quia quae quia et tempora.", CityId = 2, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Regional", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Direct Applications Developer", Offering = "Pattie Kunze", RecruiterId = 18, Requirements = "In animi aliquid aut eveniet est.", Salary = 1000m, WorkAreaId = 9 },
                        new { Id = 28, BePlus = "Et id consequatur illo tempore atque sunt sint.", CityId = 4, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Internal", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Direct Directives Liaison", Offering = "Christelle Keeling", RecruiterId = 14, Requirements = "Beatae omnis dicta atque architecto nisi sed ut distinctio neque.", Salary = 1000m, WorkAreaId = 10 },
                        new { Id = 29, BePlus = "Veritatis beatae nobis laborum rerum ex saepe.", CityId = 1, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Customer", FullPartTime = "Part-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Future Security Consultant", Offering = "Rosamond Haag", RecruiterId = 13, Requirements = "Quidem rerum dolorum odit ipsum nam libero reiciendis.", Salary = 1000m, WorkAreaId = 11 },
                        new { Id = 30, BePlus = "Iure alias quas est laborum et voluptate illo.", CityId = 3, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Forward", FullPartTime = "Part-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Product Usability Executive", Offering = "Eden Murray", RecruiterId = 20, Requirements = "Earum et saepe laborum sed autem quisquam.", Salary = 1000m, WorkAreaId = 9 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.WorkArea", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<byte[]>("PhotoData")
                        .HasColumnName("PHOTO_DATA");

                    b.Property<string>("PhotoMimetype")
                        .HasColumnName("PHOTO_MIMETYPE")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_WORK_AREAS_NAME");

                    b.ToTable("WORK_AREAS");

                    b.HasData(
                        new { Id = 1, Name = "IT" },
                        new { Id = 2, Name = "Sales" },
                        new { Id = 3, Name = "Medicine" },
                        new { Id = 4, Name = "Marketing and Advertising" },
                        new { Id = 5, Name = "Law and Politics" },
                        new { Id = 6, Name = "Science" },
                        new { Id = 7, Name = "Tourism" },
                        new { Id = 8, Name = "Arts" },
                        new { Id = 9, Name = "Insurance" },
                        new { Id = 10, Name = "Real Estate" },
                        new { Id = 11, Name = "Finances" },
                        new { Id = 12, Name = "Media" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Company", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Companies")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_COMPANIES_TO_ROLES")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.EducationPeriod", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Faculty", "Faculty")
                        .WithMany("EducationPeriods")
                        .HasForeignKey("FacultyId")
                        .HasConstraintName("FK_PK_EDUCATION_PERIODS_TO_FACULTIES")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("EducationPeriods")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_PK_EDUCATION_PERIODS_TO_RESUMES")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.School", "School")
                        .WithMany("EducationPeriods")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_PK_EDUCATION_PERIODS_TO_SCHOOLS")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Employee", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.City", "City")
                        .WithMany("Employees")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_EMPLOYEES_TO_CITIES")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_EMPLOYEES_TO_ROLES")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Experience", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("Experiences")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_EXPERIENCES_TO_RESUMES")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.FavoriteVacancy", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Employee", "Employee")
                        .WithMany("FavoriteVacancies")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_FAVORITE_VACANCIES_TO_EMPLOYEES")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.Vacancy", "Vacancy")
                        .WithMany("FavoriteVacancies")
                        .HasForeignKey("VacancyId")
                        .HasConstraintName("FK_FAVORITE_VACANCIES_TO_VACANCIES")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Recruiter", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Company", "Company")
                        .WithMany("Recruiters")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_RECRUITERS_TO_COMPANIES")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Recruiters")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RECRUITERS_TO_ROLES")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Resume", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Employee", "Employee")
                        .WithOne("Resumes")
                        .HasForeignKey("JobList.DataAccess.Entities.Resume", "Id")
                        .HasConstraintName("FK_RESUMES_TO_EMPLOYEES")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.WorkArea", "WorkArea")
                        .WithMany("Resumes")
                        .HasForeignKey("WorkAreaId")
                        .HasConstraintName("FK_RESUMES_TO_WORKAREA")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.ResumeLanguage", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Language", "Language")
                        .WithMany("ResumeLanguages")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_PK_RESUME_LANGUAGES_TO_LANGUAGES")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("ResumeLanguages")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_PK_RESUME_LANGUAGES_TO_RESUMES")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Vacancy", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.City", "City")
                        .WithMany("Vacancies")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_VACANCIES_TO_CITIES")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("JobList.DataAccess.Entities.Recruiter", "Recruiter")
                        .WithMany("Vacancies")
                        .HasForeignKey("RecruiterId")
                        .HasConstraintName("FK_VACANCIES_TO_RECRUITERS")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.WorkArea", "WorkArea")
                        .WithMany("Vacancies")
                        .HasForeignKey("WorkAreaId")
                        .HasConstraintName("FK_VACANCIES_TO_WORK_AREAS")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
