// <auto-generated />
using System;
using JobList.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JobList.DataAccess.Migrations
{
    [DbContext(typeof(JobListDbContext))]
    partial class JobListDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JobList.DataAccess.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_CITIES_NAME");

                    b.ToTable("CITIES");

                    b.HasData(
                        new { Id = 1, Name = "New York City" },
                        new { Id = 2, Name = "Jersey City" },
                        new { Id = 3, Name = "Atlanta" },
                        new { Id = 4, Name = "Los Angeles" },
                        new { Id = 5, Name = "Boston" },
                        new { Id = 6, Name = "Philadephia" },
                        new { Id = 7, Name = "Seattle" },
                        new { Id = 8, Name = "Washington DC" },
                        new { Id = 9, Name = "Las Vegas" },
                        new { Id = 10, Name = "Phoneix" },
                        new { Id = 11, Name = "San Francisco" },
                        new { Id = 12, Name = "Chicago" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("ADDRESS")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("BossName")
                        .IsRequired()
                        .HasColumnName("BOSS_NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnName("FULL_DESCRIPTION")
                        .IsUnicode(false);

                    b.Property<byte[]>("LogoData")
                        .HasColumnName("LOGO_DATA");

                    b.Property<string>("LogoMimetype")
                        .HasColumnName("LOGO_MIMETYPE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.Property<string>("ShortDescription")
                        .HasColumnName("SHORT_DESCRIPTION")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Site")
                        .HasColumnName("SITE")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_EMAIL");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_NAME");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_PHONE")
                        .HasFilter("[PHONE] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("COMPANIES");

                    b.HasData(
                        new { Id = 1, Address = "669 Wolff Stravenue, Daughertyland, Pakistan", BossName = "Anya", Email = "Pink4@yahoo.com", FullDescription = "Modi minus voluptatibus quisquam ratione explicabo aut dignissimos.", Name = "Company № 279", Password = "fQ3lKR0XdN", Phone = "073 3533", RoleId = 4, ShortDescription = "quidem", Site = "http://arturo.info" },
                        new { Id = 2, Address = "1318 Mante Harbor, Roscoeport, Uruguay", BossName = "Eugene", Email = "Charity36@gmail.com", FullDescription = "Hic accusantium accusamus.", Name = "Company № 996", Password = "6kcJwBJ6Ij", Phone = "073 1665", RoleId = 2, ShortDescription = "minus", Site = "https://gage.net" },
                        new { Id = 3, Address = "4747 Nickolas Place, Port Daytonmouth, Finland", BossName = "Elsa", Email = "Camille18@hotmail.com", FullDescription = "Eum eum occaecati id quidem ad necessitatibus eligendi suscipit voluptas.", Name = "Company № 278", Password = "Q9Mj4g_Xwc", Phone = "073 1353", RoleId = 4, ShortDescription = "ad", Site = "https://gordon.org" },
                        new { Id = 4, Address = "15412 Hayden Hill, West Daryl, Norfolk Island", BossName = "Aniya", Email = "Hester22@yahoo.com", FullDescription = "Assumenda similique sint rerum officia tenetur ipsam.", Name = "Company № 680", Password = "qHDAxkJ786", Phone = "073 5257", RoleId = 3, ShortDescription = "et", Site = "http://luis.info" },
                        new { Id = 5, Address = "59723 Casimir Cliff, Hacketttown, Macao", BossName = "Nicolette", Email = "Jordi95@yahoo.com", FullDescription = "Aut ipsa id est rerum.", Name = "Company № 443", Password = "WCRapovrCa", Phone = "073 2558", RoleId = 2, ShortDescription = "voluptatum", Site = "http://salvador.com" },
                        new { Id = 6, Address = "74971 Price Lodge, East Mario, Guam", BossName = "Sunny", Email = "Velda44@gmail.com", FullDescription = "Dolores eum labore et dolores perspiciatis quod culpa natus sapiente.", Name = "Company № 224", Password = "TqjikHswt5", Phone = "073 6235", RoleId = 3, ShortDescription = "repudiandae", Site = "http://estrella.com" },
                        new { Id = 7, Address = "6761 Brown Curve, North Stanfordburgh, Saint Martin", BossName = "Benjamin", Email = "Juwan21@yahoo.com", FullDescription = "Consequatur distinctio iste quisquam accusamus repudiandae magnam dolore non.", Name = "Company № 758", Password = "tvqSru4HnQ", Phone = "073 3240", RoleId = 3, ShortDescription = "libero", Site = "http://raymundo.com" },
                        new { Id = 8, Address = "01148 Kerluke Crossing, Dexterburgh, Jamaica", BossName = "Abe", Email = "Pierce.Tremblay29@gmail.com", FullDescription = "Consequatur repudiandae autem.", Name = "Company № 797", Password = "MKkFdPPwhe", Phone = "073 7774", RoleId = 4, ShortDescription = "quibusdam", Site = "http://brett.com" },
                        new { Id = 9, Address = "36334 Bruce Prairie, Rolfsonmouth, Luxembourg", BossName = "Adolph", Email = "Abigale_Tillman3@hotmail.com", FullDescription = "Et voluptatem sit ea exercitationem impedit harum cum voluptates corporis.", Name = "Company № 76", Password = "Jem3PHRKFG", Phone = "073 93", RoleId = 3, ShortDescription = "repellat", Site = "http://gussie.com" },
                        new { Id = 10, Address = "05287 Brown Mission, Littleburgh, Belize", BossName = "Johnathan", Email = "Lacy_DuBuque@yahoo.com", FullDescription = "Nulla quis quo ad enim maxime nemo.", Name = "Company № 543", Password = "QYLsC0KuPl", Phone = "073 4788", RoleId = 1, ShortDescription = "asperiores", Site = "http://ethelyn.net" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.EducationPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FacultyId")
                        .HasColumnName("FACULTY_ID");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnName("FINISH_DATE")
                        .HasColumnType("date");

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.Property<int>("SchoolId")
                        .HasColumnName("SCHOOL_ID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("START_DATE")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("ResumeId");

                    b.HasIndex("SchoolId");

                    b.ToTable("EDUCATION_PERIODS");

                    b.HasData(
                        new { Id = 55, FacultyId = 10, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 40, SchoolId = 6, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 56, FacultyId = 6, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 40, SchoolId = 2, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 57, FacultyId = 9, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 40, SchoolId = 5, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 58, FacultyId = 8, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 40, SchoolId = 2, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 59, FacultyId = 4, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 40, SchoolId = 10, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 60, FacultyId = 4, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 40, SchoolId = 8, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 61, FacultyId = 8, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 40, SchoolId = 1, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 62, FacultyId = 9, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 40, SchoolId = 7, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 63, FacultyId = 8, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 40, SchoolId = 6, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 64, FacultyId = 10, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 40, SchoolId = 10, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 111, FacultyId = 4, FinishDate = new DateTime(2005, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 46, SchoolId = 8, StartDate = new DateTime(2002, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 112, FacultyId = 2, FinishDate = new DateTime(2007, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 46, SchoolId = 5, StartDate = new DateTime(2004, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnName("COMPANY_NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnName("FINISH_DATE")
                        .HasColumnType("date");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnName("POSITION")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("START_DATE")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("EXPERIENCES");

                    b.HasData(
                        new { Id = 44, CompanyName = "Dewayne Powlowski", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Rem nihil iure at inventore consequuntur qui.", ResumeId = 40, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 45, CompanyName = "Eldon Kemmer", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Consequuntur tempore assumenda distinctio.", ResumeId = 40, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 46, CompanyName = "Desiree Bruen", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Dolorem odio deserunt rerum perferendis libero.", ResumeId = 40, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 47, CompanyName = "Otto Schamberger", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Velit nostrum aut vitae pariatur repellat pariatur et.", ResumeId = 40, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 48, CompanyName = "Elinore Lang", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Et illum odit optio.", ResumeId = 40, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 49, CompanyName = "Fausto Hettinger", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Culpa nobis sunt.", ResumeId = 40, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 50, CompanyName = "Santina D'Amore", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Repellendus autem sit at laboriosam earum accusamus explicabo qui consequuntur.", ResumeId = 40, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 51, CompanyName = "Reid Russel", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Ipsa voluptates vel voluptates est earum omnis provident ipsam.", ResumeId = 40, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 52, CompanyName = "Russ Jones", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Aspernatur excepturi quisquam dolorem non cum quia et illo.", ResumeId = 40, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 53, CompanyName = "Irwin Cummings", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Harum quisquam delectus sunt asperiores.", ResumeId = 40, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 65, CompanyName = "Triomed", FinishDate = new DateTime(2018, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Surgeon", ResumeId = 46, StartDate = new DateTime(2008, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_FACULTIES_NAME");

                    b.ToTable("FACULTIES");

                    b.HasData(
                        new { Id = 1, Name = "Computer Science" },
                        new { Id = 2, Name = "Software Engineering" },
                        new { Id = 3, Name = "Applied Mathematics" },
                        new { Id = 4, Name = "Foreign Languages" },
                        new { Id = 5, Name = "International Relationships" },
                        new { Id = 6, Name = "Economics" },
                        new { Id = 7, Name = "Design" },
                        new { Id = 8, Name = "Faculty of Law" },
                        new { Id = 9, Name = "Marketing" },
                        new { Id = 10, Name = "Journalism" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.FavoriteVacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId")
                        .HasColumnName("USER_ID");

                    b.Property<int>("VacancyId")
                        .HasColumnName("VACANCY_ID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VacancyId");

                    b.ToTable("FAVORITE_VACANCIES");

                    b.HasData(
                        new { Id = 80, UserId = 40, VacancyId = 28 },
                        new { Id = 81, UserId = 37, VacancyId = 27 },
                        new { Id = 82, UserId = 46, VacancyId = 30 },
                        new { Id = 83, UserId = 46, VacancyId = 22 },
                        new { Id = 84, UserId = 33, VacancyId = 25 },
                        new { Id = 85, UserId = 46, VacancyId = 25 },
                        new { Id = 86, UserId = 32, VacancyId = 21 },
                        new { Id = 87, UserId = 46, VacancyId = 25 },
                        new { Id = 88, UserId = 31, VacancyId = 29 },
                        new { Id = 89, UserId = 38, VacancyId = 21 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_LANGUAGES_NAME");

                    b.ToTable("LANGUAGES");

                    b.HasData(
                        new { Id = 1, Name = "English" },
                        new { Id = 2, Name = "Ukrainian" },
                        new { Id = 3, Name = "Russian" },
                        new { Id = 4, Name = "Polish" },
                        new { Id = 5, Name = "Greek" },
                        new { Id = 6, Name = "Japanese" },
                        new { Id = 7, Name = "Spanish" },
                        new { Id = 8, Name = "Chinese" },
                        new { Id = 9, Name = "German" },
                        new { Id = 10, Name = "Roman" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Recruiter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnName("COMPANY_ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FIRST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LAST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte[]>("LogoData")
                        .HasColumnName("LOGO_DATA");

                    b.Property<string>("LogoMimetype")
                        .HasColumnName("LOGO_MIMETYPE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_RECRUITERS_EMAIL");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_RECRUITERS_PHONE")
                        .HasFilter("[PHONE] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("RECRUITERS");

                    b.HasData(
                        new { Id = 11, CompanyId = 10, Email = "Bradley_Schamberger96@hotmail.com", FirstName = "Cordelia", LastName = "Steuber", Password = "9hlsxcFGxX", Phone = "073 5591", RoleId = 3 },
                        new { Id = 12, CompanyId = 1, Email = "Lula26@hotmail.com", FirstName = "Lloyd", LastName = "Waelchi", Password = "nRibLGSsTc", Phone = "073 7163", RoleId = 3 },
                        new { Id = 13, CompanyId = 1, Email = "Grayce26@gmail.com", FirstName = "Edna", LastName = "Legros", Password = "l83XzOMSpe", Phone = "073 274", RoleId = 4 },
                        new { Id = 14, CompanyId = 3, Email = "Shanelle42@yahoo.com", FirstName = "Zane", LastName = "Hyatt", Password = "csKs9PJ8yw", Phone = "073 1308", RoleId = 4 },
                        new { Id = 15, CompanyId = 1, Email = "Elisabeth40@yahoo.com", FirstName = "Darius", LastName = "Lemke", Password = "t5wctqpYU5", Phone = "073 8425", RoleId = 1 },
                        new { Id = 16, CompanyId = 4, Email = "Cornelius_Schmitt2@yahoo.com", FirstName = "Curtis", LastName = "Mante", Password = "DNWNMUWebp", Phone = "073 6813", RoleId = 4 },
                        new { Id = 17, CompanyId = 2, Email = "Arnulfo_Moen@yahoo.com", FirstName = "Lonnie", LastName = "Witting", Password = "HqHAaXSNVA", Phone = "073 6191", RoleId = 2 },
                        new { Id = 18, CompanyId = 6, Email = "Gonzalo.Wilkinson@hotmail.com", FirstName = "Makenzie", LastName = "Bartell", Password = "HfhOd_bZab", Phone = "073 9929", RoleId = 3 },
                        new { Id = 19, CompanyId = 5, Email = "Vergie.Skiles@yahoo.com", FirstName = "Fiona", LastName = "Schmeler", Password = "ikOZ8nRSuA", Phone = "073 6359", RoleId = 4 },
                        new { Id = 20, CompanyId = 1, Email = "May.Jenkins63@hotmail.com", FirstName = "Vidal", LastName = "Jenkins", Password = "PSlkvww3Gr", Phone = "073 3057", RoleId = 4 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Resume", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Courses")
                        .HasColumnName("COURSES")
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Facebook")
                        .HasColumnName("FACEBOOK")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FamilyState")
                        .HasColumnName("FAMILY_STATE")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Github")
                        .HasColumnName("GITHUB")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Instagram")
                        .HasColumnName("INSTAGRAM")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("KeySkills")
                        .IsRequired()
                        .HasColumnName("KEY_SKILLS")
                        .IsUnicode(false);

                    b.Property<string>("Linkedin")
                        .HasColumnName("LINKEDIN")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Skype")
                        .HasColumnName("SKYPE")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("SoftSkills")
                        .IsRequired()
                        .HasColumnName("SOFT_SKILLS")
                        .IsUnicode(false);

                    b.Property<int>("WorkAreaId")
                        .HasColumnName("WORK_AREA_ID");

                    b.HasKey("Id");

                    b.HasIndex("Facebook")
                        .IsUnique()
                        .HasName("UQ_RESUMES_FACEBOOK")
                        .HasFilter("[FACEBOOK] IS NOT NULL");

                    b.HasIndex("Instagram")
                        .IsUnique()
                        .HasName("UQ_RESUMES_INSTAGRAM")
                        .HasFilter("[INSTAGRAM] IS NOT NULL");

                    b.HasIndex("Linkedin")
                        .IsUnique()
                        .HasName("UQ_RESUMES_LINKEDIN")
                        .HasFilter("[LINKEDIN] IS NOT NULL");

                    b.HasIndex("Skype")
                        .IsUnique()
                        .HasName("UQ_RESUMES_SKYPE")
                        .HasFilter("[SKYPE] IS NOT NULL");

                    b.HasIndex("WorkAreaId");

                    b.ToTable("RESUMES");

                    b.HasData(
                        new { Id = 40, Courses = "Aut quia id labore eligendi veniam.", CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Facebook = "https://delbert.name", FamilyState = "Dolorem.", Github = "http://kameron.com", Instagram = "https://lucy.net", KeySkills = "Quidem nisi qui sequi ipsam.", Linkedin = "http://edwin.com", ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Skype = "https://shane.com", SoftSkills = "Perspiciatis rerum dolore architecto sequi.", WorkAreaId = 1 },
                        new { Id = 46, Courses = "Certification training", CreateDate = new DateTime(2018, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), Facebook = "www.facebook.com", FamilyState = "not married", KeySkills = "hardworking, persuasive", SoftSkills = "plastic surgery", WorkAreaId = 3 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.ResumeLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId")
                        .HasColumnName("LANGUAGE_ID");

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ResumeId");

                    b.ToTable("RESUME_LANGUAGES");

                    b.HasData(
                        new { Id = 67, LanguageId = 1, ResumeId = 40 },
                        new { Id = 68, LanguageId = 2, ResumeId = 40 },
                        new { Id = 69, LanguageId = 7, ResumeId = 40 },
                        new { Id = 70, LanguageId = 4, ResumeId = 40 },
                        new { Id = 71, LanguageId = 5, ResumeId = 40 },
                        new { Id = 72, LanguageId = 1, ResumeId = 40 },
                        new { Id = 73, LanguageId = 2, ResumeId = 40 },
                        new { Id = 74, LanguageId = 10, ResumeId = 40 },
                        new { Id = 75, LanguageId = 7, ResumeId = 40 },
                        new { Id = 76, LanguageId = 10, ResumeId = 40 },
                        new { Id = 111, LanguageId = 10, ResumeId = 46 },
                        new { Id = 112, LanguageId = 5, ResumeId = 46 },
                        new { Id = 113, LanguageId = 7, ResumeId = 46 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_ROLES_NAME");

                    b.ToTable("ROLES");

                    b.HasData(
                        new { Id = 1, Name = "admin" },
                        new { Id = 2, Name = "user" },
                        new { Id = 3, Name = "company" },
                        new { Id = 4, Name = "recruiter" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.School", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_SCHOOLS_NAME");

                    b.ToTable("SCHOOLS");

                    b.HasData(
                        new { Id = 1, Name = "Chicago State University" },
                        new { Id = 2, Name = "Harvard University" },
                        new { Id = 3, Name = "Prinston University" },
                        new { Id = 4, Name = "Berklee College Of Arts" },
                        new { Id = 5, Name = "Stanford University" },
                        new { Id = 6, Name = "Massachusetts Institute of Technology" },
                        new { Id = 7, Name = "Columbia University" },
                        new { Id = 8, Name = "New York University" },
                        new { Id = 9, Name = "University of Arizona" },
                        new { Id = 10, Name = "Yale University" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthData")
                        .HasColumnName("BIRTH_DATA")
                        .HasColumnType("date");

                    b.Property<int>("CityId")
                        .HasColumnName("CITY_ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FIRST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LAST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<byte[]>("PhotoData")
                        .HasColumnName("PHOTO_DATA");

                    b.Property<string>("PhotoMimeType")
                        .HasColumnName("PHOTO_MIME_TYPE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("RefreshToken")
                        .HasColumnName("REFRESH_TOKEN")
                        .HasMaxLength(70)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.Property<string>("Sex")
                        .HasColumnName("SEX")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_USERS_EMAIL");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_USERS_PHONE")
                        .HasFilter("[PHONE] IS NOT NULL");

                    b.HasIndex("RefreshToken")
                        .IsUnique()
                        .HasName("UQ_USERS_REFRESH_TOKEN")
                        .HasFilter("[REFRESH_TOKEN] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("USERS");

                    b.HasData(
                        new { Id = 31, BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 10, Email = "Amina_Kuhlman15@hotmail.com", FirstName = "Tina", LastName = "Hintz", Password = "GHA67zSjVx", Phone = "073 7092", RoleId = 2, Sex = "f" },
                        new { Id = 32, BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 11, Email = "Abelardo.Lakin53@hotmail.com", FirstName = "Estevan", LastName = "Haag", Password = "t89ZksGUyJ", Phone = "073 8490", RoleId = 2, Sex = "m" },
                        new { Id = 33, BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 6, Email = "Krista2@gmail.com", FirstName = "Rae", LastName = "White", Password = "nUhH4HJpqn", Phone = "073 7082", RoleId = 4, Sex = "f" },
                        new { Id = 34, BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 12, Email = "Darron_Rowe39@yahoo.com", FirstName = "Lionel", LastName = "Kemmer", Password = "bAjgYvRokn", Phone = "073 9623", RoleId = 3, Sex = "f" },
                        new { Id = 35, BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 2, Email = "Carolanne45@gmail.com", FirstName = "Aryanna", LastName = "Thompson", Password = "WlpFra1bm5", Phone = "073 3092", RoleId = 1, Sex = "m" },
                        new { Id = 36, BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 5, Email = "Hank.Cummings51@yahoo.com", FirstName = "Micah", LastName = "Kihn", Password = "EmYDQmtHxC", Phone = "073 4333", RoleId = 1, Sex = "m" },
                        new { Id = 37, BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 4, Email = "Mekhi_Reinger@hotmail.com", FirstName = "Destinee", LastName = "Gorczany", Password = "v0D3DnZuS5", Phone = "073 6569", RoleId = 1, Sex = "m" },
                        new { Id = 38, BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 7, Email = "Juvenal95@yahoo.com", FirstName = "Nikita", LastName = "Klocko", Password = "63sIliGs3s", Phone = "073 2216", RoleId = 2, Sex = "m" },
                        new { Id = 39, BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 6, Email = "Marilyne_Robel92@yahoo.com", FirstName = "Marlon", LastName = "Sauer", Password = "8xl1zHgoGe", Phone = "073 8719", RoleId = 2, Sex = "m" },
                        new { Id = 40, BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 6, Email = "Kitty39@yahoo.com", FirstName = "Novella", LastName = "Monahan", Password = "NZEOPQM75q", Phone = "073 3444", RoleId = 2, Sex = "m" },
                        new { Id = 46, BirthData = new DateTime(1995, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 8, Email = "andr@gmail.com", FirstName = "Andrew", LastName = "Felton", Password = "qwerty", Phone = "0502758765", RoleId = 2, Sex = "M" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BePlus")
                        .HasColumnName("BE_PLUS")
                        .IsUnicode(false);

                    b.Property<int>("CityId")
                        .HasColumnName("CITY_ID");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("DESCRIPTION")
                        .IsUnicode(false);

                    b.Property<string>("FullPartTime")
                        .HasColumnName("FULL_PART_TIME")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<bool?>("IsChecked")
                        .HasColumnName("IS_CHECKED");

                    b.Property<DateTime?>("ModDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Offering")
                        .IsRequired()
                        .HasColumnName("OFFERING")
                        .IsUnicode(false);

                    b.Property<int>("RecruiterId")
                        .HasColumnName("RECRUITER_ID");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnName("REQUIREMENTS")
                        .IsUnicode(false);

                    b.Property<decimal?>("Salary")
                        .HasColumnName("SALARY")
                        .HasColumnType("money");

                    b.Property<int>("WorkAreaId")
                        .HasColumnName("WORK_AREA_ID");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("RecruiterId");

                    b.HasIndex("WorkAreaId");

                    b.ToTable("VACANCIES");

                    b.HasData(
                        new { Id = 21, BePlus = "Placeat explicabo perferendis quod aut hic doloribus.", CityId = 10, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Direct", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "National Interactions Specialist", Offering = "Jeffry Hettinger", RecruiterId = 18, Requirements = "Asperiores nihil eaque eos doloribus iure iure sequi.", Salary = 1000m, WorkAreaId = 3 },
                        new { Id = 22, BePlus = "Porro voluptatem sunt nemo voluptatem at.", CityId = 11, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Regional", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Future Identity Assistant", Offering = "Juston Leuschke", RecruiterId = 20, Requirements = "Facilis qui illum voluptate qui illum consequatur et et sint.", Salary = 1000m, WorkAreaId = 8 },
                        new { Id = 23, BePlus = "Architecto eveniet earum.", CityId = 12, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Forward", FullPartTime = "Part-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Customer Integration Orchestrator", Offering = "Gardner Gibson", RecruiterId = 17, Requirements = "Dolorum iste doloribus magnam nulla harum est laboriosam enim velit.", Salary = 1000m, WorkAreaId = 1 },
                        new { Id = 24, BePlus = "Harum aut ut quae expedita eveniet quo quis voluptas.", CityId = 2, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Future", FullPartTime = "Part-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Principal Research Assistant", Offering = "Kasey Farrell", RecruiterId = 12, Requirements = "A dolor voluptatem culpa minus consequatur accusantium exercitationem aut.", Salary = 1000m, WorkAreaId = 2 },
                        new { Id = 25, BePlus = "Omnis et qui.", CityId = 12, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Internal", FullPartTime = "Part-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Chief Intranet Planner", Offering = "Lucie Kling", RecruiterId = 18, Requirements = "Laborum illum qui natus aut dolorum.", Salary = 1000m, WorkAreaId = 1 },
                        new { Id = 26, BePlus = "Sequi velit eaque aperiam quaerat eum aliquid et eaque.", CityId = 5, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Internal", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "National Integration Strategist", Offering = "Orville Gerhold", RecruiterId = 13, Requirements = "Repellat aspernatur iure vel dolorum expedita explicabo est qui est.", Salary = 1000m, WorkAreaId = 12 },
                        new { Id = 27, BePlus = "Repudiandae beatae dolorum sunt delectus veniam aut officia.", CityId = 12, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Central", FullPartTime = "Part-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Customer Functionality Orchestrator", Offering = "Juliet Quitzon", RecruiterId = 19, Requirements = "Nulla minus praesentium dolorum labore sit quibusdam molestiae ab.", Salary = 1000m, WorkAreaId = 5 },
                        new { Id = 28, BePlus = "Quibusdam labore qui nihil perferendis molestias.", CityId = 10, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Corporate", FullPartTime = "Full-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Regional Response Liaison", Offering = "Henderson Wiegand", RecruiterId = 12, Requirements = "Inventore corporis quas delectus.", Salary = 1000m, WorkAreaId = 5 },
                        new { Id = 29, BePlus = "Repellendus necessitatibus reprehenderit et quis voluptate fugit.", CityId = 9, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Human", FullPartTime = "Part-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Investor Metrics Technician", Offering = "Shemar Morissette", RecruiterId = 15, Requirements = "Itaque assumenda est et.", Salary = 1000m, WorkAreaId = 1 },
                        new { Id = 30, BePlus = "Esse voluptatem accusantium et corporis voluptas.", CityId = 2, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Future", FullPartTime = "Full-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Senior Accountability Architect", Offering = "Keely Cronin", RecruiterId = 17, Requirements = "Ut voluptatem cupiditate voluptas.", Salary = 1000m, WorkAreaId = 2 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.WorkArea", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<byte[]>("PhotoData")
                        .HasColumnName("PHOTO_DATA");

                    b.Property<string>("PhotoMimetype")
                        .HasColumnName("PHOTO_MIMETYPE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_WORK_AREAS_NAME");

                    b.ToTable("WORK_AREAS");

                    b.HasData(
                        new { Id = 1, Name = "IT" },
                        new { Id = 2, Name = "Sales" },
                        new { Id = 3, Name = "Medicine" },
                        new { Id = 4, Name = "Marketing and Advertising" },
                        new { Id = 5, Name = "Law and Politics" },
                        new { Id = 6, Name = "Science" },
                        new { Id = 7, Name = "Tourism" },
                        new { Id = 8, Name = "Arts" },
                        new { Id = 9, Name = "Insurance" },
                        new { Id = 10, Name = "Real Estate" },
                        new { Id = 11, Name = "Finances" },
                        new { Id = 12, Name = "Media" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Company", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Companies")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_COMPANIES_TO_ROLES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.EducationPeriod", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Faculty", "Faculty")
                        .WithMany("EducationPeriods")
                        .HasForeignKey("FacultyId")
                        .HasConstraintName("FK_PK_EDUCATION_PERIODS_TO_FACULTIES");

                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("EducationPeriods")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_PK_EDUCATION_PERIODS_TO_RESUMES");

                    b.HasOne("JobList.DataAccess.Entities.School", "School")
                        .WithMany("EducationPeriods")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_PK_EDUCATION_PERIODS_TO_SCHOOLS");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Experience", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("Experiences")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_EXPERIENCES_TO_RESUMES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.FavoriteVacancy", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.User", "User")
                        .WithMany("FavoriteVacancies")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_FAVORITE_VACANCIES_TO_USERS");

                    b.HasOne("JobList.DataAccess.Entities.Vacancy", "Vacancy")
                        .WithMany("FavoriteVacancies")
                        .HasForeignKey("VacancyId")
                        .HasConstraintName("FK_FAVORITE_VACANCIES_TO_VACANCIES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Recruiter", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Company", "Company")
                        .WithMany("Recruiters")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_RECRUITERS_TO_COMPANIES");

                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Recruiters")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RECRUITERS_TO_ROLES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Resume", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.User", "User")
                        .WithOne("Resumes")
                        .HasForeignKey("JobList.DataAccess.Entities.Resume", "Id")
                        .HasConstraintName("FK_RESUMES_TO_USERS");

                    b.HasOne("JobList.DataAccess.Entities.WorkArea", "WorkArea")
                        .WithMany("Resumes")
                        .HasForeignKey("WorkAreaId")
                        .HasConstraintName("FK_RESUMES_TO_WORKAREA");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.ResumeLanguage", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Language", "Language")
                        .WithMany("ResumeLanguages")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_PK_RESUME_LANGUAGES_TO_LANGUAGES");

                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("ResumeLanguages")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_PK_RESUME_LANGUAGES_TO_RESUMES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.User", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_USERS_TO_CITIES");

                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_USERS_TO_ROLES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Vacancy", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.City", "City")
                        .WithMany("Vacancies")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_VACANCIES_TO_CITIES");

                    b.HasOne("JobList.DataAccess.Entities.Recruiter", "Recruiter")
                        .WithMany("Vacancies")
                        .HasForeignKey("RecruiterId")
                        .HasConstraintName("FK_VACANCIES_TO_RECRUITERS");

                    b.HasOne("JobList.DataAccess.Entities.WorkArea", "WorkArea")
                        .WithMany("Vacancies")
                        .HasForeignKey("WorkAreaId")
                        .HasConstraintName("FK_VACANCIES_TO_WORK_AREAS");
                });
#pragma warning restore 612, 618
        }
    }
}
