// <auto-generated />
using System;
using JobList.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JobList.DataAccess.Migrations
{
    [DbContext(typeof(JobListDbContext))]
    partial class JobListDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JobList.DataAccess.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_CITIES_NAME");

                    b.ToTable("CITIES");

                    b.HasData(
                        new { Id = 1, Name = "Lviv" },
                        new { Id = 2, Name = "Kyiv" },
                        new { Id = 3, Name = "Dnipro" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("ADDRESS")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("BossName")
                        .IsRequired()
                        .HasColumnName("BOSS_NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnName("FULL_DESCRIPTION")
                        .IsUnicode(false);

                    b.Property<byte[]>("LogoData")
                        .HasColumnName("LOGO_DATA");

                    b.Property<string>("LogoMimetype")
                        .HasColumnName("LOGO_MIMETYPE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.Property<string>("ShortDescription")
                        .HasColumnName("SHORT_DESCRIPTION")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Site")
                        .HasColumnName("SITE")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_ADDRESS");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_EMAIL");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_NAME");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_PHONE");

                    b.HasIndex("RoleId");

                    b.ToTable("COMPANIES");

                    b.HasData(
                        new { Id = 1, Address = "161 Laurine Ports, Monserratmouth, Rwanda", BossName = "Ludie", Email = "Reinhold_Schimmel66@gmail.com", FullDescription = "Qui doloribus qui libero.", Name = "Company № 832", Password = "VSEm34uDiT", Phone = "073 6449", RoleId = 2, ShortDescription = "nihil", Site = "https://briana.info" },
                        new { Id = 2, Address = "958 Bayer Crest, West Brennaview, Austria", BossName = "Lazaro", Email = "Hildegard86@yahoo.com", FullDescription = "Impedit magnam ex.", Name = "Company № 213", Password = "WdpB2WG5kr", Phone = "073 6007", RoleId = 1, ShortDescription = "maxime", Site = "http://fredy.biz" },
                        new { Id = 3, Address = "3799 Fletcher Shoal, Carrollview, Democratic People's Republic of Korea", BossName = "Annabell", Email = "Mervin73@gmail.com", FullDescription = "Perspiciatis accusantium quis rem dolores.", Name = "Company № 664", Password = "rWX75tmtEk", Phone = "073 4121", RoleId = 1, ShortDescription = "quia", Site = "http://marilou.info" },
                        new { Id = 4, Address = "7948 Trace Drive, Orieland, Canada", BossName = "Tabitha", Email = "Adam.Hickle84@yahoo.com", FullDescription = "Quo mollitia nobis ullam saepe itaque sit tempora nemo.", Name = "Company № 46", Password = "XcvBlqAXTL", Phone = "073 5053", RoleId = 2, ShortDescription = "et", Site = "http://alfred.net" },
                        new { Id = 5, Address = "0534 Edwina Hills, Abernathyton, Barbados", BossName = "Karen", Email = "Linnea_Block@yahoo.com", FullDescription = "Ex sit inventore est dignissimos dolor quaerat et.", Name = "Company № 230", Password = "LfOjv9pUuT", Phone = "073 7243", RoleId = 2, ShortDescription = "ut", Site = "https://kellie.info" },
                        new { Id = 6, Address = "188 Quigley Springs, Smithmouth, Suriname", BossName = "Mathias", Email = "Jennings65@yahoo.com", FullDescription = "Delectus fuga est aliquam ut in veniam.", Name = "Company № 984", Password = "s8iKdDw4BD", Phone = "073 608", RoleId = 1, ShortDescription = "id", Site = "http://claudie.org" },
                        new { Id = 7, Address = "96985 Hyman Way, North Kelvin, Turkey", BossName = "Arjun", Email = "Nikita9@hotmail.com", FullDescription = "Eum ratione placeat nulla praesentium dolore sed culpa.", Name = "Company № 883", Password = "GnePxPG8fx", Phone = "073 3894", RoleId = 1, ShortDescription = "ex", Site = "https://keshawn.biz" },
                        new { Id = 8, Address = "8757 Norbert Ranch, Armstrongtown, Cayman Islands", BossName = "Curt", Email = "Verona31@gmail.com", FullDescription = "Accusamus quo et.", Name = "Company № 145", Password = "RhF1SD6DhT", Phone = "073 2124", RoleId = 1, ShortDescription = "ut", Site = "https://effie.com" },
                        new { Id = 9, Address = "67006 Runte Place, Goldnerfurt, Reunion", BossName = "Neha", Email = "Mikel54@yahoo.com", FullDescription = "Iure commodi molestiae sit aspernatur sunt voluptates alias.", Name = "Company № 147", Password = "BdX4IqF8EX", Phone = "073 579", RoleId = 1, ShortDescription = "recusandae", Site = "https://lori.biz" },
                        new { Id = 10, Address = "2692 Magdalen Key, Port Ayla, Nauru", BossName = "Rhoda", Email = "Erwin.Ritchie86@yahoo.com", FullDescription = "Aspernatur doloremque facere laudantium nihil quidem.", Name = "Company № 773", Password = "0ir7jufMq2", Phone = "073 9064", RoleId = 1, ShortDescription = "quis", Site = "http://bridie.org" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.EducationPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FinishDate")
                        .HasColumnName("FINISH_DATE")
                        .HasColumnType("date");

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.Property<int>("SchoolId")
                        .HasColumnName("SCHOOL_ID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("START_DATE")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.HasIndex("SchoolId");

                    b.ToTable("EDUCATION_PERIODS");

                    b.HasData(
                        new { Id = 63, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 44, SchoolId = 3, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 64, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 44, SchoolId = 1, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 65, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 44, SchoolId = 1, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 66, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 42, SchoolId = 2, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 67, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 44, SchoolId = 3, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 68, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 44, SchoolId = 2, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 69, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 42, SchoolId = 2, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 70, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 44, SchoolId = 3, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 71, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 44, SchoolId = 1, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 72, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 44, SchoolId = 1, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnName("COMPANY_NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnName("FINISH_DATE")
                        .HasColumnType("date");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnName("POSITION")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("START_DATE")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("EXPERIENCES");

                    b.HasData(
                        new { Id = 53, CompanyName = "Domenica Herman", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Molestias nam quisquam possimus explicabo.", ResumeId = 42, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 54, CompanyName = "Billy Nicolas", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Architecto harum fuga quis odit.", ResumeId = 44, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 55, CompanyName = "Gregg Lebsack", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Quasi excepturi voluptatum amet impedit consequatur dolorem qui.", ResumeId = 42, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 56, CompanyName = "Brennon Sipes", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Quis at earum et aliquam qui dolore quo quidem.", ResumeId = 44, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 57, CompanyName = "Tanya Dicki", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Voluptatibus quo pariatur omnis earum.", ResumeId = 44, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 58, CompanyName = "Bonita Hermann", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Adipisci voluptas quibusdam quia tenetur.", ResumeId = 42, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 59, CompanyName = "Tony Hilll", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Maiores aut quam temporibus dolor nobis officiis at et sequi.", ResumeId = 44, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 60, CompanyName = "Angel Herzog", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Quis eveniet qui non aut delectus eius.", ResumeId = 42, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 61, CompanyName = "Mercedes Kutch", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Expedita aspernatur nihil recusandae et saepe et enim fugiat molestiae.", ResumeId = 42, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 62, CompanyName = "Saul Dickinson", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Dolorem rerum sunt.", ResumeId = 44, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("SchoolId")
                        .HasColumnName("SCHOOL_ID");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("FACULTIES");

                    b.HasData(
                        new { Id = 11, Name = "Computer Science", SchoolId = 3 },
                        new { Id = 12, Name = "Software Engineering", SchoolId = 2 },
                        new { Id = 13, Name = "Computer Science", SchoolId = 3 },
                        new { Id = 14, Name = "Applied Mathematics", SchoolId = 1 },
                        new { Id = 15, Name = "Software Engineering", SchoolId = 1 },
                        new { Id = 16, Name = "Applied Mathematics", SchoolId = 2 },
                        new { Id = 17, Name = "Software Engineering", SchoolId = 1 },
                        new { Id = 18, Name = "Computer Science", SchoolId = 2 },
                        new { Id = 19, Name = "Applied Mathematics", SchoolId = 1 },
                        new { Id = 20, Name = "Software Engineering", SchoolId = 2 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.FavoriteVacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId")
                        .HasColumnName("USER_ID");

                    b.Property<int>("VacancyId")
                        .HasColumnName("VACANCY_ID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VacancyId");

                    b.ToTable("FAVORITE_VACANCIES");

                    b.HasData(
                        new { Id = 83, UserId = 47, VacancyId = 36 },
                        new { Id = 84, UserId = 50, VacancyId = 31 },
                        new { Id = 85, UserId = 42, VacancyId = 39 },
                        new { Id = 86, UserId = 43, VacancyId = 34 },
                        new { Id = 87, UserId = 44, VacancyId = 40 },
                        new { Id = 88, UserId = 46, VacancyId = 40 },
                        new { Id = 89, UserId = 42, VacancyId = 38 },
                        new { Id = 90, UserId = 48, VacancyId = 40 },
                        new { Id = 91, UserId = 45, VacancyId = 39 },
                        new { Id = 92, UserId = 46, VacancyId = 34 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_LANGUAGES_NAME");

                    b.ToTable("LANGUAGES");

                    b.HasData(
                        new { Id = 1, Name = "English" },
                        new { Id = 2, Name = "Ukrainian" },
                        new { Id = 3, Name = "Russian" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Recruiter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnName("COMPANY_ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FIRST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LAST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_RECRUITERS_EMAIL");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_RECRUITERS_PHONE");

                    b.HasIndex("RoleId");

                    b.ToTable("RECRUITERS");

                    b.HasData(
                        new { Id = 21, CompanyId = 6, Email = "Jessika87@yahoo.com", FirstName = "Lewis", LastName = "Ward", Password = "H9yqDZBF43", Phone = "073 8169", RoleId = 2 },
                        new { Id = 22, CompanyId = 9, Email = "Madisen_Brekke@hotmail.com", FirstName = "Leonard", LastName = "Kozey", Password = "EdEuasUoPf", Phone = "073 1722", RoleId = 2 },
                        new { Id = 23, CompanyId = 7, Email = "Amaya21@gmail.com", FirstName = "Don", LastName = "Lemke", Password = "2Mht3s5LdQ", Phone = "073 8631", RoleId = 2 },
                        new { Id = 24, CompanyId = 6, Email = "Jerel_Mante83@hotmail.com", FirstName = "Fredrick", LastName = "Feeney", Password = "wiIyaLXCuA", Phone = "073 6659", RoleId = 1 },
                        new { Id = 25, CompanyId = 9, Email = "Vincent21@yahoo.com", FirstName = "Antonina", LastName = "Nienow", Password = "_vmOr8k9Px", Phone = "073 4579", RoleId = 1 },
                        new { Id = 26, CompanyId = 3, Email = "Cooper5@gmail.com", FirstName = "Benedict", LastName = "Sawayn", Password = "_K877bRQJm", Phone = "073 1220", RoleId = 2 },
                        new { Id = 27, CompanyId = 6, Email = "Pamela.Lemke27@yahoo.com", FirstName = "Neil", LastName = "Mueller", Password = "xEyuYyhOar", Phone = "073 8439", RoleId = 1 },
                        new { Id = 28, CompanyId = 3, Email = "Bryce.Leffler@hotmail.com", FirstName = "Derrick", LastName = "Metz", Password = "MjBpxgMCE3", Phone = "073 8934", RoleId = 1 },
                        new { Id = 29, CompanyId = 1, Email = "Collin_Ledner@yahoo.com", FirstName = "Haylie", LastName = "Medhurst", Password = "DcExG2ewF1", Phone = "073 3398", RoleId = 1 },
                        new { Id = 30, CompanyId = 5, Email = "Daniela73@yahoo.com", FirstName = "Robb", LastName = "Wehner", Password = "on9yXXCKu7", Phone = "073 8285", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Resume", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Courses")
                        .HasColumnName("COURSES")
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Facebook")
                        .HasColumnName("FACEBOOK")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FamilyState")
                        .HasColumnName("FAMILY_STATE")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Github")
                        .HasColumnName("GITHUB")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Instagram")
                        .HasColumnName("INSTAGRAM")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("KeySkills")
                        .IsRequired()
                        .HasColumnName("KEY_SKILLS")
                        .IsUnicode(false);

                    b.Property<string>("Linkedin")
                        .HasColumnName("LINKEDIN")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Skype")
                        .HasColumnName("SKYPE")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("SoftSkills")
                        .IsRequired()
                        .HasColumnName("SOFT_SKILLS")
                        .IsUnicode(false);

                    b.Property<int>("WorkAreaId")
                        .HasColumnName("WORK_AREA_ID");

                    b.HasKey("Id");

                    b.HasIndex("Facebook")
                        .IsUnique()
                        .HasName("UQ_RESUMES_FACEBOOK")
                        .HasFilter("[FACEBOOK] IS NOT NULL");

                    b.HasIndex("Instagram")
                        .IsUnique()
                        .HasName("UQ_RESUMES_INSTAGRAM")
                        .HasFilter("[INSTAGRAM] IS NOT NULL");

                    b.HasIndex("Linkedin")
                        .IsUnique()
                        .HasName("UQ_RESUMES_LINKEDIN")
                        .HasFilter("[LINKEDIN] IS NOT NULL");

                    b.HasIndex("Skype")
                        .IsUnique()
                        .HasName("UQ_RESUMES_SKYPE")
                        .HasFilter("[SKYPE] IS NOT NULL");

                    b.HasIndex("WorkAreaId");

                    b.ToTable("RESUMES");

                    b.HasData(
                        new { Id = 42, Courses = "Doloribus consequatur velit possimus sint qui accusamus.", CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Facebook = "http://faye.com", FamilyState = "Illum.", Github = "https://randy.biz", Instagram = "https://adelia.name", KeySkills = "Voluptatum aspernatur saepe in quaerat et natus inventore hic magnam.", Linkedin = "http://terence.biz", ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Skype = "https://jude.name", SoftSkills = "Totam tempora qui ad sint ducimus necessitatibus.", WorkAreaId = 1 },
                        new { Id = 44, Courses = "Laboriosam cupiditate officiis.", CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Facebook = "https://rodrigo.biz", FamilyState = "Quia.", Github = "https://ellsworth.net", Instagram = "http://morris.info", KeySkills = "Possimus doloremque dolorem error inventore rem voluptatum magni.", Linkedin = "http://hilma.net", ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Skype = "https://cornell.info", SoftSkills = "Est omnis atque delectus deserunt.", WorkAreaId = 1 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.ResumeLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId")
                        .HasColumnName("LANGUAGE_ID");

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ResumeId");

                    b.ToTable("RESUME_LANGUAGES");

                    b.HasData(
                        new { Id = 73, LanguageId = 1, ResumeId = 44 },
                        new { Id = 74, LanguageId = 3, ResumeId = 44 },
                        new { Id = 75, LanguageId = 3, ResumeId = 44 },
                        new { Id = 76, LanguageId = 1, ResumeId = 44 },
                        new { Id = 77, LanguageId = 2, ResumeId = 44 },
                        new { Id = 78, LanguageId = 1, ResumeId = 44 },
                        new { Id = 79, LanguageId = 2, ResumeId = 42 },
                        new { Id = 80, LanguageId = 3, ResumeId = 44 },
                        new { Id = 81, LanguageId = 3, ResumeId = 44 },
                        new { Id = 82, LanguageId = 1, ResumeId = 44 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_ROLES_NAME");

                    b.ToTable("ROLES");

                    b.HasData(
                        new { Id = 1, Name = "admin" },
                        new { Id = 2, Name = "user" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.School", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_SCHOOLS_NAME");

                    b.ToTable("SCHOOLS");

                    b.HasData(
                        new { Id = 1, Name = "NU LP" },
                        new { Id = 2, Name = "LNU" },
                        new { Id = 3, Name = "KPI" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime>("BirthData")
                        .HasColumnName("BIRTH_DATA")
                        .HasColumnType("date");

                    b.Property<int>("CityId")
                        .HasColumnName("CITY_ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FIRST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LAST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<byte[]>("PhotoData")
                        .HasColumnName("PHOTO_DATA");

                    b.Property<string>("PhotoMimeType")
                        .HasColumnName("PHOTO_MIME_TYPE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.Property<string>("Sex")
                        .HasColumnName("SEX")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_USERS_EMAIL");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_USERS_PHONE")
                        .HasFilter("[PHONE] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("USERS");

                    b.HasData(
                        new { Id = 41, Address = "Talon Estate", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 1, Email = "Dora33@gmail.com", FirstName = "Leanne", LastName = "Connelly", Password = "OJKPPiroRt", Phone = "073 747", RoleId = 2, Sex = "m" },
                        new { Id = 42, Address = "Darius Trafficway", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 1, Email = "Stevie42@hotmail.com", FirstName = "Jarrod", LastName = "Gutkowski", Password = "huDR7bjRP1", Phone = "073 222", RoleId = 1, Sex = "f" },
                        new { Id = 43, Address = "Cole Parkways", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 2, Email = "Kris8@gmail.com", FirstName = "Elsa", LastName = "Wisoky", Password = "ljrohDjQud", Phone = "073 6026", RoleId = 2, Sex = "m" },
                        new { Id = 44, Address = "Marie Crossing", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 3, Email = "Karli_Hamill@gmail.com", FirstName = "Josiah", LastName = "O'Kon", Password = "QeSe7Rwun3", Phone = "073 9582", RoleId = 1, Sex = "m" },
                        new { Id = 45, Address = "Keebler Streets", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 1, Email = "Royal70@yahoo.com", FirstName = "Rosario", LastName = "Kihn", Password = "t4EnqCfoG5", Phone = "073 4951", RoleId = 1, Sex = "m" },
                        new { Id = 46, Address = "Guy Corners", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 3, Email = "Paul_Schaden89@hotmail.com", FirstName = "Alice", LastName = "Lubowitz", Password = "uIApO3UCYO", Phone = "073 3374", RoleId = 1, Sex = "m" },
                        new { Id = 47, Address = "Waters Grove", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 2, Email = "Betty.Friesen@yahoo.com", FirstName = "Jameson", LastName = "Haag", Password = "47MpFsWwl1", Phone = "073 8041", RoleId = 1, Sex = "f" },
                        new { Id = 48, Address = "Eudora Summit", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 2, Email = "Eloise_Borer47@gmail.com", FirstName = "Noel", LastName = "Prosacco", Password = "r3Xuyu83AS", Phone = "073 202", RoleId = 1, Sex = "m" },
                        new { Id = 49, Address = "Lexus Viaduct", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 3, Email = "Clemmie.Turner2@gmail.com", FirstName = "Aliyah", LastName = "Cummings", Password = "MF7YWFiDa3", Phone = "073 8830", RoleId = 2, Sex = "m" },
                        new { Id = 50, Address = "Bednar Ridges", BirthData = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 3, Email = "Marcelo.Muller37@yahoo.com", FirstName = "Raina", LastName = "Kozey", Password = "P6d5Nttho6", Phone = "073 7794", RoleId = 1, Sex = "f" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BePlus")
                        .HasColumnName("BE_PLUS")
                        .IsUnicode(false);

                    b.Property<int>("CityId")
                        .HasColumnName("CITY_ID");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("DESCRIPTION")
                        .IsUnicode(false);

                    b.Property<string>("FullPartTime")
                        .HasColumnName("FULL_PART_TIME")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<bool?>("IsChecked")
                        .HasColumnName("IS_CHECKED");

                    b.Property<DateTime?>("ModDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Offering")
                        .IsRequired()
                        .HasColumnName("OFFERING")
                        .IsUnicode(false);

                    b.Property<int>("RecruiterId")
                        .HasColumnName("RECRUITER_ID");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnName("REQUIREMENTS")
                        .IsUnicode(false);

                    b.Property<decimal?>("Salary")
                        .HasColumnName("SALARY")
                        .HasColumnType("money");

                    b.Property<int>("WorkAreaId")
                        .HasColumnName("WORK_AREA_ID");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("RecruiterId");

                    b.HasIndex("WorkAreaId");

                    b.ToTable("VACANCIES");

                    b.HasData(
                        new { Id = 31, BePlus = "Illo quaerat eos rerum praesentium mollitia totam illo quis recusandae.", CityId = 1, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Global", FullPartTime = "Part-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Direct Web Manager", Offering = "Elvis Hessel", RecruiterId = 30, Requirements = "Sed cupiditate quis doloribus temporibus voluptas rerum eligendi distinctio illum.", Salary = 1000m, WorkAreaId = 3 },
                        new { Id = 32, BePlus = "Consectetur eius non incidunt ipsum quidem et eos maxime deserunt.", CityId = 3, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Product", FullPartTime = "Full-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Investor Applications Facilitator", Offering = "Alden Walker", RecruiterId = 24, Requirements = "Tenetur dolores ut ad voluptatem voluptatem nihil soluta et amet.", Salary = 1000m, WorkAreaId = 3 },
                        new { Id = 33, BePlus = "Autem et id eum nemo labore ut ab.", CityId = 1, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Senior", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Lead Tactics Administrator", Offering = "Jamarcus Harber", RecruiterId = 26, Requirements = "Aspernatur quia a est nemo sit omnis quis similique placeat.", Salary = 1000m, WorkAreaId = 3 },
                        new { Id = 34, BePlus = "Dolor nulla esse voluptate quia omnis.", CityId = 1, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Internal", FullPartTime = "Part-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Internal Factors Producer", Offering = "Ellsworth Gutmann", RecruiterId = 21, Requirements = "Eos consequatur sunt explicabo magnam dolorum et.", Salary = 1000m, WorkAreaId = 3 },
                        new { Id = 35, BePlus = "Debitis totam minus nihil nihil corrupti omnis dignissimos recusandae non.", CityId = 1, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Chief", FullPartTime = "Part-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Chief Interactions Planner", Offering = "Hugh Schulist", RecruiterId = 27, Requirements = "Eius velit molestiae.", Salary = 1000m, WorkAreaId = 3 },
                        new { Id = 36, BePlus = "Earum ut earum deserunt nulla.", CityId = 1, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Direct", FullPartTime = "Part-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Regional Accounts Representative", Offering = "General Becker", RecruiterId = 26, Requirements = "Reprehenderit aperiam et adipisci excepturi enim unde facilis saepe.", Salary = 1000m, WorkAreaId = 3 },
                        new { Id = 37, BePlus = "Quibusdam ipsa omnis quas.", CityId = 1, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "National", FullPartTime = "Full-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Regional Configuration Agent", Offering = "Clement Dare", RecruiterId = 22, Requirements = "Qui ipsa voluptatem excepturi porro sunt atque iusto nam molestias.", Salary = 1000m, WorkAreaId = 2 },
                        new { Id = 38, BePlus = "Pariatur tempora perspiciatis est.", CityId = 2, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Dynamic", FullPartTime = "Part-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "District Markets Officer", Offering = "Walton Mills", RecruiterId = 30, Requirements = "Dolores est suscipit et.", Salary = 1000m, WorkAreaId = 1 },
                        new { Id = 39, BePlus = "Odit occaecati officiis ea ullam reiciendis quia error.", CityId = 1, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Dynamic", FullPartTime = "Part-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "National Quality Consultant", Offering = "Dorothea Lebsack", RecruiterId = 22, Requirements = "Officiis velit magni minima omnis.", Salary = 1000m, WorkAreaId = 3 },
                        new { Id = 40, BePlus = "Vel dolores dolores eligendi voluptas et voluptas corrupti iusto.", CityId = 3, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Dynamic", FullPartTime = "Part-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Lead Interactions Supervisor", Offering = "Herman Turner", RecruiterId = 23, Requirements = "Amet et inventore molestias.", Salary = 1000m, WorkAreaId = 1 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.WorkArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<byte[]>("PhotoData")
                        .HasColumnName("PHOTO_DATA");

                    b.Property<string>("PhotoMimetype")
                        .HasColumnName("PHOTO_MIMETYPE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_WORK_AREAS_NAME");

                    b.ToTable("WORK_AREAS");

                    b.HasData(
                        new { Id = 1, Name = "IT" },
                        new { Id = 2, Name = "Sales" },
                        new { Id = 3, Name = "Medicine" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Company", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Companies")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_COMPANIES_TO_ROLES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.EducationPeriod", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("EducationPeriods")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_PK_EDUCATION_PERIODS_TO_RESUMES");

                    b.HasOne("JobList.DataAccess.Entities.School", "School")
                        .WithMany("EducationPeriods")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_PK_EDUCATION_PERIODS_TO_SCHOOLS");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Experience", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("Experiences")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_EXPERIENCES_TO_RESUMES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Faculty", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.School", "School")
                        .WithMany("Faculties")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_FACULTIES_TO_SCHOOLS");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.FavoriteVacancy", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.User", "User")
                        .WithMany("FavoriteVacancies")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_FAVORITE_VACANCIES_TO_USERS");

                    b.HasOne("JobList.DataAccess.Entities.Vacancy", "Vacancy")
                        .WithMany("FavoriteVacancies")
                        .HasForeignKey("VacancyId")
                        .HasConstraintName("FK_FAVORITE_VACANCIES_TO_VACANCIES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Recruiter", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Company", "Company")
                        .WithMany("Recruiters")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_RECRUITERS_TO_COMPANIES");

                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Recruiters")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RECRUITERS_TO_ROLES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Resume", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.User", "IdNavigation")
                        .WithOne("Resumes")
                        .HasForeignKey("JobList.DataAccess.Entities.Resume", "Id")
                        .HasConstraintName("FK_RESUMES_TO_USERS");

                    b.HasOne("JobList.DataAccess.Entities.WorkArea", "WorkArea")
                        .WithMany("Resumes")
                        .HasForeignKey("WorkAreaId")
                        .HasConstraintName("FK_RESUMES_TO_WORKAREA");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.ResumeLanguage", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Language", "Language")
                        .WithMany("ResumeLanguages")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_PK_RESUME_LANGUAGES_TO_LANGUAGES");

                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("ResumeLanguages")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_PK_RESUME_LANGUAGES_TO_RESUMES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.User", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_USERS_TO_CITIES");

                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_USERS_TO_ROLES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Vacancy", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.City", "City")
                        .WithMany("Vacancies")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_VACANCIES_TO_CITIES");

                    b.HasOne("JobList.DataAccess.Entities.Recruiter", "Recruiter")
                        .WithMany("Vacancies")
                        .HasForeignKey("RecruiterId")
                        .HasConstraintName("FK_VACANCIES_TO_RECRUITERS");

                    b.HasOne("JobList.DataAccess.Entities.WorkArea", "WorkArea")
                        .WithMany("Vacancies")
                        .HasForeignKey("WorkAreaId")
                        .HasConstraintName("FK_VACANCIES_TO_WORK_AREAS");
                });
#pragma warning restore 612, 618
        }
    }
}
