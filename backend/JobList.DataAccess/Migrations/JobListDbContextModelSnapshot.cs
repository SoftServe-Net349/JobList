// <auto-generated />
using System;
using JobList.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JobList.DataAccess.Migrations
{
    [DbContext(typeof(JobListDbContext))]
    partial class JobListDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JobList.DataAccess.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_CITIES_NAME");

                    b.ToTable("CITIES");

                    b.HasData(
                        new { Id = 1, Name = "Lviv" },
                        new { Id = 2, Name = "Kyiv" },
                        new { Id = 3, Name = "Dnipro" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("ADDRESS")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("BossName")
                        .IsRequired()
                        .HasColumnName("BOSS_NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnName("FULL_DESCRIPTION")
                        .IsUnicode(false);

                    b.Property<byte[]>("LogoData")
                        .HasColumnName("LOGO_DATA");

                    b.Property<string>("LogoMimetype")
                        .HasColumnName("LOGO_MIMETYPE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.Property<string>("ShortDescription")
                        .HasColumnName("SHORT_DESCRIPTION")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Site")
                        .HasColumnName("SITE")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_ADDRESS");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_EMAIL");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_NAME");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_PHONE");

                    b.HasIndex("RoleId");

                    b.ToTable("COMPANIES");

                    b.HasData(
                        new { Id = 1, Address = "38347 King Circles, New Lorena, Gibraltar", BossName = "Kadin", Email = "Edison.Kovacek77@hotmail.com", FullDescription = "Neque laborum vel qui ex vitae provident laboriosam.", Name = "Company № 914", Password = "22np1428du", Phone = "073 8145", RoleId = 1, ShortDescription = "voluptatem", Site = "http://candice.org" },
                        new { Id = 2, Address = "0956 Kelton Estates, West Anthonymouth, Oman", BossName = "Calista", Email = "Dino_Howell@yahoo.com", FullDescription = "Fugit ducimus suscipit.", Name = "Company № 20", Password = "vx6l_0YTvg", Phone = "073 9896", RoleId = 1, ShortDescription = "ab", Site = "https://jon.name" },
                        new { Id = 3, Address = "166 Sawayn Shoals, Lake Stella, Saint Vincent and the Grenadines", BossName = "Dante", Email = "Hudson87@gmail.com", FullDescription = "Fugiat sint aliquid dolores voluptatibus.", Name = "Company № 644", Password = "rk8ttnU2nP", Phone = "073 9359", RoleId = 2, ShortDescription = "ea", Site = "http://jalen.biz" },
                        new { Id = 4, Address = "79419 Rempel Glen, West Keonberg, Vanuatu", BossName = "Willa", Email = "Nettie1@yahoo.com", FullDescription = "Eveniet ea debitis expedita consequatur consequatur.", Name = "Company № 396", Password = "Nyfi7cBV2o", Phone = "073 80", RoleId = 1, ShortDescription = "consequatur", Site = "https://eldridge.com" },
                        new { Id = 5, Address = "671 Turner Drive, Port Juwanbury, Slovenia", BossName = "Toni", Email = "Rosalinda_Miller@hotmail.com", FullDescription = "Illum velit ratione itaque aliquid recusandae.", Name = "Company № 356", Password = "F43XlcFKFR", Phone = "073 2323", RoleId = 1, ShortDescription = "doloremque", Site = "https://shane.info" },
                        new { Id = 6, Address = "055 Jewell Village, Willside, Mozambique", BossName = "Delbert", Email = "Easton_Klocko67@hotmail.com", FullDescription = "Non sed sequi est iste ut iste sed sunt.", Name = "Company № 830", Password = "KLOTMdLQzK", Phone = "073 7057", RoleId = 2, ShortDescription = "et", Site = "https://shaina.info" },
                        new { Id = 7, Address = "7200 Lorenzo Prairie, Lakinshire, Hungary", BossName = "Merle", Email = "Elian_Hettinger@yahoo.com", FullDescription = "Aut voluptas velit et aut.", Name = "Company № 881", Password = "gVKDVar_J6", Phone = "073 8114", RoleId = 2, ShortDescription = "cum", Site = "https://shemar.com" },
                        new { Id = 8, Address = "315 Zemlak Lights, West Annabel, Liberia", BossName = "Adella", Email = "Catalina95@hotmail.com", FullDescription = "Numquam molestias et est sit.", Name = "Company № 801", Password = "VWlpTveR6V", Phone = "073 602", RoleId = 2, ShortDescription = "molestiae", Site = "https://sarina.info" },
                        new { Id = 9, Address = "043 Hegmann Circles, Vivienneborough, Denmark", BossName = "Marlin", Email = "Reed.Cronin67@yahoo.com", FullDescription = "Consequuntur accusamus eum.", Name = "Company № 707", Password = "Dq0rz2nbgj", Phone = "073 9071", RoleId = 2, ShortDescription = "corporis", Site = "http://ansel.name" },
                        new { Id = 10, Address = "5613 Beatty Ramp, East Saigemouth, Jamaica", BossName = "Mya", Email = "Bryon_OConnell30@hotmail.com", FullDescription = "Excepturi totam aliquid consequatur error repudiandae nisi libero quasi.", Name = "Company № 219", Password = "aFFLz1wY6a", Phone = "073 4527", RoleId = 2, ShortDescription = "earum", Site = "https://jayce.com" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.EducationPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FinishDate")
                        .HasColumnName("FINISH_DATE")
                        .HasColumnType("date");

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.Property<int>("SchoolId")
                        .HasColumnName("SCHOOL_ID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("START_DATE")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.HasIndex("SchoolId");

                    b.ToTable("EDUCATION_PERIODS");

                    b.HasData(
                        new { Id = 63, FinishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 42, SchoolId = 1, StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 64, FinishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 42, SchoolId = 2, StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 65, FinishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 48, SchoolId = 3, StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 66, FinishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 42, SchoolId = 1, StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 67, FinishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 48, SchoolId = 3, StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 68, FinishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 48, SchoolId = 2, StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 69, FinishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 48, SchoolId = 2, StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 70, FinishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 48, SchoolId = 3, StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 71, FinishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 48, SchoolId = 3, StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 72, FinishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 42, SchoolId = 1, StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnName("COMPANY_NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnName("FINISH_DATE")
                        .HasColumnType("date");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnName("POSITION")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("START_DATE")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("EXPERIENCES");

                    b.HasData(
                        new { Id = 53, CompanyName = "Nat Prosacco", FinishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Saepe earum repellat cum a quidem explicabo sed eius rerum.", ResumeId = 48, StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 54, CompanyName = "America Casper", FinishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Sapiente accusantium porro.", ResumeId = 42, StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 55, CompanyName = "Marcelino Frami", FinishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Eligendi incidunt nihil.", ResumeId = 48, StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 56, CompanyName = "Jordi Douglas", FinishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Et explicabo incidunt maxime rerum tempore delectus sit animi nihil.", ResumeId = 48, StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 57, CompanyName = "Lupe Rowe", FinishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Fugiat autem et.", ResumeId = 42, StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 58, CompanyName = "Robert Kihn", FinishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Ut asperiores nulla architecto praesentium repudiandae velit quo sunt.", ResumeId = 42, StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 59, CompanyName = "Ilene Kerluke", FinishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Exercitationem quia expedita beatae.", ResumeId = 42, StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 60, CompanyName = "Ivah Boyer", FinishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Molestiae nostrum excepturi voluptatem atque ipsa vero vero.", ResumeId = 42, StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 61, CompanyName = "Faye Parisian", FinishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Nesciunt rerum aspernatur eum libero nihil omnis voluptas dolorum.", ResumeId = 42, StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 62, CompanyName = "Elyse Denesik", FinishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Id nihil quo porro.", ResumeId = 42, StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("SchoolId")
                        .HasColumnName("SCHOOL_ID");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("FACULTIES");

                    b.HasData(
                        new { Id = 11, Name = "Software Engineering", SchoolId = 3 },
                        new { Id = 12, Name = "Applied Mathematics", SchoolId = 2 },
                        new { Id = 13, Name = "Software Engineering", SchoolId = 1 },
                        new { Id = 14, Name = "Applied Mathematics", SchoolId = 2 },
                        new { Id = 15, Name = "Computer Science", SchoolId = 3 },
                        new { Id = 16, Name = "Applied Mathematics", SchoolId = 3 },
                        new { Id = 17, Name = "Applied Mathematics", SchoolId = 3 },
                        new { Id = 18, Name = "Applied Mathematics", SchoolId = 1 },
                        new { Id = 19, Name = "Computer Science", SchoolId = 1 },
                        new { Id = 20, Name = "Applied Mathematics", SchoolId = 1 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.FavoriteVacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId")
                        .HasColumnName("USER_ID");

                    b.Property<int>("VacancyId")
                        .HasColumnName("VACANCY_ID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VacancyId");

                    b.ToTable("FAVORITE_VACANCIES");

                    b.HasData(
                        new { Id = 83, UserId = 47, VacancyId = 31 },
                        new { Id = 84, UserId = 49, VacancyId = 35 },
                        new { Id = 85, UserId = 48, VacancyId = 35 },
                        new { Id = 86, UserId = 46, VacancyId = 37 },
                        new { Id = 87, UserId = 46, VacancyId = 35 },
                        new { Id = 88, UserId = 41, VacancyId = 37 },
                        new { Id = 89, UserId = 45, VacancyId = 37 },
                        new { Id = 90, UserId = 44, VacancyId = 38 },
                        new { Id = 91, UserId = 41, VacancyId = 37 },
                        new { Id = 92, UserId = 45, VacancyId = 32 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_LANGUAGES_NAME");

                    b.ToTable("LANGUAGES");

                    b.HasData(
                        new { Id = 1, Name = "English" },
                        new { Id = 2, Name = "Ukrainian" },
                        new { Id = 3, Name = "Russian" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Recruiter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnName("COMPANY_ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FIRST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LAST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_RECRUITERS_EMAIL");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_RECRUITERS_PHONE");

                    b.HasIndex("RoleId");

                    b.ToTable("RECRUITERS");

                    b.HasData(
                        new { Id = 21, CompanyId = 2, Email = "Wilhelmine_Wisozk@hotmail.com", FirstName = "Alek", LastName = "Roob", Password = "bSlOqa1uBi", Phone = "073 6554", RoleId = 2 },
                        new { Id = 22, CompanyId = 4, Email = "Lavern.Lind80@gmail.com", FirstName = "Avis", LastName = "Brakus", Password = "bIKPgHgq0A", Phone = "073 9573", RoleId = 2 },
                        new { Id = 23, CompanyId = 7, Email = "Ardella30@hotmail.com", FirstName = "Zena", LastName = "Howe", Password = "jf9MWiVa7q", Phone = "073 8576", RoleId = 2 },
                        new { Id = 24, CompanyId = 4, Email = "Roberta_VonRueden@gmail.com", FirstName = "Gertrude", LastName = "Hintz", Password = "hZYb9rij99", Phone = "073 9312", RoleId = 2 },
                        new { Id = 25, CompanyId = 6, Email = "Greg81@yahoo.com", FirstName = "Valentine", LastName = "Dietrich", Password = "L5D3sHerRY", Phone = "073 739", RoleId = 1 },
                        new { Id = 26, CompanyId = 1, Email = "Anastacio51@hotmail.com", FirstName = "Beth", LastName = "Morissette", Password = "Gam6gUS7V1", Phone = "073 5877", RoleId = 2 },
                        new { Id = 27, CompanyId = 9, Email = "Ron.Marvin66@yahoo.com", FirstName = "Kasey", LastName = "Nienow", Password = "L3sqVFbmdQ", Phone = "073 5791", RoleId = 2 },
                        new { Id = 28, CompanyId = 5, Email = "Haven_Lueilwitz97@hotmail.com", FirstName = "Marielle", LastName = "D'Amore", Password = "8B4zU1f4ZA", Phone = "073 3240", RoleId = 2 },
                        new { Id = 29, CompanyId = 10, Email = "Maudie.Rice66@yahoo.com", FirstName = "Walter", LastName = "DuBuque", Password = "gFGzc0dsUj", Phone = "073 2859", RoleId = 1 },
                        new { Id = 30, CompanyId = 1, Email = "Dario46@gmail.com", FirstName = "Nathanial", LastName = "Lang", Password = "A0_3ozXZT6", Phone = "073 6249", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Resume", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Courses")
                        .HasColumnName("COURSES")
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Facebook")
                        .HasColumnName("FACEBOOK")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FamilyState")
                        .HasColumnName("FAMILY_STATE")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Github")
                        .HasColumnName("GITHUB")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Instagram")
                        .HasColumnName("INSTAGRAM")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("KeySkills")
                        .IsRequired()
                        .HasColumnName("KEY_SKILLS")
                        .IsUnicode(false);

                    b.Property<string>("Linkedin")
                        .HasColumnName("LINKEDIN")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Skype")
                        .HasColumnName("SKYPE")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("SoftSkills")
                        .IsRequired()
                        .HasColumnName("SOFT_SKILLS")
                        .IsUnicode(false);

                    b.Property<int>("WorkAreaId")
                        .HasColumnName("WORK_AREA_ID");

                    b.HasKey("Id");

                    b.HasIndex("Facebook")
                        .IsUnique()
                        .HasName("UQ_RESUMES_FACEBOOK")
                        .HasFilter("[FACEBOOK] IS NOT NULL");

                    b.HasIndex("Instagram")
                        .IsUnique()
                        .HasName("UQ_RESUMES_INSTAGRAM")
                        .HasFilter("[INSTAGRAM] IS NOT NULL");

                    b.HasIndex("Linkedin")
                        .IsUnique()
                        .HasName("UQ_RESUMES_LINKEDIN")
                        .HasFilter("[LINKEDIN] IS NOT NULL");

                    b.HasIndex("Skype")
                        .IsUnique()
                        .HasName("UQ_RESUMES_SKYPE")
                        .HasFilter("[SKYPE] IS NOT NULL");

                    b.HasIndex("WorkAreaId");

                    b.ToTable("RESUMES");

                    b.HasData(
                        new { Id = 42, Courses = "Est in voluptatem aspernatur enim.", CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Facebook = "https://jermey.net", FamilyState = "Architecto.", Github = "https://cheyanne.info", Instagram = "https://loma.name", KeySkills = "Non nihil eligendi et sed quidem iusto quos molestias et.", Linkedin = "https://billie.biz", ModDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Skype = "http://leonel.com", SoftSkills = "Autem et impedit nihil reiciendis.", WorkAreaId = 2 },
                        new { Id = 48, Courses = "A quas quod nostrum impedit.", CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Facebook = "http://dell.net", FamilyState = "Velit.", Github = "https://minnie.org", Instagram = "http://meda.net", KeySkills = "Vero quia illo quaerat et.", Linkedin = "https://dave.name", ModDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Skype = "http://jerad.net", SoftSkills = "Non corrupti officia et vero ad animi aut qui.", WorkAreaId = 3 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.ResumeLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId")
                        .HasColumnName("LANGUAGE_ID");

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ResumeId");

                    b.ToTable("RESUME_LANGUAGES");

                    b.HasData(
                        new { Id = 73, LanguageId = 3, ResumeId = 42 },
                        new { Id = 74, LanguageId = 1, ResumeId = 48 },
                        new { Id = 75, LanguageId = 2, ResumeId = 42 },
                        new { Id = 76, LanguageId = 1, ResumeId = 48 },
                        new { Id = 77, LanguageId = 3, ResumeId = 48 },
                        new { Id = 78, LanguageId = 1, ResumeId = 42 },
                        new { Id = 79, LanguageId = 1, ResumeId = 42 },
                        new { Id = 80, LanguageId = 1, ResumeId = 42 },
                        new { Id = 81, LanguageId = 1, ResumeId = 42 },
                        new { Id = 82, LanguageId = 2, ResumeId = 48 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_ROLES_NAME");

                    b.ToTable("ROLES");

                    b.HasData(
                        new { Id = 1, Name = "admin" },
                        new { Id = 2, Name = "user" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.School", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_SCHOOLS_NAME");

                    b.ToTable("SCHOOLS");

                    b.HasData(
                        new { Id = 1, Name = "NU LP" },
                        new { Id = 2, Name = "LNU" },
                        new { Id = 3, Name = "KPI" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime>("BirthData")
                        .HasColumnName("BIRTH_DATA")
                        .HasColumnType("date");

                    b.Property<int>("CityId")
                        .HasColumnName("CITY_ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FIRST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LAST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<byte[]>("PhotoData")
                        .HasColumnName("PHOTO_DATA");

                    b.Property<string>("PhotoMimeType")
                        .HasColumnName("PHOTO_MIME_TYPE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.Property<string>("Sex")
                        .HasColumnName("SEX")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_USERS_EMAIL");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_USERS_PHONE")
                        .HasFilter("[PHONE] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("USERS");

                    b.HasData(
                        new { Id = 41, Address = "Kenneth Landing", BirthData = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 2, Email = "Jordan54@hotmail.com", FirstName = "Miles", LastName = "Doyle", Password = "AKCh652gdn", Phone = "073 2285", RoleId = 1, Sex = "f" },
                        new { Id = 42, Address = "Kobe Ranch", BirthData = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 2, Email = "Noe_Jast75@gmail.com", FirstName = "Frederik", LastName = "Hyatt", Password = "kgilAcvKyB", Phone = "073 8289", RoleId = 2, Sex = "f" },
                        new { Id = 43, Address = "Beer Isle", BirthData = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 3, Email = "Princess77@hotmail.com", FirstName = "Isabelle", LastName = "Kuvalis", Password = "jZA7IOJC7M", Phone = "073 8094", RoleId = 1, Sex = "m" },
                        new { Id = 44, Address = "Rau Trail", BirthData = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 2, Email = "Mavis_Johnson@hotmail.com", FirstName = "Cayla", LastName = "Rodriguez", Password = "MZVaa3wRne", Phone = "073 1567", RoleId = 2, Sex = "f" },
                        new { Id = 45, Address = "Lueilwitz Flat", BirthData = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 2, Email = "Lorenzo_Hirthe@yahoo.com", FirstName = "Sophia", LastName = "Hamill", Password = "nPJ18S6685", Phone = "073 904", RoleId = 1, Sex = "m" },
                        new { Id = 46, Address = "Janae Points", BirthData = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 1, Email = "Elza_Morar@yahoo.com", FirstName = "Ella", LastName = "Stracke", Password = "Q2EIc2rDST", Phone = "073 1292", RoleId = 1, Sex = "m" },
                        new { Id = 47, Address = "Therese Ports", BirthData = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 1, Email = "Karlie_Sanford8@yahoo.com", FirstName = "Irwin", LastName = "MacGyver", Password = "Fflsg3ql6k", Phone = "073 5264", RoleId = 2, Sex = "m" },
                        new { Id = 48, Address = "Ida Bridge", BirthData = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 3, Email = "Lucienne_Hills46@gmail.com", FirstName = "Alfredo", LastName = "Purdy", Password = "By0B_k75e_", Phone = "073 5054", RoleId = 1, Sex = "f" },
                        new { Id = 49, Address = "Torphy Villages", BirthData = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 2, Email = "Iva.Stiedemann@hotmail.com", FirstName = "Kristopher", LastName = "Roob", Password = "HCrxowzI9R", Phone = "073 2866", RoleId = 1, Sex = "m" },
                        new { Id = 50, Address = "Josiah Inlet", BirthData = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 1, Email = "Jennings.Barrows@gmail.com", FirstName = "Ebba", LastName = "Hessel", Password = "ydHeVeqmpr", Phone = "073 2471", RoleId = 2, Sex = "m" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BePlus")
                        .HasColumnName("BE_PLUS")
                        .IsUnicode(false);

                    b.Property<int>("CityId")
                        .HasColumnName("CITY_ID");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("DESCRIPTION")
                        .IsUnicode(false);

                    b.Property<string>("FullPartTime")
                        .HasColumnName("FULL_PART_TIME")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<bool?>("IsChecked")
                        .HasColumnName("IS_CHECKED");

                    b.Property<DateTime?>("ModDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Offering")
                        .IsRequired()
                        .HasColumnName("OFFERING")
                        .IsUnicode(false);

                    b.Property<int>("RecruiterId")
                        .HasColumnName("RECRUITER_ID");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnName("REQUIREMENTS")
                        .IsUnicode(false);

                    b.Property<decimal?>("Salary")
                        .HasColumnName("SALARY")
                        .HasColumnType("money");

                    b.Property<int>("WorkAreaId")
                        .HasColumnName("WORK_AREA_ID");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("RecruiterId");

                    b.HasIndex("WorkAreaId");

                    b.ToTable("VACANCIES");

                    b.HasData(
                        new { Id = 31, BePlus = "Totam hic itaque et dolor eaque.", CityId = 3, CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Internal", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Principal Directives Producer", Offering = "Trever Rolfson", RecruiterId = 29, Requirements = "Nihil commodi officia animi amet aut.", Salary = 1000m, WorkAreaId = 2 },
                        new { Id = 32, BePlus = "Maxime corporis ab id dolorem quisquam consequuntur velit dolorem voluptatem.", CityId = 3, CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Dynamic", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Dynamic Paradigm Liaison", Offering = "Jamey Murphy", RecruiterId = 25, Requirements = "Iure itaque voluptatem ut aspernatur.", Salary = 1000m, WorkAreaId = 3 },
                        new { Id = 33, BePlus = "Quia aperiam minus quis fugiat.", CityId = 1, CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Lead", FullPartTime = "Part-time", IsChecked = true, ModDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Global Solutions Facilitator", Offering = "Freeda Kub", RecruiterId = 25, Requirements = "Labore veritatis qui ea eum est alias animi neque.", Salary = 1000m, WorkAreaId = 1 },
                        new { Id = 34, BePlus = "Animi alias dolor dolorum.", CityId = 2, CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Chief", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Lead Intranet Engineer", Offering = "Zita Zulauf", RecruiterId = 23, Requirements = "Esse quod beatae est est voluptatem molestias et mollitia sed.", Salary = 1000m, WorkAreaId = 3 },
                        new { Id = 35, BePlus = "Quam nostrum debitis cumque.", CityId = 2, CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Regional", FullPartTime = "Full-time", IsChecked = false, ModDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "International Quality Director", Offering = "Percival Berge", RecruiterId = 28, Requirements = "Et quam illum omnis.", Salary = 1000m, WorkAreaId = 2 },
                        new { Id = 36, BePlus = "Repudiandae enim assumenda nostrum laboriosam quia.", CityId = 2, CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Lead", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Corporate Infrastructure Assistant", Offering = "Alysa Bechtelar", RecruiterId = 21, Requirements = "Velit quis ipsam quas tempore.", Salary = 1000m, WorkAreaId = 2 },
                        new { Id = 37, BePlus = "Reprehenderit eos consequatur ut sapiente.", CityId = 2, CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Principal", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Central Mobility Planner", Offering = "Juliet Fisher", RecruiterId = 22, Requirements = "Omnis deserunt inventore ex non omnis similique sed provident aut.", Salary = 1000m, WorkAreaId = 1 },
                        new { Id = 38, BePlus = "Eum quos velit.", CityId = 1, CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Regional", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Human Usability Analyst", Offering = "Izaiah Ziemann", RecruiterId = 29, Requirements = "Rerum nam eligendi quia animi saepe.", Salary = 1000m, WorkAreaId = 3 },
                        new { Id = 39, BePlus = "Ut quo repudiandae eligendi dolores nobis autem accusamus.", CityId = 2, CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Customer", FullPartTime = "Full-time", IsChecked = false, ModDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Dynamic Response Manager", Offering = "Catharine Runte", RecruiterId = 22, Requirements = "Dolorem repellendus libero et repellat vel laudantium error minima.", Salary = 1000m, WorkAreaId = 2 },
                        new { Id = 40, BePlus = "Ut blanditiis sit sunt qui non aperiam voluptatem nesciunt qui.", CityId = 2, CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Internal", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Regional Quality Associate", Offering = "Jude Lindgren", RecruiterId = 22, Requirements = "Modi exercitationem aut.", Salary = 1000m, WorkAreaId = 3 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.WorkArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<byte[]>("PhotoData")
                        .HasColumnName("PHOTO_DATA");

                    b.Property<string>("PhotoMimetype")
                        .HasColumnName("PHOTO_MIMETYPE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_WORK_AREAS_NAME");

                    b.ToTable("WORK_AREAS");

                    b.HasData(
                        new { Id = 1, Name = "IT" },
                        new { Id = 2, Name = "Sales" },
                        new { Id = 3, Name = "Medicine" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Company", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Companies")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_COMPANIES_TO_ROLES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.EducationPeriod", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("EducationPeriods")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_PK_EDUCATION_PERIODS_TO_RESUMES");

                    b.HasOne("JobList.DataAccess.Entities.School", "School")
                        .WithMany("EducationPeriods")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_PK_EDUCATION_PERIODS_TO_SCHOOLS");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Experience", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("Experiences")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_EXPERIENCES_TO_RESUMES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Faculty", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.School", "School")
                        .WithMany("Faculties")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_FACULTIES_TO_SCHOOLS");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.FavoriteVacancy", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.User", "User")
                        .WithMany("FavoriteVacancies")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_FAVORITE_VACANCIES_TO_USERS");

                    b.HasOne("JobList.DataAccess.Entities.Vacancy", "Vacancy")
                        .WithMany("FavoriteVacancies")
                        .HasForeignKey("VacancyId")
                        .HasConstraintName("FK_FAVORITE_VACANCIES_TO_VACANCIES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Recruiter", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Company", "Company")
                        .WithMany("Recruiters")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_RECRUITERS_TO_COMPANIES");

                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Recruiters")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RECRUITERS_TO_ROLES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Resume", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.User", "IdNavigation")
                        .WithOne("Resumes")
                        .HasForeignKey("JobList.DataAccess.Entities.Resume", "Id")
                        .HasConstraintName("FK_RESUMES_TO_USERS");

                    b.HasOne("JobList.DataAccess.Entities.WorkArea", "WorkArea")
                        .WithMany("Resumes")
                        .HasForeignKey("WorkAreaId")
                        .HasConstraintName("FK_RESUMES_TO_WORKAREA");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.ResumeLanguage", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Language", "Language")
                        .WithMany("ResumeLanguages")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_PK_RESUME_LANGUAGES_TO_LANGUAGES");

                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("ResumeLanguages")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_PK_RESUME_LANGUAGES_TO_RESUMES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.User", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_USERS_TO_CITIES");

                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_USERS_TO_ROLES");
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Vacancy", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.City", "City")
                        .WithMany("Vacancies")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_VACANCIES_TO_CITIES");

                    b.HasOne("JobList.DataAccess.Entities.Recruiter", "Recruiter")
                        .WithMany("Vacancies")
                        .HasForeignKey("RecruiterId")
                        .HasConstraintName("FK_VACANCIES_TO_RECRUITERS");

                    b.HasOne("JobList.DataAccess.Entities.WorkArea", "WorkArea")
                        .WithMany("Vacancies")
                        .HasForeignKey("WorkAreaId")
                        .HasConstraintName("FK_VACANCIES_TO_WORK_AREAS");
                });
#pragma warning restore 612, 618
        }
    }
}
