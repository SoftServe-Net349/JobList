// <auto-generated />
using System;
using JobList.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JobList.DataAccess.Migrations
{
    [DbContext(typeof(JobListDbContext))]
    partial class JobListDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JobList.DataAccess.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_CITIES_NAME");

                    b.ToTable("CITIES");

                    b.HasData(
                        new { Id = 1, Name = "New York" },
                        new { Id = 2, Name = "Jersey" },
                        new { Id = 3, Name = "Atlanta" },
                        new { Id = 4, Name = "Los Angeles" },
                        new { Id = 5, Name = "Boston" },
                        new { Id = 6, Name = "Philadelphia" },
                        new { Id = 7, Name = "Seattle" },
                        new { Id = 8, Name = "Washington DC" },
                        new { Id = 9, Name = "Las Vegas" },
                        new { Id = 10, Name = "Phoneix" },
                        new { Id = 11, Name = "San Francisco" },
                        new { Id = 12, Name = "Chicago" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("ADDRESS")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("BossName")
                        .IsRequired()
                        .HasColumnName("BOSS_NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(254)
                        .IsUnicode(false);

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnName("FULL_DESCRIPTION")
                        .IsUnicode(false);

                    b.Property<byte[]>("LogoData")
                        .HasColumnName("LOGO_DATA");

                    b.Property<string>("LogoMimetype")
                        .HasColumnName("LOGO_MIMETYPE")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("RefreshToken")
                        .HasColumnName("REFRESH_TOKEN")
                        .HasMaxLength(70)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnName("SHORT_DESCRIPTION")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Site")
                        .HasColumnName("SITE")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_EMAIL");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_NAME");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_PHONE")
                        .HasFilter("[PHONE] IS NOT NULL");

                    b.HasIndex("RefreshToken")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_REFRESH_TOKEN")
                        .HasFilter("[REFRESH_TOKEN] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("COMPANIES");

                    b.HasData(
                        new { Id = 1, Address = "512 Shana Road, Kayleehaven, Tonga", BossName = "Glenda", Email = "Karolann.Nienow25@yahoo.com", FullDescription = "Ex voluptate earum.", Name = "Company 559", Password = "qERv2G3oUX", Phone = "(557) 233 945", RoleId = 3, ShortDescription = "eaque", Site = "http://tevin.biz" },
                        new { Id = 2, Address = "4514 Talia Circle, West Jeramiebury, Australia", BossName = "Cristopher", Email = "Jayce_Pouros49@yahoo.com", FullDescription = "Soluta necessitatibus enim.", Name = "Company 370", Password = "3FbVcPgkxj", Phone = "(950) 621 7162", RoleId = 3, ShortDescription = "magni", Site = "https://nicolas.name" },
                        new { Id = 3, Address = "5295 Bethel Mission, West Virgieburgh, Portugal", BossName = "Sarai", Email = "Loraine_Sporer83@yahoo.com", FullDescription = "Nisi amet perspiciatis.", Name = "Company 754", Password = "Y4nDNzj3SX", Phone = "(731) 568 6243", RoleId = 3, ShortDescription = "quam", Site = "https://sonia.biz" },
                        new { Id = 4, Address = "213 Albert Ridge, Dalestad, Syrian Arab Republic", BossName = "Stephan", Email = "Susie_Altenwerth@hotmail.com", FullDescription = "Dolorem vel saepe.", Name = "Company 760", Password = "QKrC9fIshW", Phone = "(197) 272 7719", RoleId = 3, ShortDescription = "ea", Site = "https://melyna.net" },
                        new { Id = 5, Address = "2160 Yasmin Haven, Port Christine, Macao", BossName = "Dennis", Email = "Brandt_Roob@gmail.com", FullDescription = "Dolorem nemo similique.", Name = "Company 515", Password = "w22Tfbz1ab", Phone = "(498) 666 2203", RoleId = 3, ShortDescription = "natus", Site = "http://madalyn.org" },
                        new { Id = 6, Address = "357 Ashlynn Summit, Milesberg, Croatia", BossName = "Myrtle", Email = "Nicolette52@yahoo.com", FullDescription = "Aliquam distinctio et.", Name = "Company 466", Password = "Q3vvX_LlMs", Phone = "(584) 928 2553", RoleId = 3, ShortDescription = "rerum", Site = "http://theresia.info" },
                        new { Id = 7, Address = "215 Breitenberg Springs, East Brain, Colombia", BossName = "Evert", Email = "Myrtis_Cassin@hotmail.com", FullDescription = "Quo aut doloremque.", Name = "Company 678", Password = "iJCe5WVTd3", Phone = "(662) 622 7157", RoleId = 3, ShortDescription = "ab", Site = "https://roberto.info" },
                        new { Id = 8, Address = "82914 Fatima Plains, New Darionburgh, Bosnia and Herzegovina", BossName = "Evelyn", Email = "Marcellus.Marquardt@hotmail.com", FullDescription = "Accusamus placeat asperiores.", Name = "Company 996", Password = "zIDCrEhVzN", Phone = "(196) 230 3314", RoleId = 3, ShortDescription = "est", Site = "https://hannah.biz" },
                        new { Id = 9, Address = "13607 Rohan Springs, Port Cornell, Costa Rica", BossName = "Kelvin", Email = "Edwin61@yahoo.com", FullDescription = "Aut sed molestiae.", Name = "Company 893", Password = "UfEL5_AEZ9", Phone = "(941) 245 476", RoleId = 3, ShortDescription = "sequi", Site = "http://maryjane.net" },
                        new { Id = 10, Address = "7477 Goodwin Island, O'Haraville, Cocos (Keeling) Islands", BossName = "Dina", Email = "Lindsey.Toy@yahoo.com", FullDescription = "Est expedita placeat.", Name = "Company 486", Password = "0G5tIrZswk", Phone = "(793) 891 6141", RoleId = 3, ShortDescription = "quis", Site = "https://dianna.org" },
                        new { Id = 11111, Address = "2D Sadova Street Lviv", BossName = "Taras Kytsmey", Email = "company@gmail.com", FullDescription = "At SoftServe, we strive to make the world a better place. Our Corporate Social Responsibility program ensures a sustainable future for our associates, our company, and the communities in which we live and work across the globe. The key to fulfilling this mission is our responsibility towards customers, associates, and society. We are committed to addressing various economic, social, and environmental issues.", Name = "SoftServe", Password = "CdMwWKQ0n40R4dK/zsjIx0XhXdgxXCcyJfbbuViFMJC2mVik", Phone = "0322409090", RoleId = 3, ShortDescription = "Build you career here", Site = "https://softserveinc.com/en-us/" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.EducationPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FacultyId")
                        .HasColumnName("FACULTY_ID");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnName("FINISH_DATE")
                        .HasColumnType("date");

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.Property<int>("SchoolId")
                        .HasColumnName("SCHOOL_ID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("START_DATE")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("ResumeId");

                    b.HasIndex("SchoolId");

                    b.ToTable("EDUCATION_PERIODS");

                    b.HasData(
                        new { Id = 61, FacultyId = 5, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 44, SchoolId = 8, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 62, FacultyId = 1, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 44, SchoolId = 7, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 63, FacultyId = 8, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 44, SchoolId = 4, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 64, FacultyId = 10, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 44, SchoolId = 9, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 65, FacultyId = 5, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 44, SchoolId = 9, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 66, FacultyId = 9, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 44, SchoolId = 10, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 67, FacultyId = 4, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 44, SchoolId = 9, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 68, FacultyId = 9, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 44, SchoolId = 2, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 69, FacultyId = 3, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 44, SchoolId = 3, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 70, FacultyId = 4, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 44, SchoolId = 8, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 111, FacultyId = 4, FinishDate = new DateTime(2005, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 46, SchoolId = 8, StartDate = new DateTime(2002, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 112, FacultyId = 2, FinishDate = new DateTime(2007, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 46, SchoolId = 5, StartDate = new DateTime(2004, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("BIRTH_DATE")
                        .HasColumnType("date");

                    b.Property<int>("CityId")
                        .HasColumnName("CITY_ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(254)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FIRST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LAST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<byte[]>("PhotoData")
                        .HasColumnName("PHOTO_DATA");

                    b.Property<string>("PhotoMimeType")
                        .HasColumnName("PHOTO_MIME_TYPE")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("RefreshToken")
                        .HasColumnName("REFRESH_TOKEN")
                        .HasMaxLength(70)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.Property<string>("Sex")
                        .HasColumnName("SEX")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_EMPLOYEES_EMAIL");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_EMPLOYEES_PHONE")
                        .HasFilter("[PHONE] IS NOT NULL");

                    b.HasIndex("RefreshToken")
                        .IsUnique()
                        .HasName("UQ_EMPLOYEES_REFRESH_TOKEN")
                        .HasFilter("[REFRESH_TOKEN] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("EMPLOYEES");

                    b.HasData(
                        new { Id = 35, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 7, Email = "Penelope83@hotmail.com", FirstName = "Ellie", LastName = "Ferry", Password = "c_X8eOYKxI", Phone = "(561) 4 9238", RoleId = 2, Sex = "m" },
                        new { Id = 36, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 10, Email = "Annie.Brakus@yahoo.com", FirstName = "Justus", LastName = "Green", Password = "a905zQHo7N", Phone = "(462) 440 9637", RoleId = 2, Sex = "m" },
                        new { Id = 37, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 8, Email = "Genesis_Simonis@hotmail.com", FirstName = "Lexie", LastName = "Hilll", Password = "1VmfZ0h4Zq", Phone = "(265) 122 4383", RoleId = 2, Sex = "f" },
                        new { Id = 38, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 6, Email = "Alfred53@gmail.com", FirstName = "Clifford", LastName = "Schumm", Password = "vIHhsqirg1", Phone = "(115) 840 8498", RoleId = 2, Sex = "f" },
                        new { Id = 39, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 11, Email = "Adolphus.Johnston18@gmail.com", FirstName = "Lempi", LastName = "Gibson", Password = "okpQ4M8GVj", Phone = "(908) 820 3793", RoleId = 2, Sex = "m" },
                        new { Id = 40, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 3, Email = "Abigail12@yahoo.com", FirstName = "Breanna", LastName = "Abshire", Password = "FvweMIb4Sc", Phone = "(848) 56 7454", RoleId = 2, Sex = "m" },
                        new { Id = 41, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 6, Email = "Dolly_Cummings17@gmail.com", FirstName = "Clair", LastName = "Pouros", Password = "ckyJYTTQTG", Phone = "(126) 969 2491", RoleId = 2, Sex = "m" },
                        new { Id = 42, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 9, Email = "Trisha43@hotmail.com", FirstName = "Winona", LastName = "Swaniawski", Password = "_kSYpZhQ1i", Phone = "(984) 524 9080", RoleId = 2, Sex = "f" },
                        new { Id = 43, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 9, Email = "Shanny74@hotmail.com", FirstName = "Wyatt", LastName = "Crist", Password = "8dBiNyygwc", Phone = "(668) 103 1366", RoleId = 2, Sex = "f" },
                        new { Id = 44, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 3, Email = "Pierre.Conroy18@yahoo.com", FirstName = "Madyson", LastName = "Volkman", Password = "spvLWSb2gj", Phone = "(674) 692 8515", RoleId = 2, Sex = "m" },
                        new { Id = 46, BirthDate = new DateTime(1995, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 8, Email = "employee@gmail.com", FirstName = "Andrew", LastName = "Felton", Password = "CdMwWKQ0n40R4dK/zsjIx0XhXdgxXCcyJfbbuViFMJC2mVik", Phone = "0502758765", RoleId = 2, Sex = "m" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnName("COMPANY_NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnName("FINISH_DATE")
                        .HasColumnType("date");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnName("POSITION")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("START_DATE")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("EXPERIENCES");

                    b.HasData(
                        new { Id = 48, CompanyName = "Hilton Littel", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Aut quia eos explicabo et.", ResumeId = 44, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 49, CompanyName = "Monty Konopelski", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Labore laudantium sit sit cum itaque quibusdam.", ResumeId = 44, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 50, CompanyName = "Kay Dietrich", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Officia repellat iusto et id aut.", ResumeId = 44, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 51, CompanyName = "Gregoria Kerluke", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Sint nostrum id aut qui.", ResumeId = 44, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 52, CompanyName = "Liliana Roberts", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Autem quos molestiae.", ResumeId = 44, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 53, CompanyName = "Mireya Zulauf", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Ex voluptas consequatur.", ResumeId = 44, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 54, CompanyName = "Joan Blanda", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Magni assumenda aut quod.", ResumeId = 44, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 55, CompanyName = "Flo Murphy", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Sit doloremque adipisci quisquam quia veniam consequatur vero.", ResumeId = 44, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 56, CompanyName = "Chasity Macejkovic", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Ea sint distinctio quo quo et.", ResumeId = 44, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 57, CompanyName = "Ismael Hermann", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Cupiditate voluptas odio.", ResumeId = 44, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 65, CompanyName = "Triomed", FinishDate = new DateTime(2016, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Surgeon", ResumeId = 46, StartDate = new DateTime(2008, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 66, CompanyName = "Medis", FinishDate = new DateTime(2018, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Surgeon", ResumeId = 46, StartDate = new DateTime(2016, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 67, CompanyName = "Synevo", FinishDate = new DateTime(2018, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Surgeon", ResumeId = 46, StartDate = new DateTime(2018, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_FACULTIES_NAME");

                    b.ToTable("FACULTIES");

                    b.HasData(
                        new { Id = 1, Name = "Computer Science" },
                        new { Id = 2, Name = "Software Engineering" },
                        new { Id = 3, Name = "Applied Mathematics" },
                        new { Id = 4, Name = "Foreign Languages" },
                        new { Id = 5, Name = "International Relationships" },
                        new { Id = 6, Name = "Economics" },
                        new { Id = 7, Name = "Design" },
                        new { Id = 8, Name = "Faculty of Law" },
                        new { Id = 9, Name = "Marketing" },
                        new { Id = 10, Name = "Journalism" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.FavoriteVacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnName("EMPLOYEE_ID");

                    b.Property<int>("VacancyId")
                        .HasColumnName("VACANCY_ID");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("VacancyId");

                    b.ToTable("FAVORITE_VACANCIES");

                    b.HasData(
                        new { Id = 86, EmployeeId = 39, VacancyId = 11112 },
                        new { Id = 87, EmployeeId = 46, VacancyId = 26 },
                        new { Id = 88, EmployeeId = 43, VacancyId = 26 },
                        new { Id = 89, EmployeeId = 39, VacancyId = 29 },
                        new { Id = 90, EmployeeId = 42, VacancyId = 26 },
                        new { Id = 91, EmployeeId = 37, VacancyId = 24 },
                        new { Id = 92, EmployeeId = 46, VacancyId = 31 },
                        new { Id = 93, EmployeeId = 46, VacancyId = 11111 },
                        new { Id = 94, EmployeeId = 35, VacancyId = 29 },
                        new { Id = 95, EmployeeId = 37, VacancyId = 11112 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Invitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnName("EMPLOYEE_ID");

                    b.Property<int>("VacancyId")
                        .HasColumnName("VACANCY_ID");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("VacancyId");

                    b.ToTable("INVITATIONS");

                    b.HasData(
                        new { Id = 96, EmployeeId = 40, VacancyId = 11112 },
                        new { Id = 97, EmployeeId = 36, VacancyId = 31 },
                        new { Id = 98, EmployeeId = 43, VacancyId = 26 },
                        new { Id = 99, EmployeeId = 46, VacancyId = 11111 },
                        new { Id = 100, EmployeeId = 36, VacancyId = 26 },
                        new { Id = 101, EmployeeId = 38, VacancyId = 11111 },
                        new { Id = 102, EmployeeId = 46, VacancyId = 11112 },
                        new { Id = 103, EmployeeId = 46, VacancyId = 29 },
                        new { Id = 104, EmployeeId = 38, VacancyId = 11112 },
                        new { Id = 105, EmployeeId = 35, VacancyId = 23 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_LANGUAGES_NAME");

                    b.ToTable("LANGUAGES");

                    b.HasData(
                        new { Id = 1, Name = "English" },
                        new { Id = 2, Name = "Ukrainian" },
                        new { Id = 3, Name = "Russian" },
                        new { Id = 4, Name = "Polish" },
                        new { Id = 5, Name = "Greek" },
                        new { Id = 6, Name = "Japanese" },
                        new { Id = 7, Name = "Spanish" },
                        new { Id = 8, Name = "Chinese" },
                        new { Id = 9, Name = "German" },
                        new { Id = 10, Name = "Roman" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Recruiter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnName("COMPANY_ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(254)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FIRST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LAST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<byte[]>("PhotoData")
                        .HasColumnName("PHOTO_DATA");

                    b.Property<string>("PhotoMimetype")
                        .HasColumnName("PHOTO_MIMETYPE")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("RefreshToken")
                        .HasColumnName("REFRESH_TOKEN")
                        .HasMaxLength(70)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_RECRUITERS_EMAIL");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_RECRUITERS_PHONE")
                        .HasFilter("[PHONE] IS NOT NULL");

                    b.HasIndex("RefreshToken")
                        .IsUnique()
                        .HasName("UQ_RECRUITERS_REFRESH_TOKEN")
                        .HasFilter("[REFRESH_TOKEN] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("RECRUITERS");

                    b.HasData(
                        new { Id = 12, CompanyId = 1, Email = "Levi31@hotmail.com", FirstName = "Addie", LastName = "Zemlak", Password = "lFHiV8AnDV", Phone = "(928) 596 5838", RoleId = 4 },
                        new { Id = 13, CompanyId = 1, Email = "Monte_Jakubowski60@yahoo.com", FirstName = "Kallie", LastName = "Lind", Password = "K8jBYoiTQi", Phone = "(163) 195 5638", RoleId = 4 },
                        new { Id = 14, CompanyId = 9, Email = "Dorian_Blick@gmail.com", FirstName = "Abbey", LastName = "Bauch", Password = "gFBnbUXiff", Phone = "(708) 106 2148", RoleId = 4 },
                        new { Id = 15, CompanyId = 5, Email = "Marta_Predovic59@yahoo.com", FirstName = "Noemi", LastName = "Wunsch", Password = "Fc5L_hecTI", Phone = "(157) 672 7879", RoleId = 4 },
                        new { Id = 16, CompanyId = 10, Email = "Coy_Greenfelder91@gmail.com", FirstName = "Alexanne", LastName = "Hartmann", Password = "gCqYMP97Jd", Phone = "(471) 272 3166", RoleId = 4 },
                        new { Id = 17, CompanyId = 6, Email = "Jannie.Moore33@gmail.com", FirstName = "Abdiel", LastName = "Franecki", Password = "TIf0iWoqz7", Phone = "(663) 511 647", RoleId = 4 },
                        new { Id = 18, CompanyId = 11111, Email = "Madilyn.Kozey21@hotmail.com", FirstName = "Rosamond", LastName = "Runte", Password = "S7modETPNy", Phone = "(170) 246 7232", RoleId = 4 },
                        new { Id = 19, CompanyId = 4, Email = "Rory.Williamson18@gmail.com", FirstName = "Quinten", LastName = "Johnson", Password = "zxj9TMcpz5", Phone = "(405) 660 6546", RoleId = 4 },
                        new { Id = 20, CompanyId = 11111, Email = "Gaetano_McCullough@hotmail.com", FirstName = "Terrell", LastName = "Kutch", Password = "NsLi54nEDy", Phone = "(336) 995 8173", RoleId = 4 },
                        new { Id = 21, CompanyId = 3, Email = "Alisa_Collins@hotmail.com", FirstName = "Alessandra", LastName = "Zieme", Password = "KC1ur5o73D", Phone = "(1) 426 7343", RoleId = 4 },
                        new { Id = 11111, CompanyId = 11111, Email = "recruiter@gmail.com", FirstName = "Kate", LastName = "Janner", Password = "CdMwWKQ0n40R4dK/zsjIx0XhXdgxXCcyJfbbuViFMJC2mVik", Phone = "0934561223", RoleId = 4 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Resume", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Courses")
                        .HasColumnName("COURSES")
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Facebook")
                        .HasColumnName("FACEBOOK")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FamilyState")
                        .HasColumnName("FAMILY_STATE")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Github")
                        .HasColumnName("GITHUB")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Instagram")
                        .HasColumnName("INSTAGRAM")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnName("INTRODUCTION")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<string>("KeySkills")
                        .IsRequired()
                        .HasColumnName("KEY_SKILLS")
                        .IsUnicode(false);

                    b.Property<string>("Linkedin")
                        .HasColumnName("LINKEDIN")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Position")
                        .HasColumnName("POSITION")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Skype")
                        .HasColumnName("SKYPE")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("SoftSkills")
                        .IsRequired()
                        .HasColumnName("SOFT_SKILLS")
                        .IsUnicode(false);

                    b.Property<int>("WorkAreaId")
                        .HasColumnName("WORK_AREA_ID");

                    b.HasKey("Id");

                    b.HasIndex("Facebook")
                        .IsUnique()
                        .HasName("UQ_RESUMES_FACEBOOK")
                        .HasFilter("[FACEBOOK] IS NOT NULL");

                    b.HasIndex("Instagram")
                        .IsUnique()
                        .HasName("UQ_RESUMES_INSTAGRAM")
                        .HasFilter("[INSTAGRAM] IS NOT NULL");

                    b.HasIndex("Linkedin")
                        .IsUnique()
                        .HasName("UQ_RESUMES_LINKEDIN")
                        .HasFilter("[LINKEDIN] IS NOT NULL");

                    b.HasIndex("Skype")
                        .IsUnique()
                        .HasName("UQ_RESUMES_SKYPE")
                        .HasFilter("[SKYPE] IS NOT NULL");

                    b.HasIndex("WorkAreaId");

                    b.ToTable("RESUMES");

                    b.HasData(
                        new { Id = 44, Courses = "Vel amet ullam eum corporis maxime minima eos.", CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Facebook = "https://ned.com", FamilyState = "Et.", Github = "http://macey.info", Instagram = "http://chaim.info", Introduction = "Laborum eum.", KeySkills = "Iusto laborum.", Linkedin = "https://ada.info", ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Molestiae.", Skype = "https://tyrell.net", SoftSkills = "Sunt magni.", WorkAreaId = 1 },
                        new { Id = 46, Courses = "Certification training", CreateDate = new DateTime(2018, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), Facebook = "www.facebook.com", FamilyState = "not married", Github = "https://www.github.com/", Instagram = "https://www.instagram.com/", Introduction = "Persuasive person with strong desire to work", KeySkills = "Hardworking, persuasive", Linkedin = "https://www.linkedin.com/", Position = "Surgeon", Skype = "https://www.skype.com/", SoftSkills = "Plastic surgery", WorkAreaId = 3 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.ResumeLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId")
                        .HasColumnName("LANGUAGE_ID");

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ResumeId");

                    b.ToTable("RESUME_LANGUAGES");

                    b.HasData(
                        new { Id = 73, LanguageId = 2, ResumeId = 44 },
                        new { Id = 74, LanguageId = 7, ResumeId = 44 },
                        new { Id = 75, LanguageId = 5, ResumeId = 44 },
                        new { Id = 76, LanguageId = 1, ResumeId = 44 },
                        new { Id = 77, LanguageId = 3, ResumeId = 44 },
                        new { Id = 78, LanguageId = 1, ResumeId = 44 },
                        new { Id = 79, LanguageId = 4, ResumeId = 44 },
                        new { Id = 80, LanguageId = 5, ResumeId = 44 },
                        new { Id = 81, LanguageId = 9, ResumeId = 44 },
                        new { Id = 82, LanguageId = 7, ResumeId = 44 },
                        new { Id = 111, LanguageId = 10, ResumeId = 46 },
                        new { Id = 112, LanguageId = 5, ResumeId = 46 },
                        new { Id = 113, LanguageId = 7, ResumeId = 46 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_ROLES_NAME");

                    b.ToTable("ROLES");

                    b.HasData(
                        new { Id = 1, Name = "admin" },
                        new { Id = 2, Name = "employee" },
                        new { Id = 3, Name = "company" },
                        new { Id = 4, Name = "recruiter" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.School", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_SCHOOLS_NAME");

                    b.ToTable("SCHOOLS");

                    b.HasData(
                        new { Id = 1, Name = "Chicago State University" },
                        new { Id = 2, Name = "Harvard University" },
                        new { Id = 3, Name = "Prinston University" },
                        new { Id = 4, Name = "Berklee College Of Arts" },
                        new { Id = 5, Name = "Stanford University" },
                        new { Id = 6, Name = "Massachusetts Institute of Technology" },
                        new { Id = 7, Name = "Columbia University" },
                        new { Id = 8, Name = "New York University" },
                        new { Id = 9, Name = "University of Arizona" },
                        new { Id = 10, Name = "Yale University" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BePlus")
                        .HasColumnName("BE_PLUS")
                        .IsUnicode(false);

                    b.Property<int>("CityId")
                        .HasColumnName("CITY_ID");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("DESCRIPTION")
                        .IsUnicode(false);

                    b.Property<string>("FullPartTime")
                        .HasColumnName("FULL_PART_TIME")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<bool?>("IsChecked")
                        .HasColumnName("IS_CHECKED");

                    b.Property<DateTime?>("ModDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Offering")
                        .IsRequired()
                        .HasColumnName("OFFERING")
                        .IsUnicode(false);

                    b.Property<int>("RecruiterId")
                        .HasColumnName("RECRUITER_ID");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnName("REQUIREMENTS")
                        .IsUnicode(false);

                    b.Property<decimal?>("Salary")
                        .HasColumnName("SALARY")
                        .HasColumnType("money");

                    b.Property<int>("WorkAreaId")
                        .HasColumnName("WORK_AREA_ID");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("RecruiterId");

                    b.HasIndex("WorkAreaId");

                    b.ToTable("VACANCIES");

                    b.HasData(
                        new { Id = 23, BePlus = "Ducimus impedit rerum magni culpa vitae nam consequatur ipsam illum.", CityId = 4, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Central", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "District Implementation Officer", Offering = "Marcus Maggio", RecruiterId = 16, Requirements = "Id qui dolorum illum voluptatem.", Salary = 1000m, WorkAreaId = 7 },
                        new { Id = 24, BePlus = "Ut reprehenderit reprehenderit ut incidunt at.", CityId = 2, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Chief", FullPartTime = "Part-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Dynamic Tactics Designer", Offering = "Nya Renner", RecruiterId = 16, Requirements = "Neque modi autem neque deserunt eos necessitatibus possimus.", Salary = 1000m, WorkAreaId = 5 },
                        new { Id = 25, BePlus = "Maiores modi est illo unde dicta omnis sit repellat perferendis.", CityId = 1, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "National", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Lead Implementation Agent", Offering = "Jedediah Stamm", RecruiterId = 13, Requirements = "Aut laborum maiores qui dolorum quia veniam.", Salary = 1000m, WorkAreaId = 2 },
                        new { Id = 26, BePlus = "Quia incidunt aut nisi error ullam et accusamus eveniet voluptatem.", CityId = 1, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Forward", FullPartTime = "Full-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Product Program Assistant", Offering = "Nellie Homenick", RecruiterId = 21, Requirements = "Optio non sit facilis sequi maxime magnam aliquid eius aut.", Salary = 1000m, WorkAreaId = 6 },
                        new { Id = 27, BePlus = "Excepturi reiciendis dolor ut ad.", CityId = 2, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Senior", FullPartTime = "Part-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Human Integration Technician", Offering = "Haleigh Huels", RecruiterId = 21, Requirements = "Nostrum eligendi dignissimos.", Salary = 1000m, WorkAreaId = 12 },
                        new { Id = 28, BePlus = "Sint ut similique recusandae ipsum a minus necessitatibus fugit quam.", CityId = 3, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Direct", FullPartTime = "Part-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Central Operations Designer", Offering = "Ava Hane", RecruiterId = 11111, Requirements = "Quia quibusdam vel eveniet ut dolor necessitatibus aliquid debitis.", Salary = 1000m, WorkAreaId = 4 },
                        new { Id = 29, BePlus = "Sit corporis in doloremque enim in illum.", CityId = 11, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Global", FullPartTime = "Part-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Human Mobility Executive", Offering = "Chaz Marquardt", RecruiterId = 17, Requirements = "Corrupti atque est mollitia et odio sit dicta et accusantium.", Salary = 1000m, WorkAreaId = 2 },
                        new { Id = 30, BePlus = "Tempore occaecati in aut nobis.", CityId = 11, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "District", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Principal Usability Planner", Offering = "Amira VonRueden", RecruiterId = 14, Requirements = "Reiciendis vel voluptatibus et.", Salary = 1000m, WorkAreaId = 12 },
                        new { Id = 31, BePlus = "Sed possimus mollitia officia magnam distinctio eligendi rerum illo esse.", CityId = 7, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Global", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Legacy Accountability Administrator", Offering = "Jordan Wyman", RecruiterId = 17, Requirements = "Cumque et optio fugit quisquam qui ducimus vel.", Salary = 1000m, WorkAreaId = 11 },
                        new { Id = 11111, BePlus = "Experience with Angular JS. Experience in setting up CI / CD. English: intermediate or higher.", CityId = 5, CreateDate = new DateTime(2018, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Client: is a European company, one of the industry leaders in transport and traffic solutions. It develops innovative systems for parking automation, traffic lights navigation, public transport management and data streams for autonomous vehicles.If you want to take part in developing solutions which power the transport of the future — it’s a good project for you.", FullPartTime = "Part-time", IsChecked = true, Name = ".Net Developer", Offering = "Working in friendly successful team. Ability to grow in professional area.", RecruiterId = 11111, Requirements = "Minimal 3 year experience in .NET web/API development (preferably .NET core). Good knowledge of SQL(MySQL / PostgreSQL). Being capable to do some front-end tasks. ", Salary = 5000m, WorkAreaId = 1 },
                        new { Id = 11112, BePlus = "Project Management Professional(PMP) / PRINCE II certification ", CityId = 5, CreateDate = new DateTime(2018, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "The Project Manager manages key client projects. Project management responsibilities include the coordination and completion of projects on time within budget and within scope.Prepare reports for upper management regarding status of project.", FullPartTime = "Full-time", IsChecked = false, Name = " Project Manager", Offering = "Working in friendly successful team. Ability to grow in professional area.", RecruiterId = 11111, Requirements = "Proven working experience in project management. Excellent client - facing and internal communication skill. Strong working knowledge of Microsoft Office.", Salary = 1000m, WorkAreaId = 1 },
                        new { Id = 34, BePlus = "Aliquid repellendus modi aut et.", CityId = 5, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Principal", FullPartTime = "Full-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Human Usability Facilitator", Offering = "Bessie Wisozk", RecruiterId = 17, Requirements = "Inventore voluptatem ea assumenda quisquam nam est quis exercitationem.", Salary = 1000m, WorkAreaId = 1 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.WorkArea", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_WORK_AREAS_NAME");

                    b.ToTable("WORK_AREAS");

                    b.HasData(
                        new { Id = 1, Name = "IT" },
                        new { Id = 2, Name = "Sales" },
                        new { Id = 3, Name = "Medicine" },
                        new { Id = 4, Name = "Marketing and Advertising" },
                        new { Id = 5, Name = "Law and Politics" },
                        new { Id = 6, Name = "Science" },
                        new { Id = 7, Name = "Tourism" },
                        new { Id = 8, Name = "Arts" },
                        new { Id = 9, Name = "Insurance" },
                        new { Id = 10, Name = "Real Estate" },
                        new { Id = 11, Name = "Finances" },
                        new { Id = 12, Name = "Media" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Company", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Companies")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_COMPANIES_TO_ROLES")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.EducationPeriod", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Faculty", "Faculty")
                        .WithMany("EducationPeriods")
                        .HasForeignKey("FacultyId")
                        .HasConstraintName("FK_PK_EDUCATION_PERIODS_TO_FACULTIES")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("EducationPeriods")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_PK_EDUCATION_PERIODS_TO_RESUMES")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.School", "School")
                        .WithMany("EducationPeriods")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_PK_EDUCATION_PERIODS_TO_SCHOOLS")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Employee", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.City", "City")
                        .WithMany("Employees")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_EMPLOYEES_TO_CITIES")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_EMPLOYEES_TO_ROLES")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Experience", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("Experiences")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_EXPERIENCES_TO_RESUMES")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.FavoriteVacancy", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Employee", "Employee")
                        .WithMany("FavoriteVacancies")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_FAVORITE_VACANCIES_TO_EMPLOYEES")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.Vacancy", "Vacancy")
                        .WithMany("FavoriteVacancies")
                        .HasForeignKey("VacancyId")
                        .HasConstraintName("FK_FAVORITE_VACANCIES_TO_VACANCIES")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Invitation", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Employee", "Employee")
                        .WithMany("Invitations")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_INVITATIONS_TO_EMPLOYEES")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.Vacancy", "Vacancy")
                        .WithMany("Invitations")
                        .HasForeignKey("VacancyId")
                        .HasConstraintName("FK_INVITATIONS_TO_VACANCIES")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Recruiter", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Company", "Company")
                        .WithMany("Recruiters")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_RECRUITERS_TO_COMPANIES")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Recruiters")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RECRUITERS_TO_ROLES")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Resume", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Employee", "Employee")
                        .WithOne("Resumes")
                        .HasForeignKey("JobList.DataAccess.Entities.Resume", "Id")
                        .HasConstraintName("FK_RESUMES_TO_EMPLOYEES")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.WorkArea", "WorkArea")
                        .WithMany("Resumes")
                        .HasForeignKey("WorkAreaId")
                        .HasConstraintName("FK_RESUMES_TO_WORKAREA")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.ResumeLanguage", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Language", "Language")
                        .WithMany("ResumeLanguages")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_PK_RESUME_LANGUAGES_TO_LANGUAGES")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("ResumeLanguages")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_PK_RESUME_LANGUAGES_TO_RESUMES")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Vacancy", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.City", "City")
                        .WithMany("Vacancies")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_VACANCIES_TO_CITIES")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("JobList.DataAccess.Entities.Recruiter", "Recruiter")
                        .WithMany("Vacancies")
                        .HasForeignKey("RecruiterId")
                        .HasConstraintName("FK_VACANCIES_TO_RECRUITERS")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.WorkArea", "WorkArea")
                        .WithMany("Vacancies")
                        .HasForeignKey("WorkAreaId")
                        .HasConstraintName("FK_VACANCIES_TO_WORK_AREAS")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
