// <auto-generated />
using System;
using JobList.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JobList.DataAccess.Migrations
{
    [DbContext(typeof(JobListDbContext))]
    [Migration("20181026104755_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JobList.DataAccess.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_CITIES_NAME");

                    b.ToTable("CITIES");

                    b.HasData(
                        new { Id = 1, Name = "New York" },
                        new { Id = 2, Name = "Jersey" },
                        new { Id = 3, Name = "Atlanta" },
                        new { Id = 4, Name = "Los Angeles" },
                        new { Id = 5, Name = "Boston" },
                        new { Id = 6, Name = "Philadelphia" },
                        new { Id = 7, Name = "Seattle" },
                        new { Id = 8, Name = "Washington DC" },
                        new { Id = 9, Name = "Las Vegas" },
                        new { Id = 10, Name = "Phoneix" },
                        new { Id = 11, Name = "San Francisco" },
                        new { Id = 12, Name = "Chicago" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("ADDRESS")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("BossName")
                        .IsRequired()
                        .HasColumnName("BOSS_NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(254)
                        .IsUnicode(false);

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnName("FULL_DESCRIPTION")
                        .IsUnicode(false);

                    b.Property<byte[]>("LogoData")
                        .HasColumnName("LOGO_DATA");

                    b.Property<string>("LogoMimetype")
                        .HasColumnName("LOGO_MIMETYPE")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("RefreshToken")
                        .HasColumnName("REFRESH_TOKEN")
                        .HasMaxLength(70)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnName("SHORT_DESCRIPTION")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Site")
                        .HasColumnName("SITE")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_EMAIL");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_NAME");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_PHONE")
                        .HasFilter("[PHONE] IS NOT NULL");

                    b.HasIndex("RefreshToken")
                        .IsUnique()
                        .HasName("UQ_COMPANIES_REFRESH_TOKEN")
                        .HasFilter("[REFRESH_TOKEN] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("COMPANIES");

                    b.HasData(
                        new { Id = 1, Address = "08100 Abshire Courts, East Christine, India", BossName = "Weldon", Email = "Jovanny21@hotmail.com", FullDescription = "Facilis nesciunt quia.", Name = "Company 64", Password = "TtbI_PZu1x", Phone = "(864) 845 5647", RoleId = 3, ShortDescription = "omnis", Site = "http://carter.com" },
                        new { Id = 2, Address = "7954 Tess Branch, Tremblayshire, Grenada", BossName = "Madilyn", Email = "Melyssa21@hotmail.com", FullDescription = "Porro et eligendi.", Name = "Company 33", Password = "oAjEAMMQkZ", Phone = "(87) 113 3233", RoleId = 3, ShortDescription = "velit", Site = "https://mariah.net" },
                        new { Id = 3, Address = "94379 Carter Shores, Sonyastad, Cayman Islands", BossName = "Victoria", Email = "Rosella_Kling16@yahoo.com", FullDescription = "Quis ab nihil.", Name = "Company 527", Password = "8czF9wuy5N", Phone = "(503) 815 5857", RoleId = 3, ShortDescription = "voluptas", Site = "https://zander.com" },
                        new { Id = 4, Address = "47723 Hirthe Estate, East Saulmouth, Cape Verde", BossName = "Murphy", Email = "Scotty9@yahoo.com", FullDescription = "Et consequatur possimus.", Name = "Company 933", Password = "Gu1bb6iabO", Phone = "(330) 37 213", RoleId = 3, ShortDescription = "sit", Site = "http://ethan.biz" },
                        new { Id = 5, Address = "824 Dolly Freeway, North Barneybury, Nigeria", BossName = "Meghan", Email = "Cierra85@hotmail.com", FullDescription = "Inventore nesciunt maxime.", Name = "Company 634", Password = "koYwA3rCwp", Phone = "(355) 383 9547", RoleId = 3, ShortDescription = "omnis", Site = "https://cecilia.com" },
                        new { Id = 6, Address = "97819 Bruen Circle, West Jaytown, Myanmar", BossName = "Bruce", Email = "Arvilla31@gmail.com", FullDescription = "Nemo cum enim.", Name = "Company 485", Password = "TEVSfAB5xI", Phone = "(414) 833 7242", RoleId = 3, ShortDescription = "quae", Site = "http://frederik.biz" },
                        new { Id = 7, Address = "68058 Kunze Gateway, New Camrenmouth, Bhutan", BossName = "Lorna", Email = "Jessica_Friesen@hotmail.com", FullDescription = "Sapiente odio fugiat.", Name = "Company 933", Password = "J8Mcfm8ml5", Phone = "(591) 664 8740", RoleId = 3, ShortDescription = "debitis", Site = "http://deon.com" },
                        new { Id = 8, Address = "0287 Hegmann Mountain, Belleland, New Zealand", BossName = "Maryse", Email = "Marcia.Leannon62@yahoo.com", FullDescription = "Fugiat dolorum ut.", Name = "Company 263", Password = "u7PM0xB4en", Phone = "(373) 184 4726", RoleId = 3, ShortDescription = "dicta", Site = "http://orland.name" },
                        new { Id = 9, Address = "34096 Krajcik Streets, Port Randalberg, Zimbabwe", BossName = "Edward", Email = "Malvina76@yahoo.com", FullDescription = "Dolor optio occaecati.", Name = "Company 365", Password = "7A6jTHvsWO", Phone = "(501) 15 7611", RoleId = 3, ShortDescription = "pariatur", Site = "http://isadore.biz" },
                        new { Id = 10, Address = "4004 Rebeka Garden, Millsshire, Ghana", BossName = "Skye", Email = "Germaine91@hotmail.com", FullDescription = "Repellat in ut.", Name = "Company 98", Password = "8RhT3Eo2sR", Phone = "(793) 615 2203", RoleId = 3, ShortDescription = "nemo", Site = "https://sandy.name" },
                        new { Id = 11111, Address = "2D Sadova Street Lviv", BossName = "Taras Kytsmey", Email = "company@gmail.com", FullDescription = "At SoftServe, we strive to make the world a better place. Our Corporate Social Responsibility program ensures a sustainable future for our associates, our company, and the communities in which we live and work across the globe. The key to fulfilling this mission is our responsibility towards customers, associates, and society. We are committed to addressing various economic, social, and environmental issues.", Name = "SoftServe", Password = "CdMwWKQ0n40R4dK/zsjIx0XhXdgxXCcyJfbbuViFMJC2mVik", Phone = "0322409090", RoleId = 3, ShortDescription = "Build you career here", Site = "https://softserveinc.com/en-us/" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.EducationPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FacultyId")
                        .HasColumnName("FACULTY_ID");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnName("FINISH_DATE")
                        .HasColumnType("date");

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.Property<int>("SchoolId")
                        .HasColumnName("SCHOOL_ID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("START_DATE")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("ResumeId");

                    b.HasIndex("SchoolId");

                    b.ToTable("EDUCATION_PERIODS");

                    b.HasData(
                        new { Id = 61, FacultyId = 4, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 43, SchoolId = 10, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 62, FacultyId = 5, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 43, SchoolId = 8, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 63, FacultyId = 10, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 43, SchoolId = 1, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 64, FacultyId = 4, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 43, SchoolId = 2, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 65, FacultyId = 9, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 43, SchoolId = 2, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 66, FacultyId = 9, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 43, SchoolId = 3, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 67, FacultyId = 3, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 43, SchoolId = 8, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 68, FacultyId = 10, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 43, SchoolId = 7, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 69, FacultyId = 1, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 43, SchoolId = 8, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 70, FacultyId = 3, FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 43, SchoolId = 4, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 111, FacultyId = 4, FinishDate = new DateTime(2005, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 46, SchoolId = 8, StartDate = new DateTime(2002, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 112, FacultyId = 2, FinishDate = new DateTime(2007, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), ResumeId = 46, SchoolId = 5, StartDate = new DateTime(2004, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("BIRTH_DATE")
                        .HasColumnType("date");

                    b.Property<int>("CityId")
                        .HasColumnName("CITY_ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(254)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FIRST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LAST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<byte[]>("PhotoData")
                        .HasColumnName("PHOTO_DATA");

                    b.Property<string>("PhotoMimeType")
                        .HasColumnName("PHOTO_MIME_TYPE")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("RefreshToken")
                        .HasColumnName("REFRESH_TOKEN")
                        .HasMaxLength(70)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.Property<string>("Sex")
                        .HasColumnName("SEX")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_EMPLOYEES_EMAIL");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_EMPLOYEES_PHONE")
                        .HasFilter("[PHONE] IS NOT NULL");

                    b.HasIndex("RefreshToken")
                        .IsUnique()
                        .HasName("UQ_EMPLOYEES_REFRESH_TOKEN")
                        .HasFilter("[REFRESH_TOKEN] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("EMPLOYEES");

                    b.HasData(
                        new { Id = 35, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 12, Email = "Kennedi.Kunze37@gmail.com", FirstName = "Terrance", LastName = "Steuber", Password = "uekvHpNQlG", Phone = "(35) 285 450", RoleId = 2, Sex = "m" },
                        new { Id = 36, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 11, Email = "Eduardo_Flatley@gmail.com", FirstName = "Enos", LastName = "Crist", Password = "DoTdE52nH5", Phone = "(774) 225 8689", RoleId = 2, Sex = "m" },
                        new { Id = 37, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 1, Email = "Derrick.Shanahan77@gmail.com", FirstName = "Anna", LastName = "Kihn", Password = "Jso0HYgTuM", Phone = "(170) 298 3397", RoleId = 2, Sex = "m" },
                        new { Id = 38, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 9, Email = "Merle29@gmail.com", FirstName = "Eleonore", LastName = "Stoltenberg", Password = "3uTvTf7hoG", Phone = "(903) 362 897", RoleId = 2, Sex = "f" },
                        new { Id = 39, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 4, Email = "Marilyne82@hotmail.com", FirstName = "Ida", LastName = "Wilderman", Password = "QKtvc3x5i6", Phone = "(858) 30 9590", RoleId = 2, Sex = "f" },
                        new { Id = 40, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 2, Email = "Cecelia_Harvey95@yahoo.com", FirstName = "Enrico", LastName = "Nolan", Password = "sVy3rV2qO3", Phone = "(740) 800 9628", RoleId = 2, Sex = "m" },
                        new { Id = 41, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 3, Email = "Fletcher.Leffler@yahoo.com", FirstName = "Aurelie", LastName = "Bahringer", Password = "3JfliYLBpI", Phone = "(627) 982 6531", RoleId = 2, Sex = "f" },
                        new { Id = 42, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 8, Email = "Davin68@gmail.com", FirstName = "Alphonso", LastName = "Cormier", Password = "fuQD0cIcbB", Phone = "(464) 146 6071", RoleId = 2, Sex = "f" },
                        new { Id = 43, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 1, Email = "Jennie_Trantow@yahoo.com", FirstName = "Hilario", LastName = "Muller", Password = "HqTcBzu_eg", Phone = "(662) 342 1372", RoleId = 2, Sex = "f" },
                        new { Id = 44, BirthDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 1, Email = "Jamal_Beatty@yahoo.com", FirstName = "Horacio", LastName = "Heaney", Password = "6n_IgEWVVs", Phone = "(450) 247 5", RoleId = 2, Sex = "f" },
                        new { Id = 46, BirthDate = new DateTime(1995, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), CityId = 8, Email = "employee@gmail.com", FirstName = "Andrew", LastName = "Felton", Password = "CdMwWKQ0n40R4dK/zsjIx0XhXdgxXCcyJfbbuViFMJC2mVik", Phone = "0502758765", RoleId = 2, Sex = "m" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnName("COMPANY_NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnName("FINISH_DATE")
                        .HasColumnType("date");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnName("POSITION")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("START_DATE")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("EXPERIENCES");

                    b.HasData(
                        new { Id = 48, CompanyName = "Eldon Parker", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Aut asperiores amet voluptatum minus sequi dolore et perspiciatis est.", ResumeId = 43, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 49, CompanyName = "Patience Fisher", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Suscipit nostrum modi modi dicta aspernatur eveniet mollitia optio error.", ResumeId = 43, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 50, CompanyName = "Bettie Torphy", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Commodi voluptas nobis a incidunt quibusdam deserunt illum deserunt.", ResumeId = 43, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 51, CompanyName = "Myriam Littel", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Rerum ipsum illo unde minus aut vitae dolores.", ResumeId = 43, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 52, CompanyName = "Polly Steuber", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Qui ipsa velit ullam.", ResumeId = 43, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 53, CompanyName = "Roberto Mosciski", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Velit aut cumque sunt dolores.", ResumeId = 43, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 54, CompanyName = "Ines Herzog", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Optio voluptatem atque perspiciatis reprehenderit aliquam nihil.", ResumeId = 43, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 55, CompanyName = "Adrian Ullrich", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Et laboriosam modi eaque eum.", ResumeId = 43, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 56, CompanyName = "Lurline Rolfson", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Occaecati ut et sed.", ResumeId = 43, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 57, CompanyName = "Electa Rowe", FinishDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Delectus esse quia ea est reiciendis.", ResumeId = 43, StartDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 65, CompanyName = "Triomed", FinishDate = new DateTime(2016, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Surgeon", ResumeId = 46, StartDate = new DateTime(2008, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 66, CompanyName = "Medis", FinishDate = new DateTime(2018, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Surgeon", ResumeId = 46, StartDate = new DateTime(2016, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 67, CompanyName = "Synevo", FinishDate = new DateTime(2018, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Surgeon", ResumeId = 46, StartDate = new DateTime(2018, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_FACULTIES_NAME");

                    b.ToTable("FACULTIES");

                    b.HasData(
                        new { Id = 1, Name = "Computer Science" },
                        new { Id = 2, Name = "Software Engineering" },
                        new { Id = 3, Name = "Applied Mathematics" },
                        new { Id = 4, Name = "Foreign Languages" },
                        new { Id = 5, Name = "International Relationships" },
                        new { Id = 6, Name = "Economics" },
                        new { Id = 7, Name = "Design" },
                        new { Id = 8, Name = "Faculty of Law" },
                        new { Id = 9, Name = "Marketing" },
                        new { Id = 10, Name = "Journalism" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.FavoriteVacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnName("EMPLOYEE_ID");

                    b.Property<int>("VacancyId")
                        .HasColumnName("VACANCY_ID");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("VacancyId");

                    b.ToTable("FAVORITE_VACANCIES");

                    b.HasData(
                        new { Id = 86, EmployeeId = 42, VacancyId = 27 },
                        new { Id = 87, EmployeeId = 44, VacancyId = 24 },
                        new { Id = 88, EmployeeId = 46, VacancyId = 27 },
                        new { Id = 89, EmployeeId = 39, VacancyId = 28 },
                        new { Id = 90, EmployeeId = 37, VacancyId = 29 },
                        new { Id = 91, EmployeeId = 44, VacancyId = 31 },
                        new { Id = 92, EmployeeId = 43, VacancyId = 31 },
                        new { Id = 93, EmployeeId = 41, VacancyId = 34 },
                        new { Id = 94, EmployeeId = 38, VacancyId = 11112 },
                        new { Id = 95, EmployeeId = 39, VacancyId = 24 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Invitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnName("EMPLOYEE_ID");

                    b.Property<int>("VacancyId")
                        .HasColumnName("VACANCY_ID");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("VacancyId");

                    b.ToTable("INVITATIONS");

                    b.HasData(
                        new { Id = 96, EmployeeId = 37, VacancyId = 34 },
                        new { Id = 97, EmployeeId = 44, VacancyId = 11112 },
                        new { Id = 98, EmployeeId = 39, VacancyId = 23 },
                        new { Id = 99, EmployeeId = 35, VacancyId = 31 },
                        new { Id = 100, EmployeeId = 38, VacancyId = 11112 },
                        new { Id = 101, EmployeeId = 43, VacancyId = 11111 },
                        new { Id = 102, EmployeeId = 41, VacancyId = 27 },
                        new { Id = 103, EmployeeId = 35, VacancyId = 24 },
                        new { Id = 104, EmployeeId = 37, VacancyId = 11111 },
                        new { Id = 105, EmployeeId = 36, VacancyId = 23 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_LANGUAGES_NAME");

                    b.ToTable("LANGUAGES");

                    b.HasData(
                        new { Id = 1, Name = "English" },
                        new { Id = 2, Name = "Ukrainian" },
                        new { Id = 3, Name = "Russian" },
                        new { Id = 4, Name = "Polish" },
                        new { Id = 5, Name = "Greek" },
                        new { Id = 6, Name = "Japanese" },
                        new { Id = 7, Name = "Spanish" },
                        new { Id = 8, Name = "Chinese" },
                        new { Id = 9, Name = "German" },
                        new { Id = 10, Name = "Roman" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Recruiter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnName("COMPANY_ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(254)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FIRST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LAST_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<byte[]>("PhotoData")
                        .HasColumnName("PHOTO_DATA");

                    b.Property<string>("PhotoMimetype")
                        .HasColumnName("PHOTO_MIMETYPE")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("RefreshToken")
                        .HasColumnName("REFRESH_TOKEN")
                        .HasMaxLength(70)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_RECRUITERS_EMAIL");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ_RECRUITERS_PHONE")
                        .HasFilter("[PHONE] IS NOT NULL");

                    b.HasIndex("RefreshToken")
                        .IsUnique()
                        .HasName("UQ_RECRUITERS_REFRESH_TOKEN")
                        .HasFilter("[REFRESH_TOKEN] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("RECRUITERS");

                    b.HasData(
                        new { Id = 12, CompanyId = 6, Email = "Corine.Wilderman36@hotmail.com", FirstName = "Marcia", LastName = "Harvey", Password = "a5K_h0tFVY", Phone = "(604) 988 6298", RoleId = 4 },
                        new { Id = 13, CompanyId = 8, Email = "Hilario.Quitzon@gmail.com", FirstName = "Zack", LastName = "Labadie", Password = "1POJVI4YLj", Phone = "(716) 106 9272", RoleId = 4 },
                        new { Id = 14, CompanyId = 4, Email = "Kaleb_Hartmann79@yahoo.com", FirstName = "Luigi", LastName = "McCullough", Password = "w86Pp44xVZ", Phone = "(64) 76 9938", RoleId = 4 },
                        new { Id = 15, CompanyId = 6, Email = "Emilio96@yahoo.com", FirstName = "Jeffry", LastName = "Koelpin", Password = "PdfcHjK0n_", Phone = "(478) 684 6368", RoleId = 4 },
                        new { Id = 16, CompanyId = 9, Email = "Garrison.Hagenes85@yahoo.com", FirstName = "Vicenta", LastName = "Weber", Password = "xYLYazWLzO", Phone = "(451) 425 9247", RoleId = 4 },
                        new { Id = 17, CompanyId = 9, Email = "Derek_Bergnaum13@hotmail.com", FirstName = "Casey", LastName = "Cremin", Password = "Li_N1U9rxk", Phone = "(528) 629 8099", RoleId = 4 },
                        new { Id = 18, CompanyId = 2, Email = "Harold88@gmail.com", FirstName = "Wilfredo", LastName = "Hintz", Password = "8FdmSJAlfZ", Phone = "(972) 632 7052", RoleId = 4 },
                        new { Id = 19, CompanyId = 3, Email = "Arthur_Leannon76@yahoo.com", FirstName = "Lacy", LastName = "Gaylord", Password = "wsB49h6oWp", Phone = "(758) 148 2434", RoleId = 4 },
                        new { Id = 20, CompanyId = 11111, Email = "Marcelino3@yahoo.com", FirstName = "Amina", LastName = "Casper", Password = "UauCu2CiQ7", Phone = "(485) 670 4533", RoleId = 4 },
                        new { Id = 21, CompanyId = 11111, Email = "Aleen75@hotmail.com", FirstName = "Kurtis", LastName = "Kreiger", Password = "3vts_t3RCq", Phone = "(540) 770 7762", RoleId = 4 },
                        new { Id = 11111, CompanyId = 11111, Email = "recruiter@gmail.com", FirstName = "Kate", LastName = "Janner", Password = "CdMwWKQ0n40R4dK/zsjIx0XhXdgxXCcyJfbbuViFMJC2mVik", Phone = "0934561223", RoleId = 4 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Resume", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Courses")
                        .HasColumnName("COURSES")
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Facebook")
                        .HasColumnName("FACEBOOK")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FamilyState")
                        .HasColumnName("FAMILY_STATE")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Github")
                        .HasColumnName("GITHUB")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Instagram")
                        .HasColumnName("INSTAGRAM")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnName("INTRODUCTION")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<string>("KeySkills")
                        .IsRequired()
                        .HasColumnName("KEY_SKILLS")
                        .IsUnicode(false);

                    b.Property<string>("Linkedin")
                        .HasColumnName("LINKEDIN")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Position")
                        .HasColumnName("POSITION")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Skype")
                        .HasColumnName("SKYPE")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("SoftSkills")
                        .IsRequired()
                        .HasColumnName("SOFT_SKILLS")
                        .IsUnicode(false);

                    b.Property<int>("WorkAreaId")
                        .HasColumnName("WORK_AREA_ID");

                    b.HasKey("Id");

                    b.HasIndex("Facebook")
                        .IsUnique()
                        .HasName("UQ_RESUMES_FACEBOOK")
                        .HasFilter("[FACEBOOK] IS NOT NULL");

                    b.HasIndex("Instagram")
                        .IsUnique()
                        .HasName("UQ_RESUMES_INSTAGRAM")
                        .HasFilter("[INSTAGRAM] IS NOT NULL");

                    b.HasIndex("Linkedin")
                        .IsUnique()
                        .HasName("UQ_RESUMES_LINKEDIN")
                        .HasFilter("[LINKEDIN] IS NOT NULL");

                    b.HasIndex("Skype")
                        .IsUnique()
                        .HasName("UQ_RESUMES_SKYPE")
                        .HasFilter("[SKYPE] IS NOT NULL");

                    b.HasIndex("WorkAreaId");

                    b.ToTable("RESUMES");

                    b.HasData(
                        new { Id = 43, Courses = "Ut cumque reiciendis unde voluptatem quasi mollitia.", CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Facebook = "https://wilson.name", FamilyState = "Occaecati.", Github = "https://dangelo.com", Instagram = "https://monica.biz", Introduction = "Architecto sint.", KeySkills = "Aperiam ea.", Linkedin = "https://bill.info", ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Position = "Saepe.", Skype = "https://olga.com", SoftSkills = "Reprehenderit rerum.", WorkAreaId = 9 },
                        new { Id = 46, Courses = "Certification training", CreateDate = new DateTime(2018, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), Facebook = "www.facebook.com", FamilyState = "not married", Github = "https://www.github.com/", Instagram = "https://www.instagram.com/", Introduction = "Persuasive person with strong desire to work", KeySkills = "Hardworking, persuasive", Linkedin = "https://www.linkedin.com/", Position = "Surgeon", Skype = "https://www.skype.com/", SoftSkills = "Plastic surgery", WorkAreaId = 3 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.ResumeLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId")
                        .HasColumnName("LANGUAGE_ID");

                    b.Property<int>("ResumeId")
                        .HasColumnName("RESUME_ID");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ResumeId");

                    b.ToTable("RESUME_LANGUAGES");

                    b.HasData(
                        new { Id = 73, LanguageId = 9, ResumeId = 43 },
                        new { Id = 74, LanguageId = 9, ResumeId = 43 },
                        new { Id = 75, LanguageId = 5, ResumeId = 43 },
                        new { Id = 76, LanguageId = 10, ResumeId = 43 },
                        new { Id = 77, LanguageId = 4, ResumeId = 43 },
                        new { Id = 78, LanguageId = 6, ResumeId = 43 },
                        new { Id = 79, LanguageId = 9, ResumeId = 43 },
                        new { Id = 80, LanguageId = 2, ResumeId = 43 },
                        new { Id = 81, LanguageId = 6, ResumeId = 43 },
                        new { Id = 82, LanguageId = 3, ResumeId = 43 },
                        new { Id = 111, LanguageId = 10, ResumeId = 46 },
                        new { Id = 112, LanguageId = 5, ResumeId = 46 },
                        new { Id = 113, LanguageId = 7, ResumeId = 46 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_ROLES_NAME");

                    b.ToTable("ROLES");

                    b.HasData(
                        new { Id = 1, Name = "admin" },
                        new { Id = 2, Name = "employee" },
                        new { Id = 3, Name = "company" },
                        new { Id = 4, Name = "recruiter" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.School", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_SCHOOLS_NAME");

                    b.ToTable("SCHOOLS");

                    b.HasData(
                        new { Id = 1, Name = "Chicago State University" },
                        new { Id = 2, Name = "Harvard University" },
                        new { Id = 3, Name = "Prinston University" },
                        new { Id = 4, Name = "Berklee College Of Arts" },
                        new { Id = 5, Name = "Stanford University" },
                        new { Id = 6, Name = "Massachusetts Institute of Technology" },
                        new { Id = 7, Name = "Columbia University" },
                        new { Id = 8, Name = "New York University" },
                        new { Id = 9, Name = "University of Arizona" },
                        new { Id = 10, Name = "Yale University" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BePlus")
                        .HasColumnName("BE_PLUS")
                        .IsUnicode(false);

                    b.Property<int>("CityId")
                        .HasColumnName("CITY_ID");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATE_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("DESCRIPTION")
                        .IsUnicode(false);

                    b.Property<string>("FullPartTime")
                        .HasColumnName("FULL_PART_TIME")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<bool?>("IsChecked")
                        .HasColumnName("IS_CHECKED");

                    b.Property<DateTime?>("ModDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MOD_DATE")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Offering")
                        .IsRequired()
                        .HasColumnName("OFFERING")
                        .IsUnicode(false);

                    b.Property<int>("RecruiterId")
                        .HasColumnName("RECRUITER_ID");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnName("REQUIREMENTS")
                        .IsUnicode(false);

                    b.Property<decimal?>("Salary")
                        .HasColumnName("SALARY")
                        .HasColumnType("money");

                    b.Property<int>("WorkAreaId")
                        .HasColumnName("WORK_AREA_ID");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("RecruiterId");

                    b.HasIndex("WorkAreaId");

                    b.ToTable("VACANCIES");

                    b.HasData(
                        new { Id = 23, BePlus = "Delectus cum temporibus repellendus.", CityId = 1, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Senior", FullPartTime = "Part-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Investor Factors Consultant", Offering = "Esperanza Boehm", RecruiterId = 21, Requirements = "Quam voluptates quo.", Salary = 1000m, WorkAreaId = 5 },
                        new { Id = 24, BePlus = "Libero provident ab impedit earum deleniti.", CityId = 3, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Global", FullPartTime = "Part-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "District Applications Associate", Offering = "Delfina Hayes", RecruiterId = 12, Requirements = "Labore est aperiam at ut corrupti enim.", Salary = 1000m, WorkAreaId = 2 },
                        new { Id = 25, BePlus = "Et deleniti id soluta.", CityId = 11, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Customer", FullPartTime = "Full-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Regional Identity Executive", Offering = "Leif Daugherty", RecruiterId = 15, Requirements = "In placeat quia praesentium est sint.", Salary = 1000m, WorkAreaId = 10 },
                        new { Id = 26, BePlus = "Omnis asperiores voluptates et dolorem voluptatem rerum sit dignissimos.", CityId = 1, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Human", FullPartTime = "Part-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "International Directives Executive", Offering = "Eloise O'Reilly", RecruiterId = 18, Requirements = "Minus odit occaecati nemo ratione.", Salary = 1000m, WorkAreaId = 4 },
                        new { Id = 27, BePlus = "Aperiam repudiandae eos porro a.", CityId = 4, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Senior", FullPartTime = "Part-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Regional Accounts Technician", Offering = "Lexi Zieme", RecruiterId = 15, Requirements = "Corporis aut voluptas ipsam accusamus eum est.", Salary = 1000m, WorkAreaId = 12 },
                        new { Id = 28, BePlus = "Neque blanditiis eveniet libero.", CityId = 4, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Regional", FullPartTime = "Full-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Legacy Integration Orchestrator", Offering = "Karine Lakin", RecruiterId = 15, Requirements = "Porro est dolorem voluptatem.", Salary = 1000m, WorkAreaId = 1 },
                        new { Id = 29, BePlus = "Repellat autem nulla.", CityId = 4, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Global", FullPartTime = "Part-time", IsChecked = false, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Corporate Optimization Assistant", Offering = "Valentin Ortiz", RecruiterId = 11111, Requirements = "Illo deserunt et fugiat ea quibusdam culpa sed rerum eligendi.", Salary = 1000m, WorkAreaId = 1 },
                        new { Id = 30, BePlus = "Qui et aliquam aut facilis a.", CityId = 5, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Chief", FullPartTime = "Part-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Lead Marketing Specialist", Offering = "Merl Corkery", RecruiterId = 13, Requirements = "Mollitia placeat sunt eos iste nam aut tempore incidunt occaecati.", Salary = 1000m, WorkAreaId = 12 },
                        new { Id = 31, BePlus = "Nemo voluptas natus.", CityId = 5, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Principal", FullPartTime = "Full-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Direct Infrastructure Technician", Offering = "Kaya Huels", RecruiterId = 14, Requirements = "Deleniti provident velit vel maiores temporibus unde.", Salary = 1000m, WorkAreaId = 5 },
                        new { Id = 11111, BePlus = "Experience with Angular JS. Experience in setting up CI / CD. English: intermediate or higher.", CityId = 5, CreateDate = new DateTime(2018, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Client: is a European company, one of the industry leaders in transport and traffic solutions. It develops innovative systems for parking automation, traffic lights navigation, public transport management and data streams for autonomous vehicles.If you want to take part in developing solutions which power the transport of the future — it’s a good project for you.", FullPartTime = "Part-time", IsChecked = true, Name = ".Net Developer", Offering = "Working in friendly successful team. Ability to grow in professional area.", RecruiterId = 11111, Requirements = "Minimal 3 year experience in .NET web/API development (preferably .NET core). Good knowledge of SQL(MySQL / PostgreSQL). Being capable to do some front-end tasks. ", Salary = 5000m, WorkAreaId = 1 },
                        new { Id = 11112, BePlus = "Project Management Professional(PMP) / PRINCE II certification ", CityId = 5, CreateDate = new DateTime(2018, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "The Project Manager manages key client projects. Project management responsibilities include the coordination and completion of projects on time within budget and within scope.Prepare reports for upper management regarding status of project.", FullPartTime = "Full-time", IsChecked = false, Name = " Project Manager", Offering = "Working in friendly successful team. Ability to grow in professional area.", RecruiterId = 11111, Requirements = "Proven working experience in project management. Excellent client - facing and internal communication skill. Strong working knowledge of Microsoft Office.", Salary = 1000m, WorkAreaId = 1 },
                        new { Id = 34, BePlus = "In omnis molestiae fugiat quos.", CityId = 6, CreateDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Dynamic", FullPartTime = "Part-time", IsChecked = true, ModDate = new DateTime(2017, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Human Response Facilitator", Offering = "Arno Reilly", RecruiterId = 12, Requirements = "Autem quia explicabo fuga dolore reprehenderit autem impedit.", Salary = 1000m, WorkAreaId = 9 }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.WorkArea", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_WORK_AREAS_NAME");

                    b.ToTable("WORK_AREAS");

                    b.HasData(
                        new { Id = 1, Name = "IT" },
                        new { Id = 2, Name = "Sales" },
                        new { Id = 3, Name = "Medicine" },
                        new { Id = 4, Name = "Marketing and Advertising" },
                        new { Id = 5, Name = "Law and Politics" },
                        new { Id = 6, Name = "Science" },
                        new { Id = 7, Name = "Tourism" },
                        new { Id = 8, Name = "Arts" },
                        new { Id = 9, Name = "Insurance" },
                        new { Id = 10, Name = "Real Estate" },
                        new { Id = 11, Name = "Finances" },
                        new { Id = 12, Name = "Media" }
                    );
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Company", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Companies")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_COMPANIES_TO_ROLES")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.EducationPeriod", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Faculty", "Faculty")
                        .WithMany("EducationPeriods")
                        .HasForeignKey("FacultyId")
                        .HasConstraintName("FK_PK_EDUCATION_PERIODS_TO_FACULTIES")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("EducationPeriods")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_PK_EDUCATION_PERIODS_TO_RESUMES")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.School", "School")
                        .WithMany("EducationPeriods")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_PK_EDUCATION_PERIODS_TO_SCHOOLS")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Employee", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.City", "City")
                        .WithMany("Employees")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_EMPLOYEES_TO_CITIES")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_EMPLOYEES_TO_ROLES")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Experience", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("Experiences")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_EXPERIENCES_TO_RESUMES")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.FavoriteVacancy", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Employee", "Employee")
                        .WithMany("FavoriteVacancies")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_FAVORITE_VACANCIES_TO_EMPLOYEES")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.Vacancy", "Vacancy")
                        .WithMany("FavoriteVacancies")
                        .HasForeignKey("VacancyId")
                        .HasConstraintName("FK_FAVORITE_VACANCIES_TO_VACANCIES")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Invitation", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Employee", "Employee")
                        .WithMany("Invitations")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_INVITATIONS_TO_EMPLOYEES")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.Vacancy", "Vacancy")
                        .WithMany("Invitations")
                        .HasForeignKey("VacancyId")
                        .HasConstraintName("FK_INVITATIONS_TO_VACANCIES")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Recruiter", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Company", "Company")
                        .WithMany("Recruiters")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_RECRUITERS_TO_COMPANIES")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.Role", "Role")
                        .WithMany("Recruiters")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RECRUITERS_TO_ROLES")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Resume", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Employee", "Employee")
                        .WithOne("Resumes")
                        .HasForeignKey("JobList.DataAccess.Entities.Resume", "Id")
                        .HasConstraintName("FK_RESUMES_TO_EMPLOYEES")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.WorkArea", "WorkArea")
                        .WithMany("Resumes")
                        .HasForeignKey("WorkAreaId")
                        .HasConstraintName("FK_RESUMES_TO_WORKAREA")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.ResumeLanguage", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.Language", "Language")
                        .WithMany("ResumeLanguages")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_PK_RESUME_LANGUAGES_TO_LANGUAGES")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("JobList.DataAccess.Entities.Resume", "Resume")
                        .WithMany("ResumeLanguages")
                        .HasForeignKey("ResumeId")
                        .HasConstraintName("FK_PK_RESUME_LANGUAGES_TO_RESUMES")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobList.DataAccess.Entities.Vacancy", b =>
                {
                    b.HasOne("JobList.DataAccess.Entities.City", "City")
                        .WithMany("Vacancies")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_VACANCIES_TO_CITIES")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("JobList.DataAccess.Entities.Recruiter", "Recruiter")
                        .WithMany("Vacancies")
                        .HasForeignKey("RecruiterId")
                        .HasConstraintName("FK_VACANCIES_TO_RECRUITERS")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobList.DataAccess.Entities.WorkArea", "WorkArea")
                        .WithMany("Vacancies")
                        .HasForeignKey("WorkAreaId")
                        .HasConstraintName("FK_VACANCIES_TO_WORK_AREAS")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
